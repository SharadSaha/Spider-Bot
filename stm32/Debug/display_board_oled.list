
display_board_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e688  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001890  0800e818  0800e818  0001e818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100a8  080100a8  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  080100a8  080100a8  000200a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100b0  080100b0  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100b0  080100b0  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080100b4  080100b4  000200b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080100b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005684  20000094  0801014c  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005718  0801014c  00035718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000323b1  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006274  00000000  00000000  00062475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d0  00000000  00000000  000686f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020c0  00000000  00000000  0006a9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007f73  00000000  00000000  0006ca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029c7c  00000000  00000000  000749f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1738  00000000  00000000  0009e66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017fda7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000980c  00000000  00000000  0017fdfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e800 	.word	0x0800e800

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800e800 	.word	0x0800e800

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b70:	f000 b96e 	b.w	8000e50 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9d08      	ldr	r5, [sp, #32]
 8000b92:	4604      	mov	r4, r0
 8000b94:	468c      	mov	ip, r1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8083 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4617      	mov	r7, r2
 8000ba0:	d947      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba2:	fab2 f282 	clz	r2, r2
 8000ba6:	b142      	cbz	r2, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	f1c2 0020 	rsb	r0, r2, #32
 8000bac:	fa24 f000 	lsr.w	r0, r4, r0
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	4097      	lsls	r7, r2
 8000bb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bb8:	4094      	lsls	r4, r2
 8000bba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bc4:	fa1f fe87 	uxth.w	lr, r7
 8000bc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d909      	bls.n	8000bec <__udivmoddi4+0x60>
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bde:	f080 8119 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 8116 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	443b      	add	r3, r7
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x8c>
 8000c04:	193c      	adds	r4, r7, r4
 8000c06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c0a:	f080 8105 	bcs.w	8000e18 <__udivmoddi4+0x28c>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	f240 8102 	bls.w	8000e18 <__udivmoddi4+0x28c>
 8000c14:	3802      	subs	r0, #2
 8000c16:	443c      	add	r4, r7
 8000c18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1c:	eba4 040e 	sub.w	r4, r4, lr
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa0>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d150      	bne.n	8000ce0 <__udivmoddi4+0x154>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2601      	movs	r6, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c21      	lsrs	r1, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	f200 80e9 	bhi.w	8000e40 <__udivmoddi4+0x2b4>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1ac9      	subs	r1, r1, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d9 	bhi.w	8000e48 <__udivmoddi4+0x2bc>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7bf      	b.n	8000c22 <__udivmoddi4+0x96>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0x12e>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80b1 	beq.w	8000e0e <__udivmoddi4+0x282>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0x140>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80b8 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0103 	sbc.w	r1, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0a8      	beq.n	8000c2c <__udivmoddi4+0xa0>
 8000cda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0xa0>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ce8:	4097      	lsls	r7, r2
 8000cea:	fa01 f002 	lsl.w	r0, r1, r2
 8000cee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf2:	40d9      	lsrs	r1, r3
 8000cf4:	4330      	orrs	r0, r6
 8000cf6:	0c03      	lsrs	r3, r0, #16
 8000cf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cfc:	fa1f f887 	uxth.w	r8, r7
 8000d00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d08:	fb06 f108 	mul.w	r1, r6, r8
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d1a:	f080 808d 	bcs.w	8000e38 <__udivmoddi4+0x2ac>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 808a 	bls.w	8000e38 <__udivmoddi4+0x2ac>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b281      	uxth	r1, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	1879      	adds	r1, r7, r1
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d46:	d273      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d971      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	4439      	add	r1, r7
 8000d50:	1acb      	subs	r3, r1, r3
 8000d52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c6 0c20 	rsb	ip, r6, #32
 8000d5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d64:	431c      	orrs	r4, r3
 8000d66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d76:	431f      	orrs	r7, r3
 8000d78:	0c3b      	lsrs	r3, r7, #16
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fa1f f884 	uxth.w	r8, r4
 8000d82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8e:	458a      	cmp	sl, r1
 8000d90:	fa02 f206 	lsl.w	r2, r2, r6
 8000d94:	fa00 f306 	lsl.w	r3, r0, r6
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x220>
 8000d9a:	1861      	adds	r1, r4, r1
 8000d9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000da0:	d248      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000da2:	458a      	cmp	sl, r1
 8000da4:	d946      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000da6:	f1a9 0902 	sub.w	r9, r9, #2
 8000daa:	4421      	add	r1, r4
 8000dac:	eba1 010a 	sub.w	r1, r1, sl
 8000db0:	b2bf      	uxth	r7, r7
 8000db2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dbe:	fb00 f808 	mul.w	r8, r0, r8
 8000dc2:	45b8      	cmp	r8, r7
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x24a>
 8000dc6:	19e7      	adds	r7, r4, r7
 8000dc8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dcc:	d22e      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000dce:	45b8      	cmp	r8, r7
 8000dd0:	d92c      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4427      	add	r7, r4
 8000dd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dda:	eba7 0708 	sub.w	r7, r7, r8
 8000dde:	fba0 8902 	umull	r8, r9, r0, r2
 8000de2:	454f      	cmp	r7, r9
 8000de4:	46c6      	mov	lr, r8
 8000de6:	4649      	mov	r1, r9
 8000de8:	d31a      	bcc.n	8000e20 <__udivmoddi4+0x294>
 8000dea:	d017      	beq.n	8000e1c <__udivmoddi4+0x290>
 8000dec:	b15d      	cbz	r5, 8000e06 <__udivmoddi4+0x27a>
 8000dee:	ebb3 020e 	subs.w	r2, r3, lr
 8000df2:	eb67 0701 	sbc.w	r7, r7, r1
 8000df6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dfa:	40f2      	lsrs	r2, r6
 8000dfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000e00:	40f7      	lsrs	r7, r6
 8000e02:	e9c5 2700 	strd	r2, r7, [r5]
 8000e06:	2600      	movs	r6, #0
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	462e      	mov	r6, r5
 8000e10:	4628      	mov	r0, r5
 8000e12:	e70b      	b.n	8000c2c <__udivmoddi4+0xa0>
 8000e14:	4606      	mov	r6, r0
 8000e16:	e6e9      	b.n	8000bec <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fd      	b.n	8000c18 <__udivmoddi4+0x8c>
 8000e1c:	4543      	cmp	r3, r8
 8000e1e:	d2e5      	bcs.n	8000dec <__udivmoddi4+0x260>
 8000e20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e24:	eb69 0104 	sbc.w	r1, r9, r4
 8000e28:	3801      	subs	r0, #1
 8000e2a:	e7df      	b.n	8000dec <__udivmoddi4+0x260>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e7d2      	b.n	8000dd6 <__udivmoddi4+0x24a>
 8000e30:	4660      	mov	r0, ip
 8000e32:	e78d      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e34:	4681      	mov	r9, r0
 8000e36:	e7b9      	b.n	8000dac <__udivmoddi4+0x220>
 8000e38:	4666      	mov	r6, ip
 8000e3a:	e775      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	e74a      	b.n	8000cd6 <__udivmoddi4+0x14a>
 8000e40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e44:	4439      	add	r1, r7
 8000e46:	e713      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	443c      	add	r4, r7
 8000e4c:	e724      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <faces>:
	  SSD1306_UpdateScreen();
	}
	vTaskDelete(NULL);
}

void faces(void *parameters){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	6078      	str	r0, [r7, #4]
	int times = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  while(1){
	    SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 8000e60:	2301      	movs	r3, #1
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	2340      	movs	r3, #64	; 0x40
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	4a35      	ldr	r2, [pc, #212]	; (8000f40 <faces+0xec>)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 fc74 	bl	800175c <SSD1306_DrawBitmap>
	    SSD1306_UpdateScreen();
 8000e74:	f000 fd9e 	bl	80019b4 <SSD1306_UpdateScreen>
	    HAL_Delay(times+750);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 f9e2 	bl	8002248 <HAL_Delay>
	    SSD1306_Clear();
 8000e84:	f000 fe3c 	bl	8001b00 <SSD1306_Clear>


	    SSD1306_DrawBitmap(0, 0, face2, 128, 64, 1);
 8000e88:	2301      	movs	r3, #1
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	2340      	movs	r3, #64	; 0x40
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	4a2c      	ldr	r2, [pc, #176]	; (8000f44 <faces+0xf0>)
 8000e94:	2100      	movs	r1, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 fc60 	bl	800175c <SSD1306_DrawBitmap>
	    SSD1306_UpdateScreen();
 8000e9c:	f000 fd8a 	bl	80019b4 <SSD1306_UpdateScreen>
	    HAL_Delay(times);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 f9d0 	bl	8002248 <HAL_Delay>
	    SSD1306_Clear();
 8000ea8:	f000 fe2a 	bl	8001b00 <SSD1306_Clear>

	    SSD1306_DrawBitmap(0, 0, face3, 128, 64, 1);
 8000eac:	2301      	movs	r3, #1
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	2340      	movs	r3, #64	; 0x40
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	4a24      	ldr	r2, [pc, #144]	; (8000f48 <faces+0xf4>)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 fc4e 	bl	800175c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000ec0:	f000 fd78 	bl	80019b4 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 f9be 	bl	8002248 <HAL_Delay>
		SSD1306_Clear();
 8000ecc:	f000 fe18 	bl	8001b00 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face4, 128, 64, 1);
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	2340      	movs	r3, #64	; 0x40
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <faces+0xf8>)
 8000edc:	2100      	movs	r1, #0
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 fc3c 	bl	800175c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000ee4:	f000 fd66 	bl	80019b4 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 f9ac 	bl	8002248 <HAL_Delay>
		SSD1306_Clear();
 8000ef0:	f000 fe06 	bl	8001b00 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face5, 128, 64, 1);
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	2340      	movs	r3, #64	; 0x40
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <faces+0xfc>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 fc2a 	bl	800175c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000f08:	f000 fd54 	bl	80019b4 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 f99a 	bl	8002248 <HAL_Delay>
		SSD1306_Clear();
 8000f14:	f000 fdf4 	bl	8001b00 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face6, 128, 64, 1);
 8000f18:	2301      	movs	r3, #1
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	2340      	movs	r3, #64	; 0x40
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <faces+0x100>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 fc18 	bl	800175c <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000f2c:	f000 fd42 	bl	80019b4 <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 f988 	bl	8002248 <HAL_Delay>
		SSD1306_Clear();
 8000f38:	f000 fde2 	bl	8001b00 <SSD1306_Clear>
	    SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 8000f3c:	e790      	b.n	8000e60 <faces+0xc>
 8000f3e:	bf00      	nop
 8000f40:	0800e86c 	.word	0x0800e86c
 8000f44:	0800ec6c 	.word	0x0800ec6c
 8000f48:	0800f06c 	.word	0x0800f06c
 8000f4c:	0800f46c 	.word	0x0800f46c
 8000f50:	0800f86c 	.word	0x0800f86c
 8000f54:	0800fc6c 	.word	0x0800fc6c

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f001 f931 	bl	80021c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f835 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 f9a1 	bl	80012ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f6a:	f000 f8b3 	bl	80010d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f6e:	f000 f90d 	bl	800118c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f72:	f000 f93b 	bl	80011ec <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f76:	f000 f96f 	bl	8001258 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000f7a:	f000 f8d9 	bl	8001130 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000f7e:	f000 fc55 	bl	800182c <SSD1306_Init>
  PCA9685_Init(&hi2c1);
 8000f82:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <main+0x60>)
 8000f84:	f000 fbd4 	bl	8001730 <PCA9685_Init>
//  void (*func_ptr[6])(void) = {normal,annoy,angry_annoy,sad,happy,angry};

//
  xTaskHandle HT1;//,HT2;
  xTaskCreate(faces, "face_show", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT1);
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2300      	movs	r3, #0
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	4909      	ldr	r1, [pc, #36]	; (8000fbc <main+0x64>)
 8000f96:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <main+0x68>)
 8000f98:	f00b f96f 	bl	800c27a <xTaskCreate>
//  xTaskCreate(debugsy, "debugging", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT2);
//  vTaskStartScheduler();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f9c:	f00a f85a 	bl	800b054 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fa0:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <main+0x6c>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <main+0x70>)
 8000fa6:	f00a f89f 	bl	800b0e8 <osThreadNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <main+0x74>)
 8000fae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fb0:	f00a f874 	bl	800b09c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <main+0x5c>
 8000fb6:	bf00      	nop
 8000fb8:	20004e30 	.word	0x20004e30
 8000fbc:	0800e838 	.word	0x0800e838
 8000fc0:	08000e55 	.word	0x08000e55
 8000fc4:	0801006c 	.word	0x0801006c
 8000fc8:	080014a9 	.word	0x080014a9
 8000fcc:	20004dd8 	.word	0x20004dd8

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b098      	sub	sp, #96	; 0x60
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00d fabe 	bl	800e560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b31      	ldr	r3, [pc, #196]	; (80010cc <SystemClock_Config+0xfc>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a30      	ldr	r2, [pc, #192]	; (80010cc <SystemClock_Config+0xfc>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <SystemClock_Config+0xfc>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <SystemClock_Config+0x100>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a2a      	ldr	r2, [pc, #168]	; (80010d0 <SystemClock_Config+0x100>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <SystemClock_Config+0x100>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103a:	2301      	movs	r3, #1
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800103e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2302      	movs	r3, #2
 8001046:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001048:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800104c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800104e:	2308      	movs	r3, #8
 8001050:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001052:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001056:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800105c:	2307      	movs	r3, #7
 800105e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001064:	4618      	mov	r0, r3
 8001066:	f005 f8af 	bl	80061c8 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001070:	f000 fa36 	bl	80014e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	230f      	movs	r3, #15
 8001076:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001080:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	2105      	movs	r1, #5
 8001092:	4618      	mov	r0, r3
 8001094:	f005 fb10 	bl	80066b8 <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800109e:	f000 fa1f 	bl	80014e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010a2:	2301      	movs	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80010a6:	23c0      	movs	r3, #192	; 0xc0
 80010a8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 fd2e 	bl	8006b14 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80010be:	f000 fa0f 	bl	80014e0 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3760      	adds	r7, #96	; 0x60
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_I2C1_Init+0x50>)
 80010da:	4a13      	ldr	r2, [pc, #76]	; (8001128 <MX_I2C1_Init+0x54>)
 80010dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_I2C1_Init+0x50>)
 80010e0:	4a12      	ldr	r2, [pc, #72]	; (800112c <MX_I2C1_Init+0x58>)
 80010e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_I2C1_Init+0x50>)
 80010f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_I2C1_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_I2C1_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_I2C1_Init+0x50>)
 8001112:	f003 f94b 	bl	80043ac <HAL_I2C_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800111c:	f000 f9e0 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20004e30 	.word	0x20004e30
 8001128:	40005400 	.word	0x40005400
 800112c:	00061a80 	.word	0x00061a80

08001130 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_I2C3_Init+0x50>)
 8001136:	4a13      	ldr	r2, [pc, #76]	; (8001184 <MX_I2C3_Init+0x54>)
 8001138:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_I2C3_Init+0x50>)
 800113c:	4a12      	ldr	r2, [pc, #72]	; (8001188 <MX_I2C3_Init+0x58>)
 800113e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_I2C3_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_I2C3_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_I2C3_Init+0x50>)
 800114e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001152:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_I2C3_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_I2C3_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_I2C3_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_I2C3_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_I2C3_Init+0x50>)
 800116e:	f003 f91d 	bl	80043ac <HAL_I2C_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001178:	f000 f9b2 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20004ddc 	.word	0x20004ddc
 8001184:	40005c00 	.word	0x40005c00
 8001188:	00061a80 	.word	0x00061a80

0800118c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_I2S3_Init+0x54>)
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <MX_I2S3_Init+0x58>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_I2S3_Init+0x54>)
 8001198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_I2S3_Init+0x54>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_I2S3_Init+0x54>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MX_I2S3_Init+0x54>)
 80011ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_I2S3_Init+0x54>)
 80011b4:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <MX_I2S3_Init+0x5c>)
 80011b6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_I2S3_Init+0x54>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_I2S3_Init+0x54>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_I2S3_Init+0x54>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_I2S3_Init+0x54>)
 80011cc:	f004 fb5c 	bl	8005888 <HAL_I2S_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80011d6:	f000 f983 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20004f24 	.word	0x20004f24
 80011e4:	40003c00 	.word	0x40003c00
 80011e8:	00017700 	.word	0x00017700

080011ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_SPI1_Init+0x64>)
 80011f2:	4a18      	ldr	r2, [pc, #96]	; (8001254 <MX_SPI1_Init+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_SPI1_Init+0x64>)
 80011f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_SPI1_Init+0x64>)
 8001218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_SPI1_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <MX_SPI1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_SPI1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <MX_SPI1_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_SPI1_Init+0x64>)
 8001238:	220a      	movs	r2, #10
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_SPI1_Init+0x64>)
 800123e:	f005 fda9 	bl	8006d94 <HAL_SPI_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001248:	f000 f94a 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20004e88 	.word	0x20004e88
 8001254:	40013000 	.word	0x40013000

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_USART2_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001290:	f006 f8b6 	bl	8007400 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f000 f921 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20004ee0 	.word	0x20004ee0
 80012a8:	40004400 	.word	0x40004400

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	; 0x30
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	4b71      	ldr	r3, [pc, #452]	; (800148c <MX_GPIO_Init+0x1e0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a70      	ldr	r2, [pc, #448]	; (800148c <MX_GPIO_Init+0x1e0>)
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b6e      	ldr	r3, [pc, #440]	; (800148c <MX_GPIO_Init+0x1e0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	61bb      	str	r3, [r7, #24]
 80012dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	4b6a      	ldr	r3, [pc, #424]	; (800148c <MX_GPIO_Init+0x1e0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a69      	ldr	r2, [pc, #420]	; (800148c <MX_GPIO_Init+0x1e0>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b67      	ldr	r3, [pc, #412]	; (800148c <MX_GPIO_Init+0x1e0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b63      	ldr	r3, [pc, #396]	; (800148c <MX_GPIO_Init+0x1e0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a62      	ldr	r2, [pc, #392]	; (800148c <MX_GPIO_Init+0x1e0>)
 8001304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b60      	ldr	r3, [pc, #384]	; (800148c <MX_GPIO_Init+0x1e0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b5c      	ldr	r3, [pc, #368]	; (800148c <MX_GPIO_Init+0x1e0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a5b      	ldr	r2, [pc, #364]	; (800148c <MX_GPIO_Init+0x1e0>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b59      	ldr	r3, [pc, #356]	; (800148c <MX_GPIO_Init+0x1e0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	4b55      	ldr	r3, [pc, #340]	; (800148c <MX_GPIO_Init+0x1e0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a54      	ldr	r2, [pc, #336]	; (800148c <MX_GPIO_Init+0x1e0>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b52      	ldr	r3, [pc, #328]	; (800148c <MX_GPIO_Init+0x1e0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b4e      	ldr	r3, [pc, #312]	; (800148c <MX_GPIO_Init+0x1e0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a4d      	ldr	r2, [pc, #308]	; (800148c <MX_GPIO_Init+0x1e0>)
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b4b      	ldr	r3, [pc, #300]	; (800148c <MX_GPIO_Init+0x1e0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2108      	movs	r1, #8
 800136e:	4848      	ldr	r0, [pc, #288]	; (8001490 <MX_GPIO_Init+0x1e4>)
 8001370:	f001 fa9e 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	2101      	movs	r1, #1
 8001378:	4846      	ldr	r0, [pc, #280]	; (8001494 <MX_GPIO_Init+0x1e8>)
 800137a:	f001 fa99 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800137e:	2200      	movs	r2, #0
 8001380:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001384:	4844      	ldr	r0, [pc, #272]	; (8001498 <MX_GPIO_Init+0x1ec>)
 8001386:	f001 fa93 	bl	80028b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800138a:	2308      	movs	r3, #8
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	483b      	ldr	r0, [pc, #236]	; (8001490 <MX_GPIO_Init+0x1e4>)
 80013a2:	f001 f8e9 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4835      	ldr	r0, [pc, #212]	; (8001494 <MX_GPIO_Init+0x1e8>)
 80013be:	f001 f8db 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013c2:	2308      	movs	r3, #8
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013d2:	2305      	movs	r3, #5
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	482d      	ldr	r0, [pc, #180]	; (8001494 <MX_GPIO_Init+0x1e8>)
 80013de:	f001 f8cb 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <MX_GPIO_Init+0x1f0>)
 80013e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	482a      	ldr	r0, [pc, #168]	; (80014a0 <MX_GPIO_Init+0x1f4>)
 80013f6:	f001 f8bf 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80013fa:	2304      	movs	r3, #4
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	4825      	ldr	r0, [pc, #148]	; (80014a4 <MX_GPIO_Init+0x1f8>)
 800140e:	f001 f8b3 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001424:	2305      	movs	r3, #5
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	481d      	ldr	r0, [pc, #116]	; (80014a4 <MX_GPIO_Init+0x1f8>)
 8001430:	f001 f8a2 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001434:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001438:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <MX_GPIO_Init+0x1ec>)
 800144e:	f001 f893 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001452:	2320      	movs	r3, #32
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <MX_GPIO_Init+0x1ec>)
 8001466:	f001 f887 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800146a:	2302      	movs	r3, #2
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_GPIO_Init+0x1f0>)
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_GPIO_Init+0x1e4>)
 800147e:	f001 f87b 	bl	8002578 <HAL_GPIO_Init>

}
 8001482:	bf00      	nop
 8001484:	3730      	adds	r7, #48	; 0x30
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40021000 	.word	0x40021000
 8001494:	40020800 	.word	0x40020800
 8001498:	40020c00 	.word	0x40020c00
 800149c:	10120000 	.word	0x10120000
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400

080014a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80014b0:	f00c fd0c 	bl	800decc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f009 fea9 	bl	800b20c <osDelay>
 80014ba:	e7fb      	b.n	80014b4 <StartDefaultTask+0xc>

080014bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ce:	f000 fe9b 	bl	8002208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40001000 	.word	0x40001000

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <PCA9685_SetBit>:
#include "main.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af04      	add	r7, sp, #16
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	460b      	mov	r3, r1
 80014f8:	71bb      	strb	r3, [r7, #6]
 80014fa:	4613      	mov	r3, r2
 80014fc:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 80014fe:	797b      	ldrb	r3, [r7, #5]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <PCA9685_SetBit+0x1c>
 8001504:	2301      	movs	r3, #1
 8001506:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <PCA9685_SetBit+0xb0>)
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	b29a      	uxth	r2, r3
 8001510:	230a      	movs	r3, #10
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	2301      	movs	r3, #1
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	f107 030f 	add.w	r3, r7, #15
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2301      	movs	r3, #1
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	f003 fa7f 	bl	8004a24 <HAL_I2C_Mem_Read>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e031      	b.n	8001594 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	2201      	movs	r2, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	b25b      	sxtb	r3, r3
 800153a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800153e:	b25b      	sxtb	r3, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	b25a      	sxtb	r2, r3
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	b25b      	sxtb	r3, r3
 8001548:	4013      	ands	r3, r2
 800154a:	b25b      	sxtb	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8001550:	797b      	ldrb	r3, [r7, #5]
 8001552:	f003 0201 	and.w	r2, r3, #1
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	b25a      	sxtb	r2, r3
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b25b      	sxtb	r3, r3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <PCA9685_SetBit+0xb0>)
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	b29a      	uxth	r2, r3
 8001572:	230a      	movs	r3, #10
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	2301      	movs	r3, #1
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	f107 030f 	add.w	r3, r7, #15
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	f003 f954 	bl	8004830 <HAL_I2C_Mem_Write>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20004f6c 	.word	0x20004f6c

080015a0 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 80015a6:	2306      	movs	r3, #6
 80015a8:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <PCA9685_SoftwareReset+0x30>)
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	1dfa      	adds	r2, r7, #7
 80015b0:	230a      	movs	r3, #10
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2301      	movs	r3, #1
 80015b6:	2100      	movs	r1, #0
 80015b8:	f003 f83c 	bl	8004634 <HAL_I2C_Master_Transmit>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20004f6c 	.word	0x20004f6c

080015d4 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	461a      	mov	r2, r3
 80015e2:	2104      	movs	r1, #4
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff ff81 	bl	80014ec <PCA9685_SetBit>
 80015ea:	4603      	mov	r3, r0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	461a      	mov	r2, r3
 8001602:	2107      	movs	r1, #7
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff ff71 	bl	80014ec <PCA9685_SetBit>
 800160a:	4603      	mov	r3, r0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	461a      	mov	r2, r3
 8001622:	2105      	movs	r1, #5
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff ff61 	bl	80014ec <PCA9685_SetBit>
 800162a:	4603      	mov	r3, r0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	0000      	movs	r0, r0
	...

08001638 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af04      	add	r7, sp, #16
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001648:	4293      	cmp	r3, r2
 800164a:	d902      	bls.n	8001652 <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 800164c:	2303      	movs	r3, #3
 800164e:	72fb      	strb	r3, [r7, #11]
 8001650:	e046      	b.n	80016e0 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	2b18      	cmp	r3, #24
 8001656:	d802      	bhi.n	800165e <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001658:	23ff      	movs	r3, #255	; 0xff
 800165a:	72fb      	strb	r3, [r7, #11]
 800165c:	e040      	b.n	80016e0 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001668:	ee17 0a90 	vmov	r0, s15
 800166c:	f7fe ff14 	bl	8000498 <__aeabi_f2d>
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <PCA9685_SetPwmFrequency+0xe8>)
 8001676:	f7fe ff67 	bl	8000548 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	a126      	add	r1, pc, #152	; (adr r1, 8001718 <PCA9685_SetPwmFrequency+0xe0>)
 8001680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001684:	f7ff f88a 	bl	800079c <__aeabi_ddiv>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <PCA9685_SetPwmFrequency+0xec>)
 8001696:	f7fe fd9f 	bl	80001d8 <__aeabi_dsub>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff fa0b 	bl	8000abc <__aeabi_d2f>
 80016a6:	4603      	mov	r3, r0
 80016a8:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f7fe fef4 	bl	8000498 <__aeabi_f2d>
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <PCA9685_SetPwmFrequency+0xf0>)
 80016b6:	f7fe fd91 	bl	80001dc <__adddf3>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ec43 2b17 	vmov	d7, r2, r3
 80016c2:	eeb0 0a47 	vmov.f32	s0, s14
 80016c6:	eef0 0a67 	vmov.f32	s1, s15
 80016ca:	f00d f819 	bl	800e700 <floor>
 80016ce:	ec53 2b10 	vmov	r2, r3, d0
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff f9d1 	bl	8000a7c <__aeabi_d2uiz>
 80016da:	4603      	mov	r3, r0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7ff ff77 	bl	80015d4 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <PCA9685_SetPwmFrequency+0xf4>)
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	230a      	movs	r3, #10
 80016ec:	9302      	str	r3, [sp, #8]
 80016ee:	2301      	movs	r3, #1
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	f107 030b 	add.w	r3, r7, #11
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2301      	movs	r3, #1
 80016fa:	22fe      	movs	r2, #254	; 0xfe
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	f003 f897 	bl	8004830 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff ff66 	bl	80015d4 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff ff73 	bl	80015f4 <PCA9685_RestartMode>
	return PCA9685_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	00000000 	.word	0x00000000
 800171c:	4177d784 	.word	0x4177d784
 8001720:	40b00000 	.word	0x40b00000
 8001724:	3ff00000 	.word	0x3ff00000
 8001728:	3fe00000 	.word	0x3fe00000
 800172c:	20004f6c 	.word	0x20004f6c

08001730 <PCA9685_Init>:
	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
}
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <PCA9685_Init+0x28>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 800173e:	f7ff ff2f 	bl	80015a0 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8001742:	2030      	movs	r0, #48	; 0x30
 8001744:	f7ff ff78 	bl	8001638 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff ff63 	bl	8001614 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20004f6c 	.word	0x20004f6c

0800175c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60ba      	str	r2, [r7, #8]
 8001764:	461a      	mov	r2, r3
 8001766:	4603      	mov	r3, r0
 8001768:	81fb      	strh	r3, [r7, #14]
 800176a:	460b      	mov	r3, r1
 800176c:	81bb      	strh	r3, [r7, #12]
 800176e:	4613      	mov	r3, r2
 8001770:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	3307      	adds	r3, #7
 8001778:	2b00      	cmp	r3, #0
 800177a:	da00      	bge.n	800177e <SSD1306_DrawBitmap+0x22>
 800177c:	3307      	adds	r3, #7
 800177e:	10db      	asrs	r3, r3, #3
 8001780:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001786:	2300      	movs	r3, #0
 8001788:	82bb      	strh	r3, [r7, #20]
 800178a:	e044      	b.n	8001816 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	827b      	strh	r3, [r7, #18]
 8001790:	e02f      	b.n	80017f2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001792:	8a7b      	ldrh	r3, [r7, #18]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	75fb      	strb	r3, [r7, #23]
 80017a2:	e012      	b.n	80017ca <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80017a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017a8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80017ac:	fb02 f203 	mul.w	r2, r2, r3
 80017b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	da00      	bge.n	80017ba <SSD1306_DrawBitmap+0x5e>
 80017b8:	3307      	adds	r3, #7
 80017ba:	10db      	asrs	r3, r3, #3
 80017bc:	b21b      	sxth	r3, r3
 80017be:	4413      	add	r3, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4413      	add	r3, r2
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80017ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da09      	bge.n	80017e6 <SSD1306_DrawBitmap+0x8a>
 80017d2:	89fa      	ldrh	r2, [r7, #14]
 80017d4:	8a7b      	ldrh	r3, [r7, #18]
 80017d6:	4413      	add	r3, r2
 80017d8:	b29b      	uxth	r3, r3
 80017da:	89b9      	ldrh	r1, [r7, #12]
 80017dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 f92d 	bl	8001a40 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80017e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3301      	adds	r3, #1
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	827b      	strh	r3, [r7, #18]
 80017f2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80017f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dbc9      	blt.n	8001792 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80017fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001802:	b29b      	uxth	r3, r3
 8001804:	3301      	adds	r3, #1
 8001806:	b29b      	uxth	r3, r3
 8001808:	82bb      	strh	r3, [r7, #20]
 800180a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800180e:	b29b      	uxth	r3, r3
 8001810:	3301      	adds	r3, #1
 8001812:	b29b      	uxth	r3, r3
 8001814:	81bb      	strh	r3, [r7, #12]
 8001816:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800181a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800181e:	429a      	cmp	r2, r3
 8001820:	dbb4      	blt.n	800178c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001832:	f000 f96f 	bl	8001b14 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001836:	f644 6320 	movw	r3, #20000	; 0x4e20
 800183a:	2201      	movs	r2, #1
 800183c:	2178      	movs	r1, #120	; 0x78
 800183e:	485b      	ldr	r0, [pc, #364]	; (80019ac <SSD1306_Init+0x180>)
 8001840:	f003 fb16 	bl	8004e70 <HAL_I2C_IsDeviceReady>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800184a:	2300      	movs	r3, #0
 800184c:	e0a9      	b.n	80019a2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800184e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001852:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001854:	e002      	b.n	800185c <SSD1306_Init+0x30>
		p--;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3b01      	subs	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f9      	bne.n	8001856 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001862:	22ae      	movs	r2, #174	; 0xae
 8001864:	2100      	movs	r1, #0
 8001866:	2078      	movs	r0, #120	; 0x78
 8001868:	f000 f9b2 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800186c:	2220      	movs	r2, #32
 800186e:	2100      	movs	r1, #0
 8001870:	2078      	movs	r0, #120	; 0x78
 8001872:	f000 f9ad 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001876:	2210      	movs	r2, #16
 8001878:	2100      	movs	r1, #0
 800187a:	2078      	movs	r0, #120	; 0x78
 800187c:	f000 f9a8 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001880:	22b0      	movs	r2, #176	; 0xb0
 8001882:	2100      	movs	r1, #0
 8001884:	2078      	movs	r0, #120	; 0x78
 8001886:	f000 f9a3 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800188a:	22c8      	movs	r2, #200	; 0xc8
 800188c:	2100      	movs	r1, #0
 800188e:	2078      	movs	r0, #120	; 0x78
 8001890:	f000 f99e 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2078      	movs	r0, #120	; 0x78
 800189a:	f000 f999 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800189e:	2210      	movs	r2, #16
 80018a0:	2100      	movs	r1, #0
 80018a2:	2078      	movs	r0, #120	; 0x78
 80018a4:	f000 f994 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80018a8:	2240      	movs	r2, #64	; 0x40
 80018aa:	2100      	movs	r1, #0
 80018ac:	2078      	movs	r0, #120	; 0x78
 80018ae:	f000 f98f 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80018b2:	2281      	movs	r2, #129	; 0x81
 80018b4:	2100      	movs	r1, #0
 80018b6:	2078      	movs	r0, #120	; 0x78
 80018b8:	f000 f98a 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80018bc:	22ff      	movs	r2, #255	; 0xff
 80018be:	2100      	movs	r1, #0
 80018c0:	2078      	movs	r0, #120	; 0x78
 80018c2:	f000 f985 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80018c6:	22a1      	movs	r2, #161	; 0xa1
 80018c8:	2100      	movs	r1, #0
 80018ca:	2078      	movs	r0, #120	; 0x78
 80018cc:	f000 f980 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80018d0:	22a6      	movs	r2, #166	; 0xa6
 80018d2:	2100      	movs	r1, #0
 80018d4:	2078      	movs	r0, #120	; 0x78
 80018d6:	f000 f97b 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80018da:	22a8      	movs	r2, #168	; 0xa8
 80018dc:	2100      	movs	r1, #0
 80018de:	2078      	movs	r0, #120	; 0x78
 80018e0:	f000 f976 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80018e4:	223f      	movs	r2, #63	; 0x3f
 80018e6:	2100      	movs	r1, #0
 80018e8:	2078      	movs	r0, #120	; 0x78
 80018ea:	f000 f971 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018ee:	22a4      	movs	r2, #164	; 0xa4
 80018f0:	2100      	movs	r1, #0
 80018f2:	2078      	movs	r0, #120	; 0x78
 80018f4:	f000 f96c 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80018f8:	22d3      	movs	r2, #211	; 0xd3
 80018fa:	2100      	movs	r1, #0
 80018fc:	2078      	movs	r0, #120	; 0x78
 80018fe:	f000 f967 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2078      	movs	r0, #120	; 0x78
 8001908:	f000 f962 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800190c:	22d5      	movs	r2, #213	; 0xd5
 800190e:	2100      	movs	r1, #0
 8001910:	2078      	movs	r0, #120	; 0x78
 8001912:	f000 f95d 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001916:	22f0      	movs	r2, #240	; 0xf0
 8001918:	2100      	movs	r1, #0
 800191a:	2078      	movs	r0, #120	; 0x78
 800191c:	f000 f958 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001920:	22d9      	movs	r2, #217	; 0xd9
 8001922:	2100      	movs	r1, #0
 8001924:	2078      	movs	r0, #120	; 0x78
 8001926:	f000 f953 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800192a:	2222      	movs	r2, #34	; 0x22
 800192c:	2100      	movs	r1, #0
 800192e:	2078      	movs	r0, #120	; 0x78
 8001930:	f000 f94e 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001934:	22da      	movs	r2, #218	; 0xda
 8001936:	2100      	movs	r1, #0
 8001938:	2078      	movs	r0, #120	; 0x78
 800193a:	f000 f949 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800193e:	2212      	movs	r2, #18
 8001940:	2100      	movs	r1, #0
 8001942:	2078      	movs	r0, #120	; 0x78
 8001944:	f000 f944 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001948:	22db      	movs	r2, #219	; 0xdb
 800194a:	2100      	movs	r1, #0
 800194c:	2078      	movs	r0, #120	; 0x78
 800194e:	f000 f93f 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001952:	2220      	movs	r2, #32
 8001954:	2100      	movs	r1, #0
 8001956:	2078      	movs	r0, #120	; 0x78
 8001958:	f000 f93a 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800195c:	228d      	movs	r2, #141	; 0x8d
 800195e:	2100      	movs	r1, #0
 8001960:	2078      	movs	r0, #120	; 0x78
 8001962:	f000 f935 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001966:	2214      	movs	r2, #20
 8001968:	2100      	movs	r1, #0
 800196a:	2078      	movs	r0, #120	; 0x78
 800196c:	f000 f930 	bl	8001bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001970:	22af      	movs	r2, #175	; 0xaf
 8001972:	2100      	movs	r1, #0
 8001974:	2078      	movs	r0, #120	; 0x78
 8001976:	f000 f92b 	bl	8001bd0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800197a:	222e      	movs	r2, #46	; 0x2e
 800197c:	2100      	movs	r1, #0
 800197e:	2078      	movs	r0, #120	; 0x78
 8001980:	f000 f926 	bl	8001bd0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001984:	2000      	movs	r0, #0
 8001986:	f000 f843 	bl	8001a10 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800198a:	f000 f813 	bl	80019b4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <SSD1306_Init+0x184>)
 8001990:	2200      	movs	r2, #0
 8001992:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <SSD1306_Init+0x184>)
 8001996:	2200      	movs	r2, #0
 8001998:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SSD1306_Init+0x184>)
 800199c:	2201      	movs	r2, #1
 800199e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80019a0:	2301      	movs	r3, #1
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20004e30 	.word	0x20004e30
 80019b0:	200004b0 	.word	0x200004b0

080019b4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80019ba:	2300      	movs	r3, #0
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	e01d      	b.n	80019fc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	3b50      	subs	r3, #80	; 0x50
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	2100      	movs	r1, #0
 80019ca:	2078      	movs	r0, #120	; 0x78
 80019cc:	f000 f900 	bl	8001bd0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	2078      	movs	r0, #120	; 0x78
 80019d6:	f000 f8fb 	bl	8001bd0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80019da:	2210      	movs	r2, #16
 80019dc:	2100      	movs	r1, #0
 80019de:	2078      	movs	r0, #120	; 0x78
 80019e0:	f000 f8f6 	bl	8001bd0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	01db      	lsls	r3, r3, #7
 80019e8:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <SSD1306_UpdateScreen+0x58>)
 80019ea:	441a      	add	r2, r3
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	2140      	movs	r1, #64	; 0x40
 80019f0:	2078      	movs	r0, #120	; 0x78
 80019f2:	f000 f8a5 	bl	8001b40 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	3301      	adds	r3, #1
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b07      	cmp	r3, #7
 8001a00:	d9de      	bls.n	80019c0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200000b0 	.word	0x200000b0

08001a10 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <SSD1306_Fill+0x14>
 8001a20:	2300      	movs	r3, #0
 8001a22:	e000      	b.n	8001a26 <SSD1306_Fill+0x16>
 8001a24:	23ff      	movs	r3, #255	; 0xff
 8001a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <SSD1306_Fill+0x2c>)
 8001a2e:	f00c fd97 	bl	800e560 <memset>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200000b0 	.word	0x200000b0

08001a40 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	80bb      	strh	r3, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	70fb      	strb	r3, [r7, #3]
	if (
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b7f      	cmp	r3, #127	; 0x7f
 8001a56:	d848      	bhi.n	8001aea <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a58:	88bb      	ldrh	r3, [r7, #4]
 8001a5a:	2b3f      	cmp	r3, #63	; 0x3f
 8001a5c:	d845      	bhi.n	8001aea <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <SSD1306_DrawPixel+0xb8>)
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2301      	moveq	r3, #1
 8001a6e:	2300      	movne	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d11a      	bne.n	8001ab0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	b298      	uxth	r0, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	01db      	lsls	r3, r3, #7
 8001a86:	4413      	add	r3, r2
 8001a88:	4a1c      	ldr	r2, [pc, #112]	; (8001afc <SSD1306_DrawPixel+0xbc>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	88bb      	ldrh	r3, [r7, #4]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b259      	sxtb	r1, r3
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	01db      	lsls	r3, r3, #7
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b2c9      	uxtb	r1, r1
 8001aaa:	4a14      	ldr	r2, [pc, #80]	; (8001afc <SSD1306_DrawPixel+0xbc>)
 8001aac:	54d1      	strb	r1, [r2, r3]
 8001aae:	e01d      	b.n	8001aec <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	b298      	uxth	r0, r3
 8001ab8:	4603      	mov	r3, r0
 8001aba:	01db      	lsls	r3, r3, #7
 8001abc:	4413      	add	r3, r2
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <SSD1306_DrawPixel+0xbc>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	b25a      	sxtb	r2, r3
 8001ac4:	88bb      	ldrh	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	b259      	sxtb	r1, r3
 8001ada:	88fa      	ldrh	r2, [r7, #6]
 8001adc:	4603      	mov	r3, r0
 8001ade:	01db      	lsls	r3, r3, #7
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b2c9      	uxtb	r1, r1
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <SSD1306_DrawPixel+0xbc>)
 8001ae6:	54d1      	strb	r1, [r2, r3]
 8001ae8:	e000      	b.n	8001aec <SSD1306_DrawPixel+0xac>
		return;
 8001aea:	bf00      	nop
	}
}
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200004b0 	.word	0x200004b0
 8001afc:	200000b0 	.word	0x200000b0

08001b00 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff ff83 	bl	8001a10 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001b0a:	f7ff ff53 	bl	80019b4 <SSD1306_UpdateScreen>
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <ssd1306_I2C_Init+0x28>)
 8001b1c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b1e:	e002      	b.n	8001b26 <ssd1306_I2C_Init+0x12>
		p--;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f9      	bne.n	8001b20 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	0003d090 	.word	0x0003d090

08001b40 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b0c7      	sub	sp, #284	; 0x11c
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	4604      	mov	r4, r0
 8001b48:	4608      	mov	r0, r1
 8001b4a:	4639      	mov	r1, r7
 8001b4c:	600a      	str	r2, [r1, #0]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	1dfb      	adds	r3, r7, #7
 8001b52:	4622      	mov	r2, r4
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	1dbb      	adds	r3, r7, #6
 8001b58:	4602      	mov	r2, r0
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	460a      	mov	r2, r1
 8001b60:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	1dba      	adds	r2, r7, #6
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b72:	e010      	b.n	8001b96 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001b74:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b78:	463a      	mov	r2, r7
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b82:	3301      	adds	r3, #1
 8001b84:	7811      	ldrb	r1, [r2, #0]
 8001b86:	f107 020c 	add.w	r2, r7, #12
 8001b8a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b8c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b90:	3301      	adds	r3, #1
 8001b92:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b96:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	1d3a      	adds	r2, r7, #4
 8001b9e:	8812      	ldrh	r2, [r2, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d8e7      	bhi.n	8001b74 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b299      	uxth	r1, r3
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f107 020c 	add.w	r2, r7, #12
 8001bb6:	200a      	movs	r0, #10
 8001bb8:	9000      	str	r0, [sp, #0]
 8001bba:	4804      	ldr	r0, [pc, #16]	; (8001bcc <ssd1306_I2C_WriteMulti+0x8c>)
 8001bbc:	f002 fd3a 	bl	8004634 <HAL_I2C_Master_Transmit>
}
 8001bc0:	bf00      	nop
 8001bc2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20004e30 	.word	0x20004e30

08001bd0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	71bb      	strb	r3, [r7, #6]
 8001bde:	4613      	mov	r3, r2
 8001be0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001be6:	797b      	ldrb	r3, [r7, #5]
 8001be8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	b299      	uxth	r1, r3
 8001bee:	f107 020c 	add.w	r2, r7, #12
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <ssd1306_I2C_Write+0x38>)
 8001bfa:	f002 fd1b 	bl	8004634 <HAL_I2C_Master_Transmit>
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20004e30 	.word	0x20004e30

08001c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_MspInit+0x64>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <HAL_MspInit+0x64>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_MspInit+0x64>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_MspInit+0x64>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <HAL_MspInit+0x64>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_MspInit+0x64>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	210f      	movs	r1, #15
 8001c4e:	f06f 0001 	mvn.w	r0, #1
 8001c52:	f000 fbd5 	bl	8002400 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2105      	movs	r1, #5
 8001c5a:	2005      	movs	r0, #5
 8001c5c:	f000 fbd0 	bl	8002400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c60:	2005      	movs	r0, #5
 8001c62:	f000 fbe9 	bl	8002438 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800

08001c74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a42      	ldr	r2, [pc, #264]	; (8001d9c <HAL_I2C_MspInit+0x128>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d12c      	bne.n	8001cf0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a40      	ldr	r2, [pc, #256]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b3e      	ldr	r3, [pc, #248]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001cb2:	23c0      	movs	r3, #192	; 0xc0
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb6:	2312      	movs	r3, #18
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4835      	ldr	r0, [pc, #212]	; (8001da4 <HAL_I2C_MspInit+0x130>)
 8001cce:	f000 fc53 	bl	8002578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a31      	ldr	r2, [pc, #196]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001cdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001cee:	e050      	b.n	8001d92 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a2c      	ldr	r2, [pc, #176]	; (8001da8 <HAL_I2C_MspInit+0x134>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d14b      	bne.n	8001d92 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a27      	ldr	r2, [pc, #156]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d38:	2312      	movs	r3, #18
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d44:	2304      	movs	r3, #4
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4817      	ldr	r0, [pc, #92]	; (8001dac <HAL_I2C_MspInit+0x138>)
 8001d50:	f000 fc12 	bl	8002578 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d5a:	2312      	movs	r3, #18
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d66:	2304      	movs	r3, #4
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480f      	ldr	r0, [pc, #60]	; (8001db0 <HAL_I2C_MspInit+0x13c>)
 8001d72:	f000 fc01 	bl	8002578 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001d80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_I2C_MspInit+0x12c>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
}
 8001d92:	bf00      	nop
 8001d94:	3730      	adds	r7, #48	; 0x30
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40005400 	.word	0x40005400
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40005c00 	.word	0x40005c00
 8001dac:	40020800 	.word	0x40020800
 8001db0:	40020000 	.word	0x40020000

08001db4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a28      	ldr	r2, [pc, #160]	; (8001e74 <HAL_I2S_MspInit+0xc0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d14a      	bne.n	8001e6c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_I2S_MspInit+0xc4>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <HAL_I2S_MspInit+0xc4>)
 8001de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_I2S_MspInit+0xc4>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_I2S_MspInit+0xc4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_I2S_MspInit+0xc4>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_I2S_MspInit+0xc4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_I2S_MspInit+0xc4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_I2S_MspInit+0xc4>)
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_I2S_MspInit+0xc4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e2a:	2310      	movs	r3, #16
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <HAL_I2S_MspInit+0xc8>)
 8001e46:	f000 fb97 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e4a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e5c:	2306      	movs	r3, #6
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	4806      	ldr	r0, [pc, #24]	; (8001e80 <HAL_I2S_MspInit+0xcc>)
 8001e68:	f000 fb86 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3728      	adds	r7, #40	; 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40003c00 	.word	0x40003c00
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40020800 	.word	0x40020800

08001e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_SPI_MspInit+0x84>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d12b      	bne.n	8001efe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001eb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001ede:	23e0      	movs	r3, #224	; 0xe0
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eee:	2305      	movs	r3, #5
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <HAL_SPI_MspInit+0x8c>)
 8001efa:	f000 fb3d 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001efe:	bf00      	nop
 8001f00:	3728      	adds	r7, #40	; 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40013000 	.word	0x40013000
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000

08001f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_UART_MspInit+0x94>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d133      	bne.n	8001f9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_UART_MspInit+0x98>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	; (8001fac <HAL_UART_MspInit+0x98>)
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_UART_MspInit+0x98>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_UART_MspInit+0x98>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a14      	ldr	r2, [pc, #80]	; (8001fac <HAL_UART_MspInit+0x98>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_UART_MspInit+0x98>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f6e:	230c      	movs	r3, #12
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7e:	2307      	movs	r3, #7
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4809      	ldr	r0, [pc, #36]	; (8001fb0 <HAL_UART_MspInit+0x9c>)
 8001f8a:	f000 faf5 	bl	8002578 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2105      	movs	r1, #5
 8001f92:	2026      	movs	r0, #38	; 0x26
 8001f94:	f000 fa34 	bl	8002400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f98:	2026      	movs	r0, #38	; 0x26
 8001f9a:	f000 fa4d 	bl	8002438 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40004400 	.word	0x40004400
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020000 	.word	0x40020000

08001fb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	2036      	movs	r0, #54	; 0x36
 8001fca:	f000 fa19 	bl	8002400 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fce:	2036      	movs	r0, #54	; 0x36
 8001fd0:	f000 fa32 	bl	8002438 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	; (8002058 <HAL_InitTick+0xa4>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	4a1e      	ldr	r2, [pc, #120]	; (8002058 <HAL_InitTick+0xa4>)
 8001fde:	f043 0310 	orr.w	r3, r3, #16
 8001fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_InitTick+0xa4>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ff0:	f107 0210 	add.w	r2, r7, #16
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f004 fd58 	bl	8006ab0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002000:	f004 fd2e 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 8002004:	4603      	mov	r3, r0
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	4a13      	ldr	r2, [pc, #76]	; (800205c <HAL_InitTick+0xa8>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0c9b      	lsrs	r3, r3, #18
 8002014:	3b01      	subs	r3, #1
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_InitTick+0xac>)
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <HAL_InitTick+0xb0>)
 800201c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_InitTick+0xac>)
 8002020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002024:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002026:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <HAL_InitTick+0xac>)
 8002028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_InitTick+0xac>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_InitTick+0xac>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002038:	4809      	ldr	r0, [pc, #36]	; (8002060 <HAL_InitTick+0xac>)
 800203a:	f004 ff34 	bl	8006ea6 <HAL_TIM_Base_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d104      	bne.n	800204e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002044:	4806      	ldr	r0, [pc, #24]	; (8002060 <HAL_InitTick+0xac>)
 8002046:	f004 ff87 	bl	8006f58 <HAL_TIM_Base_Start_IT>
 800204a:	4603      	mov	r3, r0
 800204c:	e000      	b.n	8002050 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
}
 8002050:	4618      	mov	r0, r3
 8002052:	3730      	adds	r7, #48	; 0x30
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800
 800205c:	431bde83 	.word	0x431bde83
 8002060:	20004f70 	.word	0x20004f70
 8002064:	40001000 	.word	0x40001000

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800206c:	e7fe      	b.n	800206c <NMI_Handler+0x4>

0800206e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <MemManage_Handler+0x4>

0800207a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler+0x4>

08002086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <USART2_IRQHandler+0x10>)
 80020aa:	f005 f9f7 	bl	800749c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20004ee0 	.word	0x20004ee0

080020b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <TIM6_DAC_IRQHandler+0x10>)
 80020be:	f004 ffbb 	bl	8007038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20004f70 	.word	0x20004f70

080020cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <OTG_FS_IRQHandler+0x10>)
 80020d2:	f000 fe71 	bl	8002db8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20005404 	.word	0x20005404

080020e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <_sbrk+0x5c>)
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <_sbrk+0x60>)
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <_sbrk+0x64>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <_sbrk+0x68>)
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d207      	bcs.n	8002120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002110:	f00c f9de 	bl	800e4d0 <__errno>
 8002114:	4603      	mov	r3, r0
 8002116:	220c      	movs	r2, #12
 8002118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800211e:	e009      	b.n	8002134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <_sbrk+0x64>)
 8002130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20020000 	.word	0x20020000
 8002140:	00000400 	.word	0x00000400
 8002144:	200004b8 	.word	0x200004b8
 8002148:	20005718 	.word	0x20005718

0800214c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <SystemInit+0x20>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <SystemInit+0x20>)
 8002158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800215c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002174:	480d      	ldr	r0, [pc, #52]	; (80021ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002176:	490e      	ldr	r1, [pc, #56]	; (80021b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002178:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800217c:	e002      	b.n	8002184 <LoopCopyDataInit>

0800217e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002182:	3304      	adds	r3, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002188:	d3f9      	bcc.n	800217e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218a:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800218c:	4c0b      	ldr	r4, [pc, #44]	; (80021bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002190:	e001      	b.n	8002196 <LoopFillZerobss>

08002192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002194:	3204      	adds	r2, #4

08002196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002198:	d3fb      	bcc.n	8002192 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800219a:	f7ff ffd7 	bl	800214c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800219e:	f00c f99d 	bl	800e4dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a2:	f7fe fed9 	bl	8000f58 <main>
  bx  lr    
 80021a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80021b4:	080100b8 	.word	0x080100b8
  ldr r2, =_sbss
 80021b8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80021bc:	20005718 	.word	0x20005718

080021c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <HAL_Init+0x40>)
 80021ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_Init+0x40>)
 80021da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_Init+0x40>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 f8fc 	bl	80023ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff fede 	bl	8001fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f8:	f7ff fd08 	bl	8001c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023c00 	.word	0x40023c00

08002208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_IncTick+0x20>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x24>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_IncTick+0x24>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000008 	.word	0x20000008
 800222c:	20004fb8 	.word	0x20004fb8

08002230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return uwTick;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_GetTick+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20004fb8 	.word	0x20004fb8

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff ffee 	bl	8002230 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002260:	d005      	beq.n	800226e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_Delay+0x44>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800226e:	bf00      	nop
 8002270:	f7ff ffde 	bl	8002230 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	429a      	cmp	r2, r3
 800227e:	d8f7      	bhi.n	8002270 <HAL_Delay+0x28>
  {
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000008 	.word	0x20000008

08002290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c2:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	60d3      	str	r3, [r2, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <__NVIC_GetPriorityGrouping+0x18>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0307 	and.w	r3, r3, #7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db0b      	blt.n	800231e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4907      	ldr	r1, [pc, #28]	; (800232c <__NVIC_EnableIRQ+0x38>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100

08002330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	2b00      	cmp	r3, #0
 8002342:	db0a      	blt.n	800235a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	490c      	ldr	r1, [pc, #48]	; (800237c <__NVIC_SetPriority+0x4c>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	440b      	add	r3, r1
 8002354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002358:	e00a      	b.n	8002370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4908      	ldr	r1, [pc, #32]	; (8002380 <__NVIC_SetPriority+0x50>)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3b04      	subs	r3, #4
 8002368:	0112      	lsls	r2, r2, #4
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	440b      	add	r3, r1
 800236e:	761a      	strb	r2, [r3, #24]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000e100 	.word	0xe000e100
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f1c3 0307 	rsb	r3, r3, #7
 800239e:	2b04      	cmp	r3, #4
 80023a0:	bf28      	it	cs
 80023a2:	2304      	movcs	r3, #4
 80023a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d902      	bls.n	80023b4 <NVIC_EncodePriority+0x30>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3b03      	subs	r3, #3
 80023b2:	e000      	b.n	80023b6 <NVIC_EncodePriority+0x32>
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43d9      	mvns	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	4313      	orrs	r3, r2
         );
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ff4c 	bl	8002290 <__NVIC_SetPriorityGrouping>
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002412:	f7ff ff61 	bl	80022d8 <__NVIC_GetPriorityGrouping>
 8002416:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	6978      	ldr	r0, [r7, #20]
 800241e:	f7ff ffb1 	bl	8002384 <NVIC_EncodePriority>
 8002422:	4602      	mov	r2, r0
 8002424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff80 	bl	8002330 <__NVIC_SetPriority>
}
 8002430:	bf00      	nop
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ff54 	bl	80022f4 <__NVIC_EnableIRQ>
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002462:	f7ff fee5 	bl	8002230 <HAL_GetTick>
 8002466:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d008      	beq.n	8002486 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e052      	b.n	800252c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0216 	bic.w	r2, r2, #22
 8002494:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <HAL_DMA_Abort+0x62>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0208 	bic.w	r2, r2, #8
 80024c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d6:	e013      	b.n	8002500 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d8:	f7ff feaa 	bl	8002230 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d90c      	bls.n	8002500 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2220      	movs	r2, #32
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2203      	movs	r2, #3
 80024f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e015      	b.n	800252c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1e4      	bne.n	80024d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	223f      	movs	r2, #63	; 0x3f
 8002514:	409a      	lsls	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d004      	beq.n	8002552 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2280      	movs	r2, #128	; 0x80
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e00c      	b.n	800256c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2205      	movs	r2, #5
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	e16b      	b.n	800286c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	f040 815a 	bne.w	8002866 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d005      	beq.n	80025ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d130      	bne.n	800262c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 0201 	and.w	r2, r3, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b03      	cmp	r3, #3
 8002636:	d017      	beq.n	8002668 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d123      	bne.n	80026bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	08da      	lsrs	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3208      	adds	r2, #8
 800267c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	08da      	lsrs	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3208      	adds	r2, #8
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0203 	and.w	r2, r3, #3
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80b4 	beq.w	8002866 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b60      	ldr	r3, [pc, #384]	; (8002884 <HAL_GPIO_Init+0x30c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	4a5f      	ldr	r2, [pc, #380]	; (8002884 <HAL_GPIO_Init+0x30c>)
 8002708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800270c:	6453      	str	r3, [r2, #68]	; 0x44
 800270e:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <HAL_GPIO_Init+0x30c>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800271a:	4a5b      	ldr	r2, [pc, #364]	; (8002888 <HAL_GPIO_Init+0x310>)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a52      	ldr	r2, [pc, #328]	; (800288c <HAL_GPIO_Init+0x314>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d02b      	beq.n	800279e <HAL_GPIO_Init+0x226>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a51      	ldr	r2, [pc, #324]	; (8002890 <HAL_GPIO_Init+0x318>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d025      	beq.n	800279a <HAL_GPIO_Init+0x222>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a50      	ldr	r2, [pc, #320]	; (8002894 <HAL_GPIO_Init+0x31c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01f      	beq.n	8002796 <HAL_GPIO_Init+0x21e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4f      	ldr	r2, [pc, #316]	; (8002898 <HAL_GPIO_Init+0x320>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d019      	beq.n	8002792 <HAL_GPIO_Init+0x21a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4e      	ldr	r2, [pc, #312]	; (800289c <HAL_GPIO_Init+0x324>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_GPIO_Init+0x216>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4d      	ldr	r2, [pc, #308]	; (80028a0 <HAL_GPIO_Init+0x328>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00d      	beq.n	800278a <HAL_GPIO_Init+0x212>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4c      	ldr	r2, [pc, #304]	; (80028a4 <HAL_GPIO_Init+0x32c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d007      	beq.n	8002786 <HAL_GPIO_Init+0x20e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4b      	ldr	r2, [pc, #300]	; (80028a8 <HAL_GPIO_Init+0x330>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_GPIO_Init+0x20a>
 800277e:	2307      	movs	r3, #7
 8002780:	e00e      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 8002782:	2308      	movs	r3, #8
 8002784:	e00c      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 8002786:	2306      	movs	r3, #6
 8002788:	e00a      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 800278a:	2305      	movs	r3, #5
 800278c:	e008      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 800278e:	2304      	movs	r3, #4
 8002790:	e006      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 8002792:	2303      	movs	r3, #3
 8002794:	e004      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 8002796:	2302      	movs	r3, #2
 8002798:	e002      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 800279e:	2300      	movs	r3, #0
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	f002 0203 	and.w	r2, r2, #3
 80027a6:	0092      	lsls	r2, r2, #2
 80027a8:	4093      	lsls	r3, r2
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b0:	4935      	ldr	r1, [pc, #212]	; (8002888 <HAL_GPIO_Init+0x310>)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3302      	adds	r3, #2
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_GPIO_Init+0x334>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e2:	4a32      	ldr	r2, [pc, #200]	; (80028ac <HAL_GPIO_Init+0x334>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027e8:	4b30      	ldr	r3, [pc, #192]	; (80028ac <HAL_GPIO_Init+0x334>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800280c:	4a27      	ldr	r2, [pc, #156]	; (80028ac <HAL_GPIO_Init+0x334>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_GPIO_Init+0x334>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002836:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <HAL_GPIO_Init+0x334>)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_GPIO_Init+0x334>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002860:	4a12      	ldr	r2, [pc, #72]	; (80028ac <HAL_GPIO_Init+0x334>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3301      	adds	r3, #1
 800286a:	61fb      	str	r3, [r7, #28]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b0f      	cmp	r3, #15
 8002870:	f67f ae90 	bls.w	8002594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	40013800 	.word	0x40013800
 800288c:	40020000 	.word	0x40020000
 8002890:	40020400 	.word	0x40020400
 8002894:	40020800 	.word	0x40020800
 8002898:	40020c00 	.word	0x40020c00
 800289c:	40021000 	.word	0x40021000
 80028a0:	40021400 	.word	0x40021400
 80028a4:	40021800 	.word	0x40021800
 80028a8:	40021c00 	.word	0x40021c00
 80028ac:	40013c00 	.word	0x40013c00

080028b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
 80028bc:	4613      	mov	r3, r2
 80028be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028cc:	e003      	b.n	80028d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	041a      	lsls	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	619a      	str	r2, [r3, #24]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80028e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e4:	b08f      	sub	sp, #60	; 0x3c
 80028e6:	af0a      	add	r7, sp, #40	; 0x28
 80028e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e054      	b.n	800299e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f00b fb30 	bl	800df74 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2203      	movs	r2, #3
 8002918:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f005 fb02 	bl	8007f3c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	687e      	ldr	r6, [r7, #4]
 8002940:	466d      	mov	r5, sp
 8002942:	f106 0410 	add.w	r4, r6, #16
 8002946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800294a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800294c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800294e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002952:	e885 0003 	stmia.w	r5, {r0, r1}
 8002956:	1d33      	adds	r3, r6, #4
 8002958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800295a:	6838      	ldr	r0, [r7, #0]
 800295c:	f005 fa7c 	bl	8007e58 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	4618      	mov	r0, r3
 8002968:	f005 faf9 	bl	8007f5e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	687e      	ldr	r6, [r7, #4]
 8002974:	466d      	mov	r5, sp
 8002976:	f106 0410 	add.w	r4, r6, #16
 800297a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002982:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002986:	e885 0003 	stmia.w	r5, {r0, r1}
 800298a:	1d33      	adds	r3, r6, #4
 800298c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800298e:	6838      	ldr	r0, [r7, #0]
 8002990:	f005 fc0c 	bl	80081ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029a6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80029a6:	b590      	push	{r4, r7, lr}
 80029a8:	b089      	sub	sp, #36	; 0x24
 80029aa:	af04      	add	r7, sp, #16
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	4608      	mov	r0, r1
 80029b0:	4611      	mov	r1, r2
 80029b2:	461a      	mov	r2, r3
 80029b4:	4603      	mov	r3, r0
 80029b6:	70fb      	strb	r3, [r7, #3]
 80029b8:	460b      	mov	r3, r1
 80029ba:	70bb      	strb	r3, [r7, #2]
 80029bc:	4613      	mov	r3, r2
 80029be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_HCD_HC_Init+0x28>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e076      	b.n	8002abc <HAL_HCD_HC_Init+0x116>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	333d      	adds	r3, #61	; 0x3d
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3338      	adds	r3, #56	; 0x38
 80029f6:	787a      	ldrb	r2, [r7, #1]
 80029f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3340      	adds	r3, #64	; 0x40
 8002a08:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a0a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3339      	adds	r3, #57	; 0x39
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	333f      	adds	r3, #63	; 0x3f
 8002a2c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002a30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	78ba      	ldrb	r2, [r7, #2]
 8002a36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a3a:	b2d0      	uxtb	r0, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	333a      	adds	r3, #58	; 0x3a
 8002a48:	4602      	mov	r2, r0
 8002a4a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002a4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	da09      	bge.n	8002a68 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	333b      	adds	r3, #59	; 0x3b
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e008      	b.n	8002a7a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	333b      	adds	r3, #59	; 0x3b
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	333c      	adds	r3, #60	; 0x3c
 8002a88:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a8c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	787c      	ldrb	r4, [r7, #1]
 8002a94:	78ba      	ldrb	r2, [r7, #2]
 8002a96:	78f9      	ldrb	r1, [r7, #3]
 8002a98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	4623      	mov	r3, r4
 8002aaa:	f005 fd01 	bl	80084b0 <USB_HC_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd90      	pop	{r4, r7, pc}

08002ac4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_HCD_HC_Halt+0x1e>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e00f      	b.n	8002b02 <HAL_HCD_HC_Halt+0x3e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f005 ff3d 	bl	8008972 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	4608      	mov	r0, r1
 8002b16:	4611      	mov	r1, r2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	70fb      	strb	r3, [r7, #3]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	70bb      	strb	r3, [r7, #2]
 8002b22:	4613      	mov	r3, r2
 8002b24:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	333b      	adds	r3, #59	; 0x3b
 8002b34:	78ba      	ldrb	r2, [r7, #2]
 8002b36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	333f      	adds	r3, #63	; 0x3f
 8002b46:	787a      	ldrb	r2, [r7, #1]
 8002b48:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b4a:	7c3b      	ldrb	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d112      	bne.n	8002b76 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3342      	adds	r3, #66	; 0x42
 8002b5e:	2203      	movs	r2, #3
 8002b60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	333d      	adds	r3, #61	; 0x3d
 8002b70:	7f3a      	ldrb	r2, [r7, #28]
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	e008      	b.n	8002b88 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3342      	adds	r3, #66	; 0x42
 8002b84:	2202      	movs	r2, #2
 8002b86:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	f200 80c6 	bhi.w	8002d1c <HAL_HCD_HC_SubmitRequest+0x210>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002d09 	.word	0x08002d09
 8002ba0:	08002c0d 	.word	0x08002c0d
 8002ba4:	08002c8b 	.word	0x08002c8b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002ba8:	7c3b      	ldrb	r3, [r7, #16]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	f040 80b8 	bne.w	8002d20 <HAL_HCD_HC_SubmitRequest+0x214>
 8002bb0:	78bb      	ldrb	r3, [r7, #2]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 80b4 	bne.w	8002d20 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002bb8:	8b3b      	ldrh	r3, [r7, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d108      	bne.n	8002bd0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3355      	adds	r3, #85	; 0x55
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3355      	adds	r3, #85	; 0x55
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3342      	adds	r3, #66	; 0x42
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002bf6:	e093      	b.n	8002d20 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3342      	adds	r3, #66	; 0x42
 8002c06:	2202      	movs	r2, #2
 8002c08:	701a      	strb	r2, [r3, #0]
      break;
 8002c0a:	e089      	b.n	8002d20 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c0c:	78bb      	ldrb	r3, [r7, #2]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11d      	bne.n	8002c4e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3355      	adds	r3, #85	; 0x55
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3342      	adds	r3, #66	; 0x42
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c38:	e073      	b.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3342      	adds	r3, #66	; 0x42
 8002c48:	2202      	movs	r2, #2
 8002c4a:	701a      	strb	r2, [r3, #0]
      break;
 8002c4c:	e069      	b.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3354      	adds	r3, #84	; 0x54
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3342      	adds	r3, #66	; 0x42
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
      break;
 8002c74:	e055      	b.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	3342      	adds	r3, #66	; 0x42
 8002c84:	2202      	movs	r2, #2
 8002c86:	701a      	strb	r2, [r3, #0]
      break;
 8002c88:	e04b      	b.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002c8a:	78bb      	ldrb	r3, [r7, #2]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11d      	bne.n	8002ccc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	212c      	movs	r1, #44	; 0x2c
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3355      	adds	r3, #85	; 0x55
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3342      	adds	r3, #66	; 0x42
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002cb6:	e034      	b.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3342      	adds	r3, #66	; 0x42
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	701a      	strb	r2, [r3, #0]
      break;
 8002cca:	e02a      	b.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3354      	adds	r3, #84	; 0x54
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3342      	adds	r3, #66	; 0x42
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
      break;
 8002cf2:	e016      	b.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3342      	adds	r3, #66	; 0x42
 8002d02:	2202      	movs	r2, #2
 8002d04:	701a      	strb	r2, [r3, #0]
      break;
 8002d06:	e00c      	b.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3342      	adds	r3, #66	; 0x42
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002d1c:	bf00      	nop
 8002d1e:	e000      	b.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002d20:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3344      	adds	r3, #68	; 0x44
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	8b3a      	ldrh	r2, [r7, #24]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	202c      	movs	r0, #44	; 0x2c
 8002d3c:	fb00 f303 	mul.w	r3, r0, r3
 8002d40:	440b      	add	r3, r1
 8002d42:	334c      	adds	r3, #76	; 0x4c
 8002d44:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3360      	adds	r3, #96	; 0x60
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3350      	adds	r3, #80	; 0x50
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3339      	adds	r3, #57	; 0x39
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3361      	adds	r3, #97	; 0x61
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	222c      	movs	r2, #44	; 0x2c
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	3338      	adds	r3, #56	; 0x38
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	18d1      	adds	r1, r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	f005 fc90 	bl	80086cc <USB_HC_StartXfer>
 8002dac:	4603      	mov	r3, r0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop

08002db8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f005 f9a9 	bl	8008126 <USB_GetMode>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	f040 80ef 	bne.w	8002fba <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f005 f98d 	bl	8008100 <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80e5 	beq.w	8002fb8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f005 f984 	bl	8008100 <USB_ReadInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e02:	d104      	bne.n	8002e0e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f005 f974 	bl	8008100 <USB_ReadInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e22:	d104      	bne.n	8002e2e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f005 f964 	bl	8008100 <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e42:	d104      	bne.n	8002e4e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f005 f954 	bl	8008100 <USB_ReadInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d103      	bne.n	8002e6a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2202      	movs	r2, #2
 8002e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f005 f946 	bl	8008100 <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e7e:	d115      	bne.n	8002eac <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e88:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d108      	bne.n	8002eac <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f00b f8e8 	bl	800e070 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f005 fa3c 	bl	8008324 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f005 f925 	bl	8008100 <USB_ReadInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ec0:	d102      	bne.n	8002ec8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f001 f9ff 	bl	80042c6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f005 f917 	bl	8008100 <USB_ReadInterrupts>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d106      	bne.n	8002eea <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f00b f8ab 	bl	800e038 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f005 f906 	bl	8008100 <USB_ReadInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d101      	bne.n	8002f02 <HAL_HCD_IRQHandler+0x14a>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_HCD_IRQHandler+0x14c>
 8002f02:	2300      	movs	r3, #0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d012      	beq.n	8002f2e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0210 	bic.w	r2, r2, #16
 8002f16:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f001 f902 	bl	8004122 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0210 	orr.w	r2, r2, #16
 8002f2c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f005 f8e4 	bl	8008100 <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f42:	d13a      	bne.n	8002fba <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f005 fd01 	bl	8008950 <USB_HC_ReadInterrupt>
 8002f4e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	e025      	b.n	8002fa2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d018      	beq.n	8002f9c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f80:	d106      	bne.n	8002f90 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	4619      	mov	r1, r3
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f8ab 	bl	80030e4 <HCD_HC_IN_IRQHandler>
 8002f8e:	e005      	b.n	8002f9c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	4619      	mov	r1, r3
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fcc6 	bl	8003928 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d3d4      	bcc.n	8002f56 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fb4:	615a      	str	r2, [r3, #20]
 8002fb6:	e000      	b.n	8002fba <HAL_HCD_IRQHandler+0x202>
      return;
 8002fb8:	bf00      	nop
    }
  }
}
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_HCD_Start+0x16>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e013      	b.n	8002ffe <HAL_HCD_Start+0x3e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f004 ff99 	bl	8007f1a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2101      	movs	r1, #1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f005 f9fc 	bl	80083ec <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_HCD_Stop+0x16>
 8003018:	2302      	movs	r3, #2
 800301a:	e00d      	b.n	8003038 <HAL_HCD_Stop+0x32>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f005 fdfb 	bl	8008c24 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f005 f9a3 	bl	8008398 <USB_ResetPort>
 8003052:	4603      	mov	r3, r0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	212c      	movs	r1, #44	; 0x2c
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4413      	add	r3, r2
 8003074:	3360      	adds	r3, #96	; 0x60
 8003076:	781b      	ldrb	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	3350      	adds	r3, #80	; 0x50
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f005 f9e7 	bl	800848c <USB_GetCurrentFrame>
 80030be:	4603      	mov	r3, r0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f005 f9c2 	bl	800845e <USB_GetHostSpeed>
 80030da:	4603      	mov	r3, r0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b04      	cmp	r3, #4
 8003112:	d119      	bne.n	8003148 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003120:	461a      	mov	r2, r3
 8003122:	2304      	movs	r3, #4
 8003124:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	0151      	lsls	r1, r2, #5
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	440a      	add	r2, r1
 800313c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	60d3      	str	r3, [r2, #12]
 8003146:	e101      	b.n	800334c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315e:	d12b      	bne.n	80031b8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4413      	add	r3, r2
 8003168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316c:	461a      	mov	r2, r3
 800316e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003172:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3361      	adds	r3, #97	; 0x61
 8003182:	2207      	movs	r2, #7
 8003184:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	0151      	lsls	r1, r2, #5
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	440a      	add	r2, r1
 800319c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a0:	f043 0302 	orr.w	r3, r3, #2
 80031a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f005 fbde 	bl	8008972 <USB_HC_Halt>
 80031b6:	e0c9      	b.n	800334c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d109      	bne.n	80031e2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031da:	461a      	mov	r2, r3
 80031dc:	2320      	movs	r3, #32
 80031de:	6093      	str	r3, [r2, #8]
 80031e0:	e0b4      	b.n	800334c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d133      	bne.n	8003260 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	0151      	lsls	r1, r2, #5
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	440a      	add	r2, r1
 800320e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003212:	f043 0302 	orr.w	r3, r3, #2
 8003216:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3361      	adds	r3, #97	; 0x61
 8003226:	2205      	movs	r2, #5
 8003228:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003236:	461a      	mov	r2, r3
 8003238:	2310      	movs	r3, #16
 800323a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003248:	461a      	mov	r2, r3
 800324a:	2308      	movs	r3, #8
 800324c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f005 fb8a 	bl	8008972 <USB_HC_Halt>
 800325e:	e075      	b.n	800334c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d134      	bne.n	80032e2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	0151      	lsls	r1, r2, #5
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	440a      	add	r2, r1
 800328e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003292:	f043 0302 	orr.w	r3, r3, #2
 8003296:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3361      	adds	r3, #97	; 0x61
 80032a6:	2208      	movs	r2, #8
 80032a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b6:	461a      	mov	r2, r3
 80032b8:	2310      	movs	r3, #16
 80032ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c8:	461a      	mov	r2, r3
 80032ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ce:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f005 fb49 	bl	8008972 <USB_HC_Halt>
 80032e0:	e034      	b.n	800334c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d129      	bne.n	800334c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	0151      	lsls	r1, r2, #5
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	440a      	add	r2, r1
 800330e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3361      	adds	r3, #97	; 0x61
 8003326:	2206      	movs	r2, #6
 8003328:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f005 fb1c 	bl	8008972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003346:	461a      	mov	r2, r3
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800335e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003362:	d122      	bne.n	80033aa <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	0151      	lsls	r1, r2, #5
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	440a      	add	r2, r1
 800337a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f005 faef 	bl	8008972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	461a      	mov	r2, r3
 80033a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80033a8:	e2ba      	b.n	8003920 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	f040 811b 	bne.w	80035f8 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d019      	beq.n	80033fe <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3348      	adds	r3, #72	; 0x48
 80033d8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	0159      	lsls	r1, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	440b      	add	r3, r1
 80033e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80033ec:	1ad2      	subs	r2, r2, r3
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	202c      	movs	r0, #44	; 0x2c
 80033f4:	fb00 f303 	mul.w	r3, r0, r3
 80033f8:	440b      	add	r3, r1
 80033fa:	3350      	adds	r3, #80	; 0x50
 80033fc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	212c      	movs	r1, #44	; 0x2c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	3361      	adds	r3, #97	; 0x61
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	335c      	adds	r3, #92	; 0x5c
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342e:	461a      	mov	r2, r3
 8003430:	2301      	movs	r3, #1
 8003432:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	333f      	adds	r3, #63	; 0x3f
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	333f      	adds	r3, #63	; 0x3f
 8003456:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003458:	2b02      	cmp	r3, #2
 800345a:	d121      	bne.n	80034a0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	0151      	lsls	r1, r2, #5
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	440a      	add	r2, r1
 8003472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003476:	f043 0302 	orr.w	r3, r3, #2
 800347a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f005 fa73 	bl	8008972 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003498:	461a      	mov	r2, r3
 800349a:	2310      	movs	r3, #16
 800349c:	6093      	str	r3, [r2, #8]
 800349e:	e066      	b.n	800356e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	212c      	movs	r1, #44	; 0x2c
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	333f      	adds	r3, #63	; 0x3f
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d127      	bne.n	8003504 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	0151      	lsls	r1, r2, #5
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	440a      	add	r2, r1
 80034ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3360      	adds	r3, #96	; 0x60
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	b2d9      	uxtb	r1, r3
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	202c      	movs	r0, #44	; 0x2c
 80034f0:	fb00 f303 	mul.w	r3, r0, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3360      	adds	r3, #96	; 0x60
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f00a fdc5 	bl	800e08c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003502:	e034      	b.n	800356e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	212c      	movs	r1, #44	; 0x2c
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	4413      	add	r3, r2
 8003510:	333f      	adds	r3, #63	; 0x3f
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d12a      	bne.n	800356e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	3360      	adds	r3, #96	; 0x60
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	3354      	adds	r3, #84	; 0x54
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	f083 0301 	eor.w	r3, r3, #1
 800353e:	b2d8      	uxtb	r0, r3
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	4413      	add	r3, r2
 800354c:	3354      	adds	r3, #84	; 0x54
 800354e:	4602      	mov	r2, r0
 8003550:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	b2d9      	uxtb	r1, r3
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	202c      	movs	r0, #44	; 0x2c
 800355c:	fb00 f303 	mul.w	r3, r0, r3
 8003560:	4413      	add	r3, r2
 8003562:	3360      	adds	r3, #96	; 0x60
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f00a fd8f 	bl	800e08c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d12b      	bne.n	80035ce <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	212c      	movs	r1, #44	; 0x2c
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	4413      	add	r3, r2
 8003582:	3348      	adds	r3, #72	; 0x48
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	202c      	movs	r0, #44	; 0x2c
 800358c:	fb00 f202 	mul.w	r2, r0, r2
 8003590:	440a      	add	r2, r1
 8003592:	3240      	adds	r2, #64	; 0x40
 8003594:	8812      	ldrh	r2, [r2, #0]
 8003596:	fbb3 f3f2 	udiv	r3, r3, r2
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 81be 	beq.w	8003920 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	212c      	movs	r1, #44	; 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	3354      	adds	r3, #84	; 0x54
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	f083 0301 	eor.w	r3, r3, #1
 80035b8:	b2d8      	uxtb	r0, r3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	212c      	movs	r1, #44	; 0x2c
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	3354      	adds	r3, #84	; 0x54
 80035c8:	4602      	mov	r2, r0
 80035ca:	701a      	strb	r2, [r3, #0]
}
 80035cc:	e1a8      	b.n	8003920 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	3354      	adds	r3, #84	; 0x54
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	f083 0301 	eor.w	r3, r3, #1
 80035e2:	b2d8      	uxtb	r0, r3
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	3354      	adds	r3, #84	; 0x54
 80035f2:	4602      	mov	r2, r0
 80035f4:	701a      	strb	r2, [r3, #0]
}
 80035f6:	e193      	b.n	8003920 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b02      	cmp	r3, #2
 800360c:	f040 8106 	bne.w	800381c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	0151      	lsls	r1, r2, #5
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	440a      	add	r2, r1
 8003626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800362a:	f023 0302 	bic.w	r3, r3, #2
 800362e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3361      	adds	r3, #97	; 0x61
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d109      	bne.n	8003658 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	212c      	movs	r1, #44	; 0x2c
 800364a:	fb01 f303 	mul.w	r3, r1, r3
 800364e:	4413      	add	r3, r2
 8003650:	3360      	adds	r3, #96	; 0x60
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	e0c9      	b.n	80037ec <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3361      	adds	r3, #97	; 0x61
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b05      	cmp	r3, #5
 800366a:	d109      	bne.n	8003680 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3360      	adds	r3, #96	; 0x60
 800367a:	2205      	movs	r2, #5
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	e0b5      	b.n	80037ec <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	212c      	movs	r1, #44	; 0x2c
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	3361      	adds	r3, #97	; 0x61
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b06      	cmp	r3, #6
 8003692:	d009      	beq.n	80036a8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	212c      	movs	r1, #44	; 0x2c
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	4413      	add	r3, r2
 80036a0:	3361      	adds	r3, #97	; 0x61
 80036a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d150      	bne.n	800374a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	335c      	adds	r3, #92	; 0x5c
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	202c      	movs	r0, #44	; 0x2c
 80036c0:	fb00 f303 	mul.w	r3, r0, r3
 80036c4:	440b      	add	r3, r1
 80036c6:	335c      	adds	r3, #92	; 0x5c
 80036c8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	335c      	adds	r3, #92	; 0x5c
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d912      	bls.n	8003704 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	335c      	adds	r3, #92	; 0x5c
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	212c      	movs	r1, #44	; 0x2c
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	3360      	adds	r3, #96	; 0x60
 80036fe:	2204      	movs	r2, #4
 8003700:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003702:	e073      	b.n	80037ec <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	212c      	movs	r1, #44	; 0x2c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	3360      	adds	r3, #96	; 0x60
 8003712:	2202      	movs	r2, #2
 8003714:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4413      	add	r3, r2
 800371e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800372c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003734:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4413      	add	r3, r2
 800373e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003742:	461a      	mov	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003748:	e050      	b.n	80037ec <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	3361      	adds	r3, #97	; 0x61
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b03      	cmp	r3, #3
 800375c:	d122      	bne.n	80037a4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	212c      	movs	r1, #44	; 0x2c
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	4413      	add	r3, r2
 800376a:	3360      	adds	r3, #96	; 0x60
 800376c:	2202      	movs	r2, #2
 800376e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003786:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800378e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	461a      	mov	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e023      	b.n	80037ec <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	3361      	adds	r3, #97	; 0x61
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b07      	cmp	r3, #7
 80037b6:	d119      	bne.n	80037ec <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	335c      	adds	r3, #92	; 0x5c
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	202c      	movs	r0, #44	; 0x2c
 80037d0:	fb00 f303 	mul.w	r3, r0, r3
 80037d4:	440b      	add	r3, r1
 80037d6:	335c      	adds	r3, #92	; 0x5c
 80037d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	212c      	movs	r1, #44	; 0x2c
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	3360      	adds	r3, #96	; 0x60
 80037e8:	2204      	movs	r2, #4
 80037ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	461a      	mov	r2, r3
 80037fa:	2302      	movs	r3, #2
 80037fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	b2d9      	uxtb	r1, r3
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	202c      	movs	r0, #44	; 0x2c
 8003808:	fb00 f303 	mul.w	r3, r0, r3
 800380c:	4413      	add	r3, r2
 800380e:	3360      	adds	r3, #96	; 0x60
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f00a fc39 	bl	800e08c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800381a:	e081      	b.n	8003920 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b10      	cmp	r3, #16
 8003830:	d176      	bne.n	8003920 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	212c      	movs	r1, #44	; 0x2c
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	4413      	add	r3, r2
 800383e:	333f      	adds	r3, #63	; 0x3f
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d121      	bne.n	800388a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	335c      	adds	r3, #92	; 0x5c
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	0151      	lsls	r1, r2, #5
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	440a      	add	r2, r1
 800386e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003872:	f043 0302 	orr.w	r3, r3, #2
 8003876:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f005 f875 	bl	8008972 <USB_HC_Halt>
 8003888:	e041      	b.n	800390e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	212c      	movs	r1, #44	; 0x2c
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	4413      	add	r3, r2
 8003896:	333f      	adds	r3, #63	; 0x3f
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	212c      	movs	r1, #44	; 0x2c
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	333f      	adds	r3, #63	; 0x3f
 80038ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d12d      	bne.n	800390e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	212c      	movs	r1, #44	; 0x2c
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	4413      	add	r3, r2
 80038be:	335c      	adds	r3, #92	; 0x5c
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d120      	bne.n	800390e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	212c      	movs	r1, #44	; 0x2c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	3361      	adds	r3, #97	; 0x61
 80038da:	2203      	movs	r2, #3
 80038dc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	0151      	lsls	r1, r2, #5
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	440a      	add	r2, r1
 80038f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038f8:	f043 0302 	orr.w	r3, r3, #2
 80038fc:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f005 f832 	bl	8008972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391a:	461a      	mov	r2, r3
 800391c:	2310      	movs	r3, #16
 800391e:	6093      	str	r3, [r2, #8]
}
 8003920:	bf00      	nop
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	4413      	add	r3, r2
 800394a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b04      	cmp	r3, #4
 8003956:	d119      	bne.n	800398c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003964:	461a      	mov	r2, r3
 8003966:	2304      	movs	r3, #4
 8003968:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	4413      	add	r3, r2
 8003972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	0151      	lsls	r1, r2, #5
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	440a      	add	r2, r1
 8003980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003984:	f043 0302 	orr.w	r3, r3, #2
 8003988:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800398a:	e3c6      	b.n	800411a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d13e      	bne.n	8003a20 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	461a      	mov	r2, r3
 80039b0:	2320      	movs	r3, #32
 80039b2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	333d      	adds	r3, #61	; 0x3d
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	f040 83a8 	bne.w	800411a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	333d      	adds	r3, #61	; 0x3d
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3360      	adds	r3, #96	; 0x60
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	0151      	lsls	r1, r2, #5
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	440a      	add	r2, r1
 8003a04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a08:	f043 0302 	orr.w	r3, r3, #2
 8003a0c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f004 ffaa 	bl	8008972 <USB_HC_Halt>
}
 8003a1e:	e37c      	b.n	800411a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a36:	d122      	bne.n	8003a7e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	0151      	lsls	r1, r2, #5
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	440a      	add	r2, r1
 8003a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a52:	f043 0302 	orr.w	r3, r3, #2
 8003a56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f004 ff85 	bl	8008972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a74:	461a      	mov	r2, r3
 8003a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a7a:	6093      	str	r3, [r2, #8]
}
 8003a7c:	e34d      	b.n	800411a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d150      	bne.n	8003b36 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	335c      	adds	r3, #92	; 0x5c
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d111      	bne.n	8003ae0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	333d      	adds	r3, #61	; 0x3d
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	461a      	mov	r2, r3
 8003adc:	2340      	movs	r3, #64	; 0x40
 8003ade:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	0151      	lsls	r1, r2, #5
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	440a      	add	r2, r1
 8003af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	4611      	mov	r1, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f004 ff31 	bl	8008972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2301      	movs	r3, #1
 8003b20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3361      	adds	r3, #97	; 0x61
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
}
 8003b34:	e2f1      	b.n	800411a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d13c      	bne.n	8003bc6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	3361      	adds	r3, #97	; 0x61
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	333d      	adds	r3, #61	; 0x3d
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	212c      	movs	r1, #44	; 0x2c
 8003b76:	fb01 f303 	mul.w	r3, r1, r3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	335c      	adds	r3, #92	; 0x5c
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	0151      	lsls	r1, r2, #5
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	440a      	add	r2, r1
 8003b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b9c:	f043 0302 	orr.w	r3, r3, #2
 8003ba0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f004 fee0 	bl	8008972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2340      	movs	r3, #64	; 0x40
 8003bc2:	6093      	str	r3, [r2, #8]
}
 8003bc4:	e2a9      	b.n	800411a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d12a      	bne.n	8003c32 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be8:	461a      	mov	r2, r3
 8003bea:	2308      	movs	r3, #8
 8003bec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	0151      	lsls	r1, r2, #5
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	440a      	add	r2, r1
 8003c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c08:	f043 0302 	orr.w	r3, r3, #2
 8003c0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f004 feaa 	bl	8008972 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	212c      	movs	r1, #44	; 0x2c
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	3361      	adds	r3, #97	; 0x61
 8003c2c:	2205      	movs	r2, #5
 8003c2e:	701a      	strb	r2, [r3, #0]
}
 8003c30:	e273      	b.n	800411a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d150      	bne.n	8003cea <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	335c      	adds	r3, #92	; 0x5c
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	212c      	movs	r1, #44	; 0x2c
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	3361      	adds	r3, #97	; 0x61
 8003c68:	2203      	movs	r2, #3
 8003c6a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	212c      	movs	r1, #44	; 0x2c
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	333d      	adds	r3, #61	; 0x3d
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d112      	bne.n	8003ca6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	212c      	movs	r1, #44	; 0x2c
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	333c      	adds	r3, #60	; 0x3c
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d108      	bne.n	8003ca6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	212c      	movs	r1, #44	; 0x2c
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	333d      	adds	r3, #61	; 0x3d
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	0151      	lsls	r1, r2, #5
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	440a      	add	r2, r1
 8003cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 fe4e 	bl	8008972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	6093      	str	r3, [r2, #8]
}
 8003ce8:	e217      	b.n	800411a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	2b80      	cmp	r3, #128	; 0x80
 8003cfe:	d174      	bne.n	8003dea <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d121      	bne.n	8003d4c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	212c      	movs	r1, #44	; 0x2c
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	3361      	adds	r3, #97	; 0x61
 8003d16:	2206      	movs	r2, #6
 8003d18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	0151      	lsls	r1, r2, #5
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	440a      	add	r2, r1
 8003d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d34:	f043 0302 	orr.w	r3, r3, #2
 8003d38:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f004 fe14 	bl	8008972 <USB_HC_Halt>
 8003d4a:	e044      	b.n	8003dd6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	212c      	movs	r1, #44	; 0x2c
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	335c      	adds	r3, #92	; 0x5c
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	202c      	movs	r0, #44	; 0x2c
 8003d64:	fb00 f303 	mul.w	r3, r0, r3
 8003d68:	440b      	add	r3, r1
 8003d6a:	335c      	adds	r3, #92	; 0x5c
 8003d6c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	335c      	adds	r3, #92	; 0x5c
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d920      	bls.n	8003dc4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	212c      	movs	r1, #44	; 0x2c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	335c      	adds	r3, #92	; 0x5c
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	212c      	movs	r1, #44	; 0x2c
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	3360      	adds	r3, #96	; 0x60
 8003da2:	2204      	movs	r2, #4
 8003da4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	b2d9      	uxtb	r1, r3
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	202c      	movs	r0, #44	; 0x2c
 8003db0:	fb00 f303 	mul.w	r3, r0, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	3360      	adds	r3, #96	; 0x60
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f00a f965 	bl	800e08c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003dc2:	e008      	b.n	8003dd6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	212c      	movs	r1, #44	; 0x2c
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	3360      	adds	r3, #96	; 0x60
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de2:	461a      	mov	r2, r3
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	6093      	str	r3, [r2, #8]
}
 8003de8:	e197      	b.n	800411a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e00:	d134      	bne.n	8003e6c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	0151      	lsls	r1, r2, #5
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	440a      	add	r2, r1
 8003e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f004 fda0 	bl	8008972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2310      	movs	r3, #16
 8003e42:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e50:	461a      	mov	r2, r3
 8003e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	3361      	adds	r3, #97	; 0x61
 8003e66:	2208      	movs	r2, #8
 8003e68:	701a      	strb	r2, [r3, #0]
}
 8003e6a:	e156      	b.n	800411a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	f040 814b 	bne.w	800411a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	0151      	lsls	r1, r2, #5
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	440a      	add	r2, r1
 8003e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e9e:	f023 0302 	bic.w	r3, r3, #2
 8003ea2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	212c      	movs	r1, #44	; 0x2c
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	3361      	adds	r3, #97	; 0x61
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d179      	bne.n	8003fac <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3360      	adds	r3, #96	; 0x60
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	212c      	movs	r1, #44	; 0x2c
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	333f      	adds	r3, #63	; 0x3f
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d00a      	beq.n	8003ef4 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	212c      	movs	r1, #44	; 0x2c
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	333f      	adds	r3, #63	; 0x3f
 8003eec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	f040 80fc 	bne.w	80040ec <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d142      	bne.n	8003f82 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	212c      	movs	r1, #44	; 0x2c
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	4413      	add	r3, r2
 8003f08:	334c      	adds	r3, #76	; 0x4c
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80ed 	beq.w	80040ec <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	334c      	adds	r3, #76	; 0x4c
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	202c      	movs	r0, #44	; 0x2c
 8003f28:	fb00 f202 	mul.w	r2, r0, r2
 8003f2c:	440a      	add	r2, r1
 8003f2e:	3240      	adds	r2, #64	; 0x40
 8003f30:	8812      	ldrh	r2, [r2, #0]
 8003f32:	4413      	add	r3, r2
 8003f34:	3b01      	subs	r3, #1
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	202c      	movs	r0, #44	; 0x2c
 8003f3c:	fb00 f202 	mul.w	r2, r0, r2
 8003f40:	440a      	add	r2, r1
 8003f42:	3240      	adds	r2, #64	; 0x40
 8003f44:	8812      	ldrh	r2, [r2, #0]
 8003f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80ca 	beq.w	80040ec <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	212c      	movs	r1, #44	; 0x2c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	3355      	adds	r3, #85	; 0x55
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	f083 0301 	eor.w	r3, r3, #1
 8003f6c:	b2d8      	uxtb	r0, r3
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	212c      	movs	r1, #44	; 0x2c
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	3355      	adds	r3, #85	; 0x55
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e0b4      	b.n	80040ec <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	212c      	movs	r1, #44	; 0x2c
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3355      	adds	r3, #85	; 0x55
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	f083 0301 	eor.w	r3, r3, #1
 8003f96:	b2d8      	uxtb	r0, r3
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	212c      	movs	r1, #44	; 0x2c
 8003f9e:	fb01 f303 	mul.w	r3, r1, r3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3355      	adds	r3, #85	; 0x55
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	e09f      	b.n	80040ec <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	212c      	movs	r1, #44	; 0x2c
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3361      	adds	r3, #97	; 0x61
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d109      	bne.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	3360      	adds	r3, #96	; 0x60
 8003fce:	2202      	movs	r2, #2
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e08b      	b.n	80040ec <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	3361      	adds	r3, #97	; 0x61
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d109      	bne.n	8003ffc <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3360      	adds	r3, #96	; 0x60
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e077      	b.n	80040ec <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	212c      	movs	r1, #44	; 0x2c
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	3361      	adds	r3, #97	; 0x61
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b05      	cmp	r3, #5
 800400e:	d109      	bne.n	8004024 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3360      	adds	r3, #96	; 0x60
 800401e:	2205      	movs	r2, #5
 8004020:	701a      	strb	r2, [r3, #0]
 8004022:	e063      	b.n	80040ec <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	212c      	movs	r1, #44	; 0x2c
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	3361      	adds	r3, #97	; 0x61
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b06      	cmp	r3, #6
 8004036:	d009      	beq.n	800404c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3361      	adds	r3, #97	; 0x61
 8004046:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004048:	2b08      	cmp	r3, #8
 800404a:	d14f      	bne.n	80040ec <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	212c      	movs	r1, #44	; 0x2c
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	335c      	adds	r3, #92	; 0x5c
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	202c      	movs	r0, #44	; 0x2c
 8004064:	fb00 f303 	mul.w	r3, r0, r3
 8004068:	440b      	add	r3, r1
 800406a:	335c      	adds	r3, #92	; 0x5c
 800406c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	212c      	movs	r1, #44	; 0x2c
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	4413      	add	r3, r2
 800407a:	335c      	adds	r3, #92	; 0x5c
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d912      	bls.n	80040a8 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	335c      	adds	r3, #92	; 0x5c
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3360      	adds	r3, #96	; 0x60
 80040a2:	2204      	movs	r2, #4
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	e021      	b.n	80040ec <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	212c      	movs	r1, #44	; 0x2c
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	3360      	adds	r3, #96	; 0x60
 80040b6:	2202      	movs	r2, #2
 80040b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040d0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040d8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	461a      	mov	r2, r3
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	461a      	mov	r2, r3
 80040fa:	2302      	movs	r3, #2
 80040fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	b2d9      	uxtb	r1, r3
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	202c      	movs	r0, #44	; 0x2c
 8004108:	fb00 f303 	mul.w	r3, r0, r3
 800410c:	4413      	add	r3, r2
 800410e:	3360      	adds	r3, #96	; 0x60
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f009 ffb9 	bl	800e08c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800411a:	bf00      	nop
 800411c:	3720      	adds	r7, #32
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b08a      	sub	sp, #40	; 0x28
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	0c5b      	lsrs	r3, r3, #17
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004156:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d004      	beq.n	8004168 <HCD_RXQLVL_IRQHandler+0x46>
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b05      	cmp	r3, #5
 8004162:	f000 80a9 	beq.w	80042b8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004166:	e0aa      	b.n	80042be <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80a6 	beq.w	80042bc <HCD_RXQLVL_IRQHandler+0x19a>
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	212c      	movs	r1, #44	; 0x2c
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	4413      	add	r3, r2
 800417c:	3344      	adds	r3, #68	; 0x44
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 809b 	beq.w	80042bc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	212c      	movs	r1, #44	; 0x2c
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	4413      	add	r3, r2
 8004192:	3350      	adds	r3, #80	; 0x50
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	441a      	add	r2, r3
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	202c      	movs	r0, #44	; 0x2c
 80041a0:	fb00 f303 	mul.w	r3, r0, r3
 80041a4:	440b      	add	r3, r1
 80041a6:	334c      	adds	r3, #76	; 0x4c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d87a      	bhi.n	80042a4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	212c      	movs	r1, #44	; 0x2c
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	4413      	add	r3, r2
 80041be:	3344      	adds	r3, #68	; 0x44
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	b292      	uxth	r2, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	f003 ff71 	bl	80080ae <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3344      	adds	r3, #68	; 0x44
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	441a      	add	r2, r3
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	202c      	movs	r0, #44	; 0x2c
 80041e6:	fb00 f303 	mul.w	r3, r0, r3
 80041ea:	440b      	add	r3, r1
 80041ec:	3344      	adds	r3, #68	; 0x44
 80041ee:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	212c      	movs	r1, #44	; 0x2c
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	3350      	adds	r3, #80	; 0x50
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	441a      	add	r2, r3
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	202c      	movs	r0, #44	; 0x2c
 800420a:	fb00 f303 	mul.w	r3, r0, r3
 800420e:	440b      	add	r3, r1
 8004210:	3350      	adds	r3, #80	; 0x50
 8004212:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	0cdb      	lsrs	r3, r3, #19
 8004224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004228:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	212c      	movs	r1, #44	; 0x2c
 8004230:	fb01 f303 	mul.w	r3, r1, r3
 8004234:	4413      	add	r3, r2
 8004236:	3340      	adds	r3, #64	; 0x40
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4293      	cmp	r3, r2
 8004240:	d13c      	bne.n	80042bc <HCD_RXQLVL_IRQHandler+0x19a>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d039      	beq.n	80042bc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800425e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004266:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	4413      	add	r3, r2
 8004270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004274:	461a      	mov	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	212c      	movs	r1, #44	; 0x2c
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	4413      	add	r3, r2
 8004286:	3354      	adds	r3, #84	; 0x54
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	f083 0301 	eor.w	r3, r3, #1
 800428e:	b2d8      	uxtb	r0, r3
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	212c      	movs	r1, #44	; 0x2c
 8004296:	fb01 f303 	mul.w	r3, r1, r3
 800429a:	4413      	add	r3, r2
 800429c:	3354      	adds	r3, #84	; 0x54
 800429e:	4602      	mov	r2, r0
 80042a0:	701a      	strb	r2, [r3, #0]
      break;
 80042a2:	e00b      	b.n	80042bc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	212c      	movs	r1, #44	; 0x2c
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	4413      	add	r3, r2
 80042b0:	3360      	adds	r3, #96	; 0x60
 80042b2:	2204      	movs	r2, #4
 80042b4:	701a      	strb	r2, [r3, #0]
      break;
 80042b6:	e001      	b.n	80042bc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80042b8:	bf00      	nop
 80042ba:	e000      	b.n	80042be <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80042bc:	bf00      	nop
  }
}
 80042be:	bf00      	nop
 80042c0:	3728      	adds	r7, #40	; 0x28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b086      	sub	sp, #24
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042f2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d10b      	bne.n	8004316 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d102      	bne.n	800430e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f009 fea3 	bl	800e054 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f043 0302 	orr.w	r3, r3, #2
 8004314:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b08      	cmp	r3, #8
 800431e:	d132      	bne.n	8004386 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f043 0308 	orr.w	r3, r3, #8
 8004326:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b04      	cmp	r3, #4
 8004330:	d126      	bne.n	8004380 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d113      	bne.n	8004362 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004344:	d106      	bne.n	8004354 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2102      	movs	r1, #2
 800434c:	4618      	mov	r0, r3
 800434e:	f003 ffe9 	bl	8008324 <USB_InitFSLSPClkSel>
 8004352:	e011      	b.n	8004378 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2101      	movs	r1, #1
 800435a:	4618      	mov	r0, r3
 800435c:	f003 ffe2 	bl	8008324 <USB_InitFSLSPClkSel>
 8004360:	e00a      	b.n	8004378 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d106      	bne.n	8004378 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004370:	461a      	mov	r2, r3
 8004372:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004376:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f009 fe99 	bl	800e0b0 <HAL_HCD_PortEnabled_Callback>
 800437e:	e002      	b.n	8004386 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f009 fea3 	bl	800e0cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b20      	cmp	r3, #32
 800438e:	d103      	bne.n	8004398 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f043 0320 	orr.w	r3, r3, #32
 8004396:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800439e:	461a      	mov	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	6013      	str	r3, [r2, #0]
}
 80043a4:	bf00      	nop
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e12b      	b.n	8004616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fc4e 	bl	8001c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2224      	movs	r2, #36	; 0x24
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0201 	bic.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800440e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004410:	f002 fb26 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 8004414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4a81      	ldr	r2, [pc, #516]	; (8004620 <HAL_I2C_Init+0x274>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d807      	bhi.n	8004430 <HAL_I2C_Init+0x84>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a80      	ldr	r2, [pc, #512]	; (8004624 <HAL_I2C_Init+0x278>)
 8004424:	4293      	cmp	r3, r2
 8004426:	bf94      	ite	ls
 8004428:	2301      	movls	r3, #1
 800442a:	2300      	movhi	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e006      	b.n	800443e <HAL_I2C_Init+0x92>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a7d      	ldr	r2, [pc, #500]	; (8004628 <HAL_I2C_Init+0x27c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	bf94      	ite	ls
 8004438:	2301      	movls	r3, #1
 800443a:	2300      	movhi	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e0e7      	b.n	8004616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a78      	ldr	r2, [pc, #480]	; (800462c <HAL_I2C_Init+0x280>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	0c9b      	lsrs	r3, r3, #18
 8004450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4a6a      	ldr	r2, [pc, #424]	; (8004620 <HAL_I2C_Init+0x274>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d802      	bhi.n	8004480 <HAL_I2C_Init+0xd4>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	3301      	adds	r3, #1
 800447e:	e009      	b.n	8004494 <HAL_I2C_Init+0xe8>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	4a69      	ldr	r2, [pc, #420]	; (8004630 <HAL_I2C_Init+0x284>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	099b      	lsrs	r3, r3, #6
 8004492:	3301      	adds	r3, #1
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	430b      	orrs	r3, r1
 800449a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	495c      	ldr	r1, [pc, #368]	; (8004620 <HAL_I2C_Init+0x274>)
 80044b0:	428b      	cmp	r3, r1
 80044b2:	d819      	bhi.n	80044e8 <HAL_I2C_Init+0x13c>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1e59      	subs	r1, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	fbb1 f3f3 	udiv	r3, r1, r3
 80044c2:	1c59      	adds	r1, r3, #1
 80044c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044c8:	400b      	ands	r3, r1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_I2C_Init+0x138>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1e59      	subs	r1, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80044dc:	3301      	adds	r3, #1
 80044de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e2:	e051      	b.n	8004588 <HAL_I2C_Init+0x1dc>
 80044e4:	2304      	movs	r3, #4
 80044e6:	e04f      	b.n	8004588 <HAL_I2C_Init+0x1dc>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d111      	bne.n	8004514 <HAL_I2C_Init+0x168>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1e58      	subs	r0, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6859      	ldr	r1, [r3, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	440b      	add	r3, r1
 80044fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004502:	3301      	adds	r3, #1
 8004504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004508:	2b00      	cmp	r3, #0
 800450a:	bf0c      	ite	eq
 800450c:	2301      	moveq	r3, #1
 800450e:	2300      	movne	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	e012      	b.n	800453a <HAL_I2C_Init+0x18e>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1e58      	subs	r0, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6859      	ldr	r1, [r3, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	0099      	lsls	r1, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	fbb0 f3f3 	udiv	r3, r0, r3
 800452a:	3301      	adds	r3, #1
 800452c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_I2C_Init+0x196>
 800453e:	2301      	movs	r3, #1
 8004540:	e022      	b.n	8004588 <HAL_I2C_Init+0x1dc>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10e      	bne.n	8004568 <HAL_I2C_Init+0x1bc>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1e58      	subs	r0, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6859      	ldr	r1, [r3, #4]
 8004552:	460b      	mov	r3, r1
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	440b      	add	r3, r1
 8004558:	fbb0 f3f3 	udiv	r3, r0, r3
 800455c:	3301      	adds	r3, #1
 800455e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004566:	e00f      	b.n	8004588 <HAL_I2C_Init+0x1dc>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1e58      	subs	r0, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6859      	ldr	r1, [r3, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	0099      	lsls	r1, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	fbb0 f3f3 	udiv	r3, r0, r3
 800457e:	3301      	adds	r3, #1
 8004580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	6809      	ldr	r1, [r1, #0]
 800458c:	4313      	orrs	r3, r2
 800458e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69da      	ldr	r2, [r3, #28]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6911      	ldr	r1, [r2, #16]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	68d2      	ldr	r2, [r2, #12]
 80045c2:	4311      	orrs	r1, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	000186a0 	.word	0x000186a0
 8004624:	001e847f 	.word	0x001e847f
 8004628:	003d08ff 	.word	0x003d08ff
 800462c:	431bde83 	.word	0x431bde83
 8004630:	10624dd3 	.word	0x10624dd3

08004634 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	607a      	str	r2, [r7, #4]
 800463e:	461a      	mov	r2, r3
 8004640:	460b      	mov	r3, r1
 8004642:	817b      	strh	r3, [r7, #10]
 8004644:	4613      	mov	r3, r2
 8004646:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004648:	f7fd fdf2 	bl	8002230 <HAL_GetTick>
 800464c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b20      	cmp	r3, #32
 8004658:	f040 80e0 	bne.w	800481c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2319      	movs	r3, #25
 8004662:	2201      	movs	r2, #1
 8004664:	4970      	ldr	r1, [pc, #448]	; (8004828 <HAL_I2C_Master_Transmit+0x1f4>)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 ff30 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
 8004674:	e0d3      	b.n	800481e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_I2C_Master_Transmit+0x50>
 8004680:	2302      	movs	r3, #2
 8004682:	e0cc      	b.n	800481e <HAL_I2C_Master_Transmit+0x1ea>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d007      	beq.n	80046aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0201 	orr.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2221      	movs	r2, #33	; 0x21
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2210      	movs	r2, #16
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	893a      	ldrh	r2, [r7, #8]
 80046da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a50      	ldr	r2, [pc, #320]	; (800482c <HAL_I2C_Master_Transmit+0x1f8>)
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046ec:	8979      	ldrh	r1, [r7, #10]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 fcea 	bl	80050cc <I2C_MasterRequestWrite>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e08d      	b.n	800481e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004718:	e066      	b.n	80047e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	6a39      	ldr	r1, [r7, #32]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 ffaa 	bl	8005678 <I2C_WaitOnTXEFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00d      	beq.n	8004746 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	2b04      	cmp	r3, #4
 8004730:	d107      	bne.n	8004742 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004740:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e06b      	b.n	800481e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	781a      	ldrb	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b04      	cmp	r3, #4
 8004782:	d11b      	bne.n	80047bc <HAL_I2C_Master_Transmit+0x188>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	d017      	beq.n	80047bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	781a      	ldrb	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	6a39      	ldr	r1, [r7, #32]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 ff9a 	bl	80056fa <I2C_WaitOnBTFFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00d      	beq.n	80047e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d107      	bne.n	80047e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e01a      	b.n	800481e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d194      	bne.n	800471a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	e000      	b.n	800481e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800481c:	2302      	movs	r3, #2
  }
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	00100002 	.word	0x00100002
 800482c:	ffff0000 	.word	0xffff0000

08004830 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af02      	add	r7, sp, #8
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	4608      	mov	r0, r1
 800483a:	4611      	mov	r1, r2
 800483c:	461a      	mov	r2, r3
 800483e:	4603      	mov	r3, r0
 8004840:	817b      	strh	r3, [r7, #10]
 8004842:	460b      	mov	r3, r1
 8004844:	813b      	strh	r3, [r7, #8]
 8004846:	4613      	mov	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800484a:	f7fd fcf1 	bl	8002230 <HAL_GetTick>
 800484e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b20      	cmp	r3, #32
 800485a:	f040 80d9 	bne.w	8004a10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	2319      	movs	r3, #25
 8004864:	2201      	movs	r2, #1
 8004866:	496d      	ldr	r1, [pc, #436]	; (8004a1c <HAL_I2C_Mem_Write+0x1ec>)
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fe2f 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
 8004876:	e0cc      	b.n	8004a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_I2C_Mem_Write+0x56>
 8004882:	2302      	movs	r3, #2
 8004884:	e0c5      	b.n	8004a12 <HAL_I2C_Mem_Write+0x1e2>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d007      	beq.n	80048ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2221      	movs	r2, #33	; 0x21
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2240      	movs	r2, #64	; 0x40
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a3a      	ldr	r2, [r7, #32]
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4a4d      	ldr	r2, [pc, #308]	; (8004a20 <HAL_I2C_Mem_Write+0x1f0>)
 80048ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ee:	88f8      	ldrh	r0, [r7, #6]
 80048f0:	893a      	ldrh	r2, [r7, #8]
 80048f2:	8979      	ldrh	r1, [r7, #10]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	4603      	mov	r3, r0
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 fc66 	bl	80051d0 <I2C_RequestMemoryWrite>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d052      	beq.n	80049b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e081      	b.n	8004a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 feb0 	bl	8005678 <I2C_WaitOnTXEFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	2b04      	cmp	r3, #4
 8004924:	d107      	bne.n	8004936 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004934:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e06b      	b.n	8004a12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	781a      	ldrb	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b04      	cmp	r3, #4
 8004976:	d11b      	bne.n	80049b0 <HAL_I2C_Mem_Write+0x180>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497c:	2b00      	cmp	r3, #0
 800497e:	d017      	beq.n	80049b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1aa      	bne.n	800490e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fe9c 	bl	80056fa <I2C_WaitOnBTFFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00d      	beq.n	80049e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d107      	bne.n	80049e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e016      	b.n	8004a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
  }
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	00100002 	.word	0x00100002
 8004a20:	ffff0000 	.word	0xffff0000

08004a24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08c      	sub	sp, #48	; 0x30
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	461a      	mov	r2, r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	817b      	strh	r3, [r7, #10]
 8004a36:	460b      	mov	r3, r1
 8004a38:	813b      	strh	r3, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a3e:	f7fd fbf7 	bl	8002230 <HAL_GetTick>
 8004a42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	f040 8208 	bne.w	8004e62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	2319      	movs	r3, #25
 8004a58:	2201      	movs	r2, #1
 8004a5a:	497b      	ldr	r1, [pc, #492]	; (8004c48 <HAL_I2C_Mem_Read+0x224>)
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fd35 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e1fb      	b.n	8004e64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_I2C_Mem_Read+0x56>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e1f4      	b.n	8004e64 <HAL_I2C_Mem_Read+0x440>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d007      	beq.n	8004aa0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2222      	movs	r2, #34	; 0x22
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2240      	movs	r2, #64	; 0x40
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4a5b      	ldr	r2, [pc, #364]	; (8004c4c <HAL_I2C_Mem_Read+0x228>)
 8004ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ae2:	88f8      	ldrh	r0, [r7, #6]
 8004ae4:	893a      	ldrh	r2, [r7, #8]
 8004ae6:	8979      	ldrh	r1, [r7, #10]
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	4603      	mov	r3, r0
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fc02 	bl	80052fc <I2C_RequestMemoryRead>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e1b0      	b.n	8004e64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d113      	bne.n	8004b32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	623b      	str	r3, [r7, #32]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	623b      	str	r3, [r7, #32]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e184      	b.n	8004e3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d11b      	bne.n	8004b72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	e164      	b.n	8004e3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d11b      	bne.n	8004bb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	e144      	b.n	8004e3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bc8:	e138      	b.n	8004e3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	f200 80f1 	bhi.w	8004db6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d123      	bne.n	8004c24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fdcb 	bl	800577c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e139      	b.n	8004e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c22:	e10b      	b.n	8004e3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d14e      	bne.n	8004cca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c32:	2200      	movs	r2, #0
 8004c34:	4906      	ldr	r1, [pc, #24]	; (8004c50 <HAL_I2C_Mem_Read+0x22c>)
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 fc48 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e10e      	b.n	8004e64 <HAL_I2C_Mem_Read+0x440>
 8004c46:	bf00      	nop
 8004c48:	00100002 	.word	0x00100002
 8004c4c:	ffff0000 	.word	0xffff0000
 8004c50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cc8:	e0b8      	b.n	8004e3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4966      	ldr	r1, [pc, #408]	; (8004e6c <HAL_I2C_Mem_Read+0x448>)
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fbf9 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0bf      	b.n	8004e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	494f      	ldr	r1, [pc, #316]	; (8004e6c <HAL_I2C_Mem_Read+0x448>)
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 fbcb 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e091      	b.n	8004e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004db4:	e042      	b.n	8004e3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 fcde 	bl	800577c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e04c      	b.n	8004e64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d118      	bne.n	8004e3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f47f aec2 	bne.w	8004bca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e000      	b.n	8004e64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e62:	2302      	movs	r3, #2
  }
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3728      	adds	r7, #40	; 0x28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	00010004 	.word	0x00010004

08004e70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	; 0x28
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004e80:	f7fd f9d6 	bl	8002230 <HAL_GetTick>
 8004e84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004e86:	2301      	movs	r3, #1
 8004e88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	f040 8111 	bne.w	80050ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2319      	movs	r3, #25
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	4988      	ldr	r1, [pc, #544]	; (80050c4 <HAL_I2C_IsDeviceReady+0x254>)
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fb12 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e104      	b.n	80050bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_I2C_IsDeviceReady+0x50>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e0fd      	b.n	80050bc <HAL_I2C_IsDeviceReady+0x24c>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d007      	beq.n	8004ee6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0201 	orr.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2224      	movs	r2, #36	; 0x24
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4a70      	ldr	r2, [pc, #448]	; (80050c8 <HAL_I2C_IsDeviceReady+0x258>)
 8004f08:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 fad0 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00d      	beq.n	8004f4e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f40:	d103      	bne.n	8004f4a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e0b6      	b.n	80050bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f4e:	897b      	ldrh	r3, [r7, #10]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f5c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f5e:	f7fd f967 	bl	8002230 <HAL_GetTick>
 8004f62:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	bf0c      	ite	eq
 8004f72:	2301      	moveq	r3, #1
 8004f74:	2300      	movne	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f88:	bf0c      	ite	eq
 8004f8a:	2301      	moveq	r3, #1
 8004f8c:	2300      	movne	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f92:	e025      	b.n	8004fe0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f94:	f7fd f94c 	bl	8002230 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d302      	bcc.n	8004faa <HAL_I2C_IsDeviceReady+0x13a>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d103      	bne.n	8004fb2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	22a0      	movs	r2, #160	; 0xa0
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd6:	bf0c      	ite	eq
 8004fd8:	2301      	moveq	r3, #1
 8004fda:	2300      	movne	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2ba0      	cmp	r3, #160	; 0xa0
 8004fea:	d005      	beq.n	8004ff8 <HAL_I2C_IsDeviceReady+0x188>
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d102      	bne.n	8004ff8 <HAL_I2C_IsDeviceReady+0x188>
 8004ff2:	7dbb      	ldrb	r3, [r7, #22]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0cd      	beq.n	8004f94 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b02      	cmp	r3, #2
 800500c:	d129      	bne.n	8005062 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501e:	2300      	movs	r3, #0
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	2319      	movs	r3, #25
 800503a:	2201      	movs	r2, #1
 800503c:	4921      	ldr	r1, [pc, #132]	; (80050c4 <HAL_I2C_IsDeviceReady+0x254>)
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fa44 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e036      	b.n	80050bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e02c      	b.n	80050bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005070:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800507a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2319      	movs	r3, #25
 8005082:	2201      	movs	r2, #1
 8005084:	490f      	ldr	r1, [pc, #60]	; (80050c4 <HAL_I2C_IsDeviceReady+0x254>)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fa20 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e012      	b.n	80050bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	3301      	adds	r3, #1
 800509a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	f4ff af32 	bcc.w	8004f0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80050ba:	2302      	movs	r3, #2
  }
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	00100002 	.word	0x00100002
 80050c8:	ffff0000 	.word	0xffff0000

080050cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	607a      	str	r2, [r7, #4]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	460b      	mov	r3, r1
 80050da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d006      	beq.n	80050f6 <I2C_MasterRequestWrite+0x2a>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d003      	beq.n	80050f6 <I2C_MasterRequestWrite+0x2a>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f4:	d108      	bne.n	8005108 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e00b      	b.n	8005120 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	2b12      	cmp	r3, #18
 800510e:	d107      	bne.n	8005120 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800511e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f9cd 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00d      	beq.n	8005154 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005146:	d103      	bne.n	8005150 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e035      	b.n	80051c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800515c:	d108      	bne.n	8005170 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800515e:	897b      	ldrh	r3, [r7, #10]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800516c:	611a      	str	r2, [r3, #16]
 800516e:	e01b      	b.n	80051a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005170:	897b      	ldrh	r3, [r7, #10]
 8005172:	11db      	asrs	r3, r3, #7
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f003 0306 	and.w	r3, r3, #6
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f063 030f 	orn	r3, r3, #15
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	490e      	ldr	r1, [pc, #56]	; (80051c8 <I2C_MasterRequestWrite+0xfc>)
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f9f3 	bl	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e010      	b.n	80051c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800519e:	897b      	ldrh	r3, [r7, #10]
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4907      	ldr	r1, [pc, #28]	; (80051cc <I2C_MasterRequestWrite+0x100>)
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f9e3 	bl	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	00010008 	.word	0x00010008
 80051cc:	00010002 	.word	0x00010002

080051d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	4608      	mov	r0, r1
 80051da:	4611      	mov	r1, r2
 80051dc:	461a      	mov	r2, r3
 80051de:	4603      	mov	r3, r0
 80051e0:	817b      	strh	r3, [r7, #10]
 80051e2:	460b      	mov	r3, r1
 80051e4:	813b      	strh	r3, [r7, #8]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	2200      	movs	r2, #0
 8005202:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f960 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00d      	beq.n	800522e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005220:	d103      	bne.n	800522a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005228:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e05f      	b.n	80052ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800522e:	897b      	ldrh	r3, [r7, #10]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800523c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	6a3a      	ldr	r2, [r7, #32]
 8005242:	492d      	ldr	r1, [pc, #180]	; (80052f8 <I2C_RequestMemoryWrite+0x128>)
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f998 	bl	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e04c      	b.n	80052ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800526a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526c:	6a39      	ldr	r1, [r7, #32]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 fa02 	bl	8005678 <I2C_WaitOnTXEFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	2b04      	cmp	r3, #4
 8005280:	d107      	bne.n	8005292 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005290:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e02b      	b.n	80052ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d105      	bne.n	80052a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800529c:	893b      	ldrh	r3, [r7, #8]
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	611a      	str	r2, [r3, #16]
 80052a6:	e021      	b.n	80052ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052a8:	893b      	ldrh	r3, [r7, #8]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b8:	6a39      	ldr	r1, [r7, #32]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f9dc 	bl	8005678 <I2C_WaitOnTXEFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00d      	beq.n	80052e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d107      	bne.n	80052de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e005      	b.n	80052ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052e2:	893b      	ldrh	r3, [r7, #8]
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	00010002 	.word	0x00010002

080052fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	4608      	mov	r0, r1
 8005306:	4611      	mov	r1, r2
 8005308:	461a      	mov	r2, r3
 800530a:	4603      	mov	r3, r0
 800530c:	817b      	strh	r3, [r7, #10]
 800530e:	460b      	mov	r3, r1
 8005310:	813b      	strh	r3, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005324:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005334:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	2200      	movs	r2, #0
 800533e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f8c2 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00d      	beq.n	800536a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800535c:	d103      	bne.n	8005366 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005364:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e0aa      	b.n	80054c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800536a:	897b      	ldrh	r3, [r7, #10]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005378:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	6a3a      	ldr	r2, [r7, #32]
 800537e:	4952      	ldr	r1, [pc, #328]	; (80054c8 <I2C_RequestMemoryRead+0x1cc>)
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f8fa 	bl	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e097      	b.n	80054c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	6a39      	ldr	r1, [r7, #32]
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 f964 	bl	8005678 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00d      	beq.n	80053d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d107      	bne.n	80053ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e076      	b.n	80054c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d105      	bne.n	80053e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053d8:	893b      	ldrh	r3, [r7, #8]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	611a      	str	r2, [r3, #16]
 80053e2:	e021      	b.n	8005428 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053e4:	893b      	ldrh	r3, [r7, #8]
 80053e6:	0a1b      	lsrs	r3, r3, #8
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f4:	6a39      	ldr	r1, [r7, #32]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f93e 	bl	8005678 <I2C_WaitOnTXEFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	2b04      	cmp	r3, #4
 8005408:	d107      	bne.n	800541a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005418:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e050      	b.n	80054c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800541e:	893b      	ldrh	r3, [r7, #8]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542a:	6a39      	ldr	r1, [r7, #32]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f923 	bl	8005678 <I2C_WaitOnTXEFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00d      	beq.n	8005454 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	2b04      	cmp	r3, #4
 800543e:	d107      	bne.n	8005450 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800544e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e035      	b.n	80054c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005462:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	2200      	movs	r2, #0
 800546c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f82b 	bl	80054cc <I2C_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00d      	beq.n	8005498 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548a:	d103      	bne.n	8005494 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005492:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e013      	b.n	80054c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005498:	897b      	ldrh	r3, [r7, #10]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	6a3a      	ldr	r2, [r7, #32]
 80054ac:	4906      	ldr	r1, [pc, #24]	; (80054c8 <I2C_RequestMemoryRead+0x1cc>)
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f863 	bl	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	00010002 	.word	0x00010002

080054cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	4613      	mov	r3, r2
 80054da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054dc:	e025      	b.n	800552a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e4:	d021      	beq.n	800552a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e6:	f7fc fea3 	bl	8002230 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d116      	bne.n	800552a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e023      	b.n	8005572 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	0c1b      	lsrs	r3, r3, #16
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d10d      	bne.n	8005550 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	43da      	mvns	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4013      	ands	r3, r2
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	bf0c      	ite	eq
 8005546:	2301      	moveq	r3, #1
 8005548:	2300      	movne	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	e00c      	b.n	800556a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	43da      	mvns	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	429a      	cmp	r2, r3
 800556e:	d0b6      	beq.n	80054de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005588:	e051      	b.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005598:	d123      	bne.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f043 0204 	orr.w	r2, r3, #4
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e046      	b.n	8005670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e8:	d021      	beq.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ea:	f7fc fe21 	bl	8002230 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d116      	bne.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f043 0220 	orr.w	r2, r3, #32
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e020      	b.n	8005670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10c      	bne.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	43da      	mvns	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4013      	ands	r3, r2
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	e00b      	b.n	800566a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	43da      	mvns	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4013      	ands	r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d18d      	bne.n	800558a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005684:	e02d      	b.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f8ce 	bl	8005828 <I2C_IsAcknowledgeFailed>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e02d      	b.n	80056f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800569c:	d021      	beq.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569e:	f7fc fdc7 	bl	8002230 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d302      	bcc.n	80056b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d116      	bne.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f043 0220 	orr.w	r2, r3, #32
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e007      	b.n	80056f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ec:	2b80      	cmp	r3, #128	; 0x80
 80056ee:	d1ca      	bne.n	8005686 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005706:	e02d      	b.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f88d 	bl	8005828 <I2C_IsAcknowledgeFailed>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e02d      	b.n	8005774 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800571e:	d021      	beq.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005720:	f7fc fd86 	bl	8002230 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	429a      	cmp	r2, r3
 800572e:	d302      	bcc.n	8005736 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d116      	bne.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	f043 0220 	orr.w	r2, r3, #32
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e007      	b.n	8005774 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b04      	cmp	r3, #4
 8005770:	d1ca      	bne.n	8005708 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005788:	e042      	b.n	8005810 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b10      	cmp	r3, #16
 8005796:	d119      	bne.n	80057cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0210 	mvn.w	r2, #16
 80057a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e029      	b.n	8005820 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057cc:	f7fc fd30 	bl	8002230 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d116      	bne.n	8005810 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e007      	b.n	8005820 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d1b5      	bne.n	800578a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583e:	d11b      	bne.n	8005878 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005848:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	f043 0204 	orr.w	r2, r3, #4
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
	...

08005888 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e128      	b.n	8005aec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a90      	ldr	r2, [pc, #576]	; (8005af4 <HAL_I2S_Init+0x26c>)
 80058b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7fc fa7d 	bl	8001db4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80058d0:	f023 030f 	bic.w	r3, r3, #15
 80058d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2202      	movs	r2, #2
 80058dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d060      	beq.n	80059a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d102      	bne.n	80058f4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80058ee:	2310      	movs	r3, #16
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	e001      	b.n	80058f8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80058f4:	2320      	movs	r3, #32
 80058f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d802      	bhi.n	8005906 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005906:	2001      	movs	r0, #1
 8005908:	f001 f9e6 	bl	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 800590c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005916:	d125      	bne.n	8005964 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d010      	beq.n	8005942 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	fbb2 f2f3 	udiv	r2, r2, r3
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	461a      	mov	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	3305      	adds	r3, #5
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	e01f      	b.n	8005982 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	fbb2 f2f3 	udiv	r2, r2, r3
 800594c:	4613      	mov	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	461a      	mov	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	fbb2 f3f3 	udiv	r3, r2, r3
 800595e:	3305      	adds	r3, #5
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	e00e      	b.n	8005982 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	fbb2 f2f3 	udiv	r2, r2, r3
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	fbb2 f3f3 	udiv	r3, r2, r3
 800597e:	3305      	adds	r3, #5
 8005980:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4a5c      	ldr	r2, [pc, #368]	; (8005af8 <HAL_I2S_Init+0x270>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	08db      	lsrs	r3, r3, #3
 800598c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e003      	b.n	80059b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80059a8:	2302      	movs	r3, #2
 80059aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d902      	bls.n	80059bc <HAL_I2S_Init+0x134>
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	2bff      	cmp	r3, #255	; 0xff
 80059ba:	d907      	bls.n	80059cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c0:	f043 0210 	orr.w	r2, r3, #16
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e08f      	b.n	8005aec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	ea42 0103 	orr.w	r1, r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	430a      	orrs	r2, r1
 80059de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80059ea:	f023 030f 	bic.w	r3, r3, #15
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6851      	ldr	r1, [r2, #4]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6892      	ldr	r2, [r2, #8]
 80059f6:	4311      	orrs	r1, r2
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68d2      	ldr	r2, [r2, #12]
 80059fc:	4311      	orrs	r1, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6992      	ldr	r2, [r2, #24]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a0e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d161      	bne.n	8005adc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a38      	ldr	r2, [pc, #224]	; (8005afc <HAL_I2S_Init+0x274>)
 8005a1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a37      	ldr	r2, [pc, #220]	; (8005b00 <HAL_I2S_Init+0x278>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d101      	bne.n	8005a2c <HAL_I2S_Init+0x1a4>
 8005a28:	4b36      	ldr	r3, [pc, #216]	; (8005b04 <HAL_I2S_Init+0x27c>)
 8005a2a:	e001      	b.n	8005a30 <HAL_I2S_Init+0x1a8>
 8005a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	4932      	ldr	r1, [pc, #200]	; (8005b00 <HAL_I2S_Init+0x278>)
 8005a38:	428a      	cmp	r2, r1
 8005a3a:	d101      	bne.n	8005a40 <HAL_I2S_Init+0x1b8>
 8005a3c:	4a31      	ldr	r2, [pc, #196]	; (8005b04 <HAL_I2S_Init+0x27c>)
 8005a3e:	e001      	b.n	8005a44 <HAL_I2S_Init+0x1bc>
 8005a40:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005a44:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a48:	f023 030f 	bic.w	r3, r3, #15
 8005a4c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a2b      	ldr	r2, [pc, #172]	; (8005b00 <HAL_I2S_Init+0x278>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d101      	bne.n	8005a5c <HAL_I2S_Init+0x1d4>
 8005a58:	4b2a      	ldr	r3, [pc, #168]	; (8005b04 <HAL_I2S_Init+0x27c>)
 8005a5a:	e001      	b.n	8005a60 <HAL_I2S_Init+0x1d8>
 8005a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a60:	2202      	movs	r2, #2
 8005a62:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a25      	ldr	r2, [pc, #148]	; (8005b00 <HAL_I2S_Init+0x278>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d101      	bne.n	8005a72 <HAL_I2S_Init+0x1ea>
 8005a6e:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <HAL_I2S_Init+0x27c>)
 8005a70:	e001      	b.n	8005a76 <HAL_I2S_Init+0x1ee>
 8005a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a82:	d003      	beq.n	8005a8c <HAL_I2S_Init+0x204>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	e001      	b.n	8005a98 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005aac:	4313      	orrs	r3, r2
 8005aae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	897b      	ldrh	r3, [r7, #10]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ac4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a0d      	ldr	r2, [pc, #52]	; (8005b00 <HAL_I2S_Init+0x278>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d101      	bne.n	8005ad4 <HAL_I2S_Init+0x24c>
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <HAL_I2S_Init+0x27c>)
 8005ad2:	e001      	b.n	8005ad8 <HAL_I2S_Init+0x250>
 8005ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ad8:	897a      	ldrh	r2, [r7, #10]
 8005ada:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	08005bff 	.word	0x08005bff
 8005af8:	cccccccd 	.word	0xcccccccd
 8005afc:	08005d15 	.word	0x08005d15
 8005b00:	40003800 	.word	0x40003800
 8005b04:	40003400 	.word	0x40003400

08005b08 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	881a      	ldrh	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10e      	bne.n	8005b98 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b88:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff ffb8 	bl	8005b08 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	b292      	uxth	r2, r2
 8005bb4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	1c9a      	adds	r2, r3, #2
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10e      	bne.n	8005bf6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005be6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff ff93 	bl	8005b1c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b086      	sub	sp, #24
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d13a      	bne.n	8005c90 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d109      	bne.n	8005c38 <I2S_IRQHandler+0x3a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	d102      	bne.n	8005c38 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff ffb4 	bl	8005ba0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	d126      	bne.n	8005c90 <I2S_IRQHandler+0x92>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f003 0320 	and.w	r3, r3, #32
 8005c4c:	2b20      	cmp	r3, #32
 8005c4e:	d11f      	bne.n	8005c90 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c60:	2300      	movs	r3, #0
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	f043 0202 	orr.w	r2, r3, #2
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff ff50 	bl	8005b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d136      	bne.n	8005d0a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d109      	bne.n	8005cba <I2S_IRQHandler+0xbc>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb0:	2b80      	cmp	r3, #128	; 0x80
 8005cb2:	d102      	bne.n	8005cba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff ff45 	bl	8005b44 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d122      	bne.n	8005d0a <I2S_IRQHandler+0x10c>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b20      	cmp	r3, #32
 8005cd0:	d11b      	bne.n	8005d0a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ce0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfc:	f043 0204 	orr.w	r2, r3, #4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff ff13 	bl	8005b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d0a:	bf00      	nop
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4aa2      	ldr	r2, [pc, #648]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d101      	bne.n	8005d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005d2e:	4ba2      	ldr	r3, [pc, #648]	; (8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d30:	e001      	b.n	8005d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005d32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a9b      	ldr	r2, [pc, #620]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d101      	bne.n	8005d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005d4c:	4b9a      	ldr	r3, [pc, #616]	; (8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d4e:	e001      	b.n	8005d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005d50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d60:	d004      	beq.n	8005d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f040 8099 	bne.w	8005e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d107      	bne.n	8005d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f925 	bl	8005fd0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d107      	bne.n	8005da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f9c8 	bl	8006130 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da6:	2b40      	cmp	r3, #64	; 0x40
 8005da8:	d13a      	bne.n	8005e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d035      	beq.n	8005e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a7e      	ldr	r2, [pc, #504]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d101      	bne.n	8005dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005dbe:	4b7e      	ldr	r3, [pc, #504]	; (8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005dc0:	e001      	b.n	8005dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4979      	ldr	r1, [pc, #484]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005dce:	428b      	cmp	r3, r1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005dd2:	4b79      	ldr	r3, [pc, #484]	; (8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005dd4:	e001      	b.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005dde:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f043 0202 	orr.w	r2, r3, #2
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff fe88 	bl	8005b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	f040 80be 	bne.w	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80b8 	beq.w	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e46:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a59      	ldr	r2, [pc, #356]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d101      	bne.n	8005e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005e52:	4b59      	ldr	r3, [pc, #356]	; (8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e54:	e001      	b.n	8005e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005e56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4954      	ldr	r1, [pc, #336]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e62:	428b      	cmp	r3, r1
 8005e64:	d101      	bne.n	8005e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005e66:	4b54      	ldr	r3, [pc, #336]	; (8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e68:	e001      	b.n	8005e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005e6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e72:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8e:	f043 0204 	orr.w	r2, r3, #4
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff fe4a 	bl	8005b30 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e9c:	e084      	b.n	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d107      	bne.n	8005eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f8be 	bl	8006034 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d107      	bne.n	8005ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f8fd 	bl	80060cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed8:	2b40      	cmp	r3, #64	; 0x40
 8005eda:	d12f      	bne.n	8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d02a      	beq.n	8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ef4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a2e      	ldr	r2, [pc, #184]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d101      	bne.n	8005f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005f00:	4b2d      	ldr	r3, [pc, #180]	; (8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f02:	e001      	b.n	8005f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4929      	ldr	r1, [pc, #164]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f10:	428b      	cmp	r3, r1
 8005f12:	d101      	bne.n	8005f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005f14:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f16:	e001      	b.n	8005f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f20:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	f043 0202 	orr.w	r2, r3, #2
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff fdfa 	bl	8005b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b08      	cmp	r3, #8
 8005f44:	d131      	bne.n	8005faa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d02c      	beq.n	8005faa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d101      	bne.n	8005f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005f5a:	4b17      	ldr	r3, [pc, #92]	; (8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f5c:	e001      	b.n	8005f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4912      	ldr	r1, [pc, #72]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f6a:	428b      	cmp	r3, r1
 8005f6c:	d101      	bne.n	8005f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005f6e:	4b12      	ldr	r3, [pc, #72]	; (8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f70:	e001      	b.n	8005f76 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f8a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f98:	f043 0204 	orr.w	r2, r3, #4
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fdc5 	bl	8005b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fa6:	e000      	b.n	8005faa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fa8:	bf00      	nop
}
 8005faa:	bf00      	nop
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40003800 	.word	0x40003800
 8005fb8:	40003400 	.word	0x40003400

08005fbc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	1c99      	adds	r1, r3, #2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6251      	str	r1, [r2, #36]	; 0x24
 8005fe2:	881a      	ldrh	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d113      	bne.n	800602a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006010:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff ffc9 	bl	8005fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	1c99      	adds	r1, r3, #2
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6251      	str	r1, [r2, #36]	; 0x24
 8006046:	8819      	ldrh	r1, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <I2SEx_TxISR_I2SExt+0x90>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d101      	bne.n	8006056 <I2SEx_TxISR_I2SExt+0x22>
 8006052:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <I2SEx_TxISR_I2SExt+0x94>)
 8006054:	e001      	b.n	800605a <I2SEx_TxISR_I2SExt+0x26>
 8006056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800605a:	460a      	mov	r2, r1
 800605c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d121      	bne.n	80060ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a12      	ldr	r2, [pc, #72]	; (80060c4 <I2SEx_TxISR_I2SExt+0x90>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d101      	bne.n	8006084 <I2SEx_TxISR_I2SExt+0x50>
 8006080:	4b11      	ldr	r3, [pc, #68]	; (80060c8 <I2SEx_TxISR_I2SExt+0x94>)
 8006082:	e001      	b.n	8006088 <I2SEx_TxISR_I2SExt+0x54>
 8006084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	490d      	ldr	r1, [pc, #52]	; (80060c4 <I2SEx_TxISR_I2SExt+0x90>)
 8006090:	428b      	cmp	r3, r1
 8006092:	d101      	bne.n	8006098 <I2SEx_TxISR_I2SExt+0x64>
 8006094:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <I2SEx_TxISR_I2SExt+0x94>)
 8006096:	e001      	b.n	800609c <I2SEx_TxISR_I2SExt+0x68>
 8006098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800609c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d106      	bne.n	80060ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff ff81 	bl	8005fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060ba:	bf00      	nop
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40003800 	.word	0x40003800
 80060c8:	40003400 	.word	0x40003400

080060cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68d8      	ldr	r0, [r3, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	1c99      	adds	r1, r3, #2
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80060e4:	b282      	uxth	r2, r0
 80060e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d113      	bne.n	8006128 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800610e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff ff4a 	bl	8005fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006128:	bf00      	nop
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a20      	ldr	r2, [pc, #128]	; (80061c0 <I2SEx_RxISR_I2SExt+0x90>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d101      	bne.n	8006146 <I2SEx_RxISR_I2SExt+0x16>
 8006142:	4b20      	ldr	r3, [pc, #128]	; (80061c4 <I2SEx_RxISR_I2SExt+0x94>)
 8006144:	e001      	b.n	800614a <I2SEx_RxISR_I2SExt+0x1a>
 8006146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800614a:	68d8      	ldr	r0, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	1c99      	adds	r1, r3, #2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006156:	b282      	uxth	r2, r0
 8006158:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d121      	bne.n	80061b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a12      	ldr	r2, [pc, #72]	; (80061c0 <I2SEx_RxISR_I2SExt+0x90>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d101      	bne.n	8006180 <I2SEx_RxISR_I2SExt+0x50>
 800617c:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <I2SEx_RxISR_I2SExt+0x94>)
 800617e:	e001      	b.n	8006184 <I2SEx_RxISR_I2SExt+0x54>
 8006180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	490d      	ldr	r1, [pc, #52]	; (80061c0 <I2SEx_RxISR_I2SExt+0x90>)
 800618c:	428b      	cmp	r3, r1
 800618e:	d101      	bne.n	8006194 <I2SEx_RxISR_I2SExt+0x64>
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <I2SEx_RxISR_I2SExt+0x94>)
 8006192:	e001      	b.n	8006198 <I2SEx_RxISR_I2SExt+0x68>
 8006194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006198:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800619c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff ff03 	bl	8005fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061b6:	bf00      	nop
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40003800 	.word	0x40003800
 80061c4:	40003400 	.word	0x40003400

080061c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e264      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d075      	beq.n	80062d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061e6:	4ba3      	ldr	r3, [pc, #652]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 030c 	and.w	r3, r3, #12
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d00c      	beq.n	800620c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061f2:	4ba0      	ldr	r3, [pc, #640]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d112      	bne.n	8006224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061fe:	4b9d      	ldr	r3, [pc, #628]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800620a:	d10b      	bne.n	8006224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800620c:	4b99      	ldr	r3, [pc, #612]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d05b      	beq.n	80062d0 <HAL_RCC_OscConfig+0x108>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d157      	bne.n	80062d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e23f      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622c:	d106      	bne.n	800623c <HAL_RCC_OscConfig+0x74>
 800622e:	4b91      	ldr	r3, [pc, #580]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a90      	ldr	r2, [pc, #576]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	e01d      	b.n	8006278 <HAL_RCC_OscConfig+0xb0>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006244:	d10c      	bne.n	8006260 <HAL_RCC_OscConfig+0x98>
 8006246:	4b8b      	ldr	r3, [pc, #556]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a8a      	ldr	r2, [pc, #552]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800624c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	4b88      	ldr	r3, [pc, #544]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a87      	ldr	r2, [pc, #540]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	e00b      	b.n	8006278 <HAL_RCC_OscConfig+0xb0>
 8006260:	4b84      	ldr	r3, [pc, #528]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a83      	ldr	r2, [pc, #524]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	4b81      	ldr	r3, [pc, #516]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a80      	ldr	r2, [pc, #512]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d013      	beq.n	80062a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006280:	f7fb ffd6 	bl	8002230 <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006288:	f7fb ffd2 	bl	8002230 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b64      	cmp	r3, #100	; 0x64
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e204      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629a:	4b76      	ldr	r3, [pc, #472]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0f0      	beq.n	8006288 <HAL_RCC_OscConfig+0xc0>
 80062a6:	e014      	b.n	80062d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a8:	f7fb ffc2 	bl	8002230 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b0:	f7fb ffbe 	bl	8002230 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b64      	cmp	r3, #100	; 0x64
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e1f0      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062c2:	4b6c      	ldr	r3, [pc, #432]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f0      	bne.n	80062b0 <HAL_RCC_OscConfig+0xe8>
 80062ce:	e000      	b.n	80062d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d063      	beq.n	80063a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062de:	4b65      	ldr	r3, [pc, #404]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 030c 	and.w	r3, r3, #12
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ea:	4b62      	ldr	r3, [pc, #392]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d11c      	bne.n	8006330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062f6:	4b5f      	ldr	r3, [pc, #380]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d116      	bne.n	8006330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006302:	4b5c      	ldr	r3, [pc, #368]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <HAL_RCC_OscConfig+0x152>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d001      	beq.n	800631a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e1c4      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800631a:	4b56      	ldr	r3, [pc, #344]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	4952      	ldr	r1, [pc, #328]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800632a:	4313      	orrs	r3, r2
 800632c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632e:	e03a      	b.n	80063a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d020      	beq.n	800637a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006338:	4b4f      	ldr	r3, [pc, #316]	; (8006478 <HAL_RCC_OscConfig+0x2b0>)
 800633a:	2201      	movs	r2, #1
 800633c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633e:	f7fb ff77 	bl	8002230 <HAL_GetTick>
 8006342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006344:	e008      	b.n	8006358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006346:	f7fb ff73 	bl	8002230 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e1a5      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006358:	4b46      	ldr	r3, [pc, #280]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0f0      	beq.n	8006346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006364:	4b43      	ldr	r3, [pc, #268]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4940      	ldr	r1, [pc, #256]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006374:	4313      	orrs	r3, r2
 8006376:	600b      	str	r3, [r1, #0]
 8006378:	e015      	b.n	80063a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800637a:	4b3f      	ldr	r3, [pc, #252]	; (8006478 <HAL_RCC_OscConfig+0x2b0>)
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006380:	f7fb ff56 	bl	8002230 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006388:	f7fb ff52 	bl	8002230 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e184      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800639a:	4b36      	ldr	r3, [pc, #216]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d030      	beq.n	8006414 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d016      	beq.n	80063e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ba:	4b30      	ldr	r3, [pc, #192]	; (800647c <HAL_RCC_OscConfig+0x2b4>)
 80063bc:	2201      	movs	r2, #1
 80063be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c0:	f7fb ff36 	bl	8002230 <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063c8:	f7fb ff32 	bl	8002230 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e164      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063da:	4b26      	ldr	r3, [pc, #152]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 80063dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0f0      	beq.n	80063c8 <HAL_RCC_OscConfig+0x200>
 80063e6:	e015      	b.n	8006414 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e8:	4b24      	ldr	r3, [pc, #144]	; (800647c <HAL_RCC_OscConfig+0x2b4>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ee:	f7fb ff1f 	bl	8002230 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063f6:	f7fb ff1b 	bl	8002230 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e14d      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006408:	4b1a      	ldr	r3, [pc, #104]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800640a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1f0      	bne.n	80063f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80a0 	beq.w	8006562 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006422:	2300      	movs	r3, #0
 8006424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006426:	4b13      	ldr	r3, [pc, #76]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10f      	bne.n	8006452 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	60bb      	str	r3, [r7, #8]
 8006436:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	4a0e      	ldr	r2, [pc, #56]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 800643c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006440:	6413      	str	r3, [r2, #64]	; 0x40
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <HAL_RCC_OscConfig+0x2ac>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644a:	60bb      	str	r3, [r7, #8]
 800644c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800644e:	2301      	movs	r3, #1
 8006450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <HAL_RCC_OscConfig+0x2b8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645a:	2b00      	cmp	r3, #0
 800645c:	d121      	bne.n	80064a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800645e:	4b08      	ldr	r3, [pc, #32]	; (8006480 <HAL_RCC_OscConfig+0x2b8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a07      	ldr	r2, [pc, #28]	; (8006480 <HAL_RCC_OscConfig+0x2b8>)
 8006464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800646a:	f7fb fee1 	bl	8002230 <HAL_GetTick>
 800646e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006470:	e011      	b.n	8006496 <HAL_RCC_OscConfig+0x2ce>
 8006472:	bf00      	nop
 8006474:	40023800 	.word	0x40023800
 8006478:	42470000 	.word	0x42470000
 800647c:	42470e80 	.word	0x42470e80
 8006480:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006484:	f7fb fed4 	bl	8002230 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e106      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006496:	4b85      	ldr	r3, [pc, #532]	; (80066ac <HAL_RCC_OscConfig+0x4e4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0f0      	beq.n	8006484 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d106      	bne.n	80064b8 <HAL_RCC_OscConfig+0x2f0>
 80064aa:	4b81      	ldr	r3, [pc, #516]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ae:	4a80      	ldr	r2, [pc, #512]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064b0:	f043 0301 	orr.w	r3, r3, #1
 80064b4:	6713      	str	r3, [r2, #112]	; 0x70
 80064b6:	e01c      	b.n	80064f2 <HAL_RCC_OscConfig+0x32a>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b05      	cmp	r3, #5
 80064be:	d10c      	bne.n	80064da <HAL_RCC_OscConfig+0x312>
 80064c0:	4b7b      	ldr	r3, [pc, #492]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c4:	4a7a      	ldr	r2, [pc, #488]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064c6:	f043 0304 	orr.w	r3, r3, #4
 80064ca:	6713      	str	r3, [r2, #112]	; 0x70
 80064cc:	4b78      	ldr	r3, [pc, #480]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d0:	4a77      	ldr	r2, [pc, #476]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	6713      	str	r3, [r2, #112]	; 0x70
 80064d8:	e00b      	b.n	80064f2 <HAL_RCC_OscConfig+0x32a>
 80064da:	4b75      	ldr	r3, [pc, #468]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	4a74      	ldr	r2, [pc, #464]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064e0:	f023 0301 	bic.w	r3, r3, #1
 80064e4:	6713      	str	r3, [r2, #112]	; 0x70
 80064e6:	4b72      	ldr	r3, [pc, #456]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	4a71      	ldr	r2, [pc, #452]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80064ec:	f023 0304 	bic.w	r3, r3, #4
 80064f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d015      	beq.n	8006526 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fa:	f7fb fe99 	bl	8002230 <HAL_GetTick>
 80064fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006500:	e00a      	b.n	8006518 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006502:	f7fb fe95 	bl	8002230 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006510:	4293      	cmp	r3, r2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e0c5      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006518:	4b65      	ldr	r3, [pc, #404]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0ee      	beq.n	8006502 <HAL_RCC_OscConfig+0x33a>
 8006524:	e014      	b.n	8006550 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006526:	f7fb fe83 	bl	8002230 <HAL_GetTick>
 800652a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800652c:	e00a      	b.n	8006544 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800652e:	f7fb fe7f 	bl	8002230 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	f241 3288 	movw	r2, #5000	; 0x1388
 800653c:	4293      	cmp	r3, r2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e0af      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006544:	4b5a      	ldr	r3, [pc, #360]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 8006546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1ee      	bne.n	800652e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d105      	bne.n	8006562 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006556:	4b56      	ldr	r3, [pc, #344]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	4a55      	ldr	r2, [pc, #340]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 800655c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006560:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 809b 	beq.w	80066a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800656c:	4b50      	ldr	r3, [pc, #320]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 030c 	and.w	r3, r3, #12
 8006574:	2b08      	cmp	r3, #8
 8006576:	d05c      	beq.n	8006632 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d141      	bne.n	8006604 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006580:	4b4c      	ldr	r3, [pc, #304]	; (80066b4 <HAL_RCC_OscConfig+0x4ec>)
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006586:	f7fb fe53 	bl	8002230 <HAL_GetTick>
 800658a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800658c:	e008      	b.n	80065a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800658e:	f7fb fe4f 	bl	8002230 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e081      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a0:	4b43      	ldr	r3, [pc, #268]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f0      	bne.n	800658e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	019b      	lsls	r3, r3, #6
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	3b01      	subs	r3, #1
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	061b      	lsls	r3, r3, #24
 80065d0:	4937      	ldr	r1, [pc, #220]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065d6:	4b37      	ldr	r3, [pc, #220]	; (80066b4 <HAL_RCC_OscConfig+0x4ec>)
 80065d8:	2201      	movs	r2, #1
 80065da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065dc:	f7fb fe28 	bl	8002230 <HAL_GetTick>
 80065e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e4:	f7fb fe24 	bl	8002230 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e056      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f6:	4b2e      	ldr	r3, [pc, #184]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0f0      	beq.n	80065e4 <HAL_RCC_OscConfig+0x41c>
 8006602:	e04e      	b.n	80066a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006604:	4b2b      	ldr	r3, [pc, #172]	; (80066b4 <HAL_RCC_OscConfig+0x4ec>)
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660a:	f7fb fe11 	bl	8002230 <HAL_GetTick>
 800660e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006610:	e008      	b.n	8006624 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006612:	f7fb fe0d 	bl	8002230 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e03f      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006624:	4b22      	ldr	r3, [pc, #136]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f0      	bne.n	8006612 <HAL_RCC_OscConfig+0x44a>
 8006630:	e037      	b.n	80066a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e032      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800663e:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <HAL_RCC_OscConfig+0x4e8>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d028      	beq.n	800669e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006656:	429a      	cmp	r2, r3
 8006658:	d121      	bne.n	800669e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006664:	429a      	cmp	r2, r3
 8006666:	d11a      	bne.n	800669e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800666e:	4013      	ands	r3, r2
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006674:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006676:	4293      	cmp	r3, r2
 8006678:	d111      	bne.n	800669e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	085b      	lsrs	r3, r3, #1
 8006686:	3b01      	subs	r3, #1
 8006688:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800668a:	429a      	cmp	r2, r3
 800668c:	d107      	bne.n	800669e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800669a:	429a      	cmp	r2, r3
 800669c:	d001      	beq.n	80066a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40007000 	.word	0x40007000
 80066b0:	40023800 	.word	0x40023800
 80066b4:	42470060 	.word	0x42470060

080066b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e0cc      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066cc:	4b68      	ldr	r3, [pc, #416]	; (8006870 <HAL_RCC_ClockConfig+0x1b8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d90c      	bls.n	80066f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066da:	4b65      	ldr	r3, [pc, #404]	; (8006870 <HAL_RCC_ClockConfig+0x1b8>)
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e2:	4b63      	ldr	r3, [pc, #396]	; (8006870 <HAL_RCC_ClockConfig+0x1b8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d001      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e0b8      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d020      	beq.n	8006742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800670c:	4b59      	ldr	r3, [pc, #356]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	4a58      	ldr	r2, [pc, #352]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0308 	and.w	r3, r3, #8
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006724:	4b53      	ldr	r3, [pc, #332]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	4a52      	ldr	r2, [pc, #328]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800672e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006730:	4b50      	ldr	r3, [pc, #320]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	494d      	ldr	r1, [pc, #308]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800673e:	4313      	orrs	r3, r2
 8006740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d044      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d107      	bne.n	8006766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006756:	4b47      	ldr	r3, [pc, #284]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d119      	bne.n	8006796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e07f      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d003      	beq.n	8006776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006772:	2b03      	cmp	r3, #3
 8006774:	d107      	bne.n	8006786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006776:	4b3f      	ldr	r3, [pc, #252]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e06f      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006786:	4b3b      	ldr	r3, [pc, #236]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e067      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006796:	4b37      	ldr	r3, [pc, #220]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f023 0203 	bic.w	r2, r3, #3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	4934      	ldr	r1, [pc, #208]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067a8:	f7fb fd42 	bl	8002230 <HAL_GetTick>
 80067ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ae:	e00a      	b.n	80067c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b0:	f7fb fd3e 	bl	8002230 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80067be:	4293      	cmp	r3, r2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e04f      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c6:	4b2b      	ldr	r3, [pc, #172]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 020c 	and.w	r2, r3, #12
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d1eb      	bne.n	80067b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067d8:	4b25      	ldr	r3, [pc, #148]	; (8006870 <HAL_RCC_ClockConfig+0x1b8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d20c      	bcs.n	8006800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e6:	4b22      	ldr	r3, [pc, #136]	; (8006870 <HAL_RCC_ClockConfig+0x1b8>)
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ee:	4b20      	ldr	r3, [pc, #128]	; (8006870 <HAL_RCC_ClockConfig+0x1b8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d001      	beq.n	8006800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e032      	b.n	8006866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d008      	beq.n	800681e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800680c:	4b19      	ldr	r3, [pc, #100]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	4916      	ldr	r1, [pc, #88]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800681a:	4313      	orrs	r3, r2
 800681c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0308 	and.w	r3, r3, #8
 8006826:	2b00      	cmp	r3, #0
 8006828:	d009      	beq.n	800683e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800682a:	4b12      	ldr	r3, [pc, #72]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	490e      	ldr	r1, [pc, #56]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	4313      	orrs	r3, r2
 800683c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800683e:	f000 f821 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 8006842:	4602      	mov	r2, r0
 8006844:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	490a      	ldr	r1, [pc, #40]	; (8006878 <HAL_RCC_ClockConfig+0x1c0>)
 8006850:	5ccb      	ldrb	r3, [r1, r3]
 8006852:	fa22 f303 	lsr.w	r3, r2, r3
 8006856:	4a09      	ldr	r2, [pc, #36]	; (800687c <HAL_RCC_ClockConfig+0x1c4>)
 8006858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800685a:	4b09      	ldr	r3, [pc, #36]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f7fb fba8 	bl	8001fb4 <HAL_InitTick>

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40023c00 	.word	0x40023c00
 8006874:	40023800 	.word	0x40023800
 8006878:	08010090 	.word	0x08010090
 800687c:	20000000 	.word	0x20000000
 8006880:	20000004 	.word	0x20000004

08006884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006884:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	607b      	str	r3, [r7, #4]
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	2300      	movs	r3, #0
 8006896:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800689c:	4b67      	ldr	r3, [pc, #412]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 030c 	and.w	r3, r3, #12
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d00d      	beq.n	80068c4 <HAL_RCC_GetSysClockFreq+0x40>
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	f200 80bd 	bhi.w	8006a28 <HAL_RCC_GetSysClockFreq+0x1a4>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <HAL_RCC_GetSysClockFreq+0x34>
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d003      	beq.n	80068be <HAL_RCC_GetSysClockFreq+0x3a>
 80068b6:	e0b7      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068b8:	4b61      	ldr	r3, [pc, #388]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80068ba:	60bb      	str	r3, [r7, #8]
       break;
 80068bc:	e0b7      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068be:	4b61      	ldr	r3, [pc, #388]	; (8006a44 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80068c0:	60bb      	str	r3, [r7, #8]
      break;
 80068c2:	e0b4      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068c4:	4b5d      	ldr	r3, [pc, #372]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068ce:	4b5b      	ldr	r3, [pc, #364]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d04d      	beq.n	8006976 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068da:	4b58      	ldr	r3, [pc, #352]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	099b      	lsrs	r3, r3, #6
 80068e0:	461a      	mov	r2, r3
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80068ea:	f04f 0100 	mov.w	r1, #0
 80068ee:	ea02 0800 	and.w	r8, r2, r0
 80068f2:	ea03 0901 	and.w	r9, r3, r1
 80068f6:	4640      	mov	r0, r8
 80068f8:	4649      	mov	r1, r9
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	014b      	lsls	r3, r1, #5
 8006904:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006908:	0142      	lsls	r2, r0, #5
 800690a:	4610      	mov	r0, r2
 800690c:	4619      	mov	r1, r3
 800690e:	ebb0 0008 	subs.w	r0, r0, r8
 8006912:	eb61 0109 	sbc.w	r1, r1, r9
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	018b      	lsls	r3, r1, #6
 8006920:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006924:	0182      	lsls	r2, r0, #6
 8006926:	1a12      	subs	r2, r2, r0
 8006928:	eb63 0301 	sbc.w	r3, r3, r1
 800692c:	f04f 0000 	mov.w	r0, #0
 8006930:	f04f 0100 	mov.w	r1, #0
 8006934:	00d9      	lsls	r1, r3, #3
 8006936:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800693a:	00d0      	lsls	r0, r2, #3
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	eb12 0208 	adds.w	r2, r2, r8
 8006944:	eb43 0309 	adc.w	r3, r3, r9
 8006948:	f04f 0000 	mov.w	r0, #0
 800694c:	f04f 0100 	mov.w	r1, #0
 8006950:	0259      	lsls	r1, r3, #9
 8006952:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006956:	0250      	lsls	r0, r2, #9
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4610      	mov	r0, r2
 800695e:	4619      	mov	r1, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	461a      	mov	r2, r3
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	f7fa f8f8 	bl	8000b5c <__aeabi_uldivmod>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4613      	mov	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e04a      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006976:	4b31      	ldr	r3, [pc, #196]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	099b      	lsrs	r3, r3, #6
 800697c:	461a      	mov	r2, r3
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006986:	f04f 0100 	mov.w	r1, #0
 800698a:	ea02 0400 	and.w	r4, r2, r0
 800698e:	ea03 0501 	and.w	r5, r3, r1
 8006992:	4620      	mov	r0, r4
 8006994:	4629      	mov	r1, r5
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	f04f 0300 	mov.w	r3, #0
 800699e:	014b      	lsls	r3, r1, #5
 80069a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069a4:	0142      	lsls	r2, r0, #5
 80069a6:	4610      	mov	r0, r2
 80069a8:	4619      	mov	r1, r3
 80069aa:	1b00      	subs	r0, r0, r4
 80069ac:	eb61 0105 	sbc.w	r1, r1, r5
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	018b      	lsls	r3, r1, #6
 80069ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069be:	0182      	lsls	r2, r0, #6
 80069c0:	1a12      	subs	r2, r2, r0
 80069c2:	eb63 0301 	sbc.w	r3, r3, r1
 80069c6:	f04f 0000 	mov.w	r0, #0
 80069ca:	f04f 0100 	mov.w	r1, #0
 80069ce:	00d9      	lsls	r1, r3, #3
 80069d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069d4:	00d0      	lsls	r0, r2, #3
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	1912      	adds	r2, r2, r4
 80069dc:	eb45 0303 	adc.w	r3, r5, r3
 80069e0:	f04f 0000 	mov.w	r0, #0
 80069e4:	f04f 0100 	mov.w	r1, #0
 80069e8:	0299      	lsls	r1, r3, #10
 80069ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80069ee:	0290      	lsls	r0, r2, #10
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4610      	mov	r0, r2
 80069f6:	4619      	mov	r1, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	f7fa f8ac 	bl	8000b5c <__aeabi_uldivmod>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4613      	mov	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	3301      	adds	r3, #1
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	60bb      	str	r3, [r7, #8]
      break;
 8006a26:	e002      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a28:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a2a:	60bb      	str	r3, [r7, #8]
      break;
 8006a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	00f42400 	.word	0x00f42400
 8006a44:	007a1200 	.word	0x007a1200

08006a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a4c:	4b03      	ldr	r3, [pc, #12]	; (8006a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000000 	.word	0x20000000

08006a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a64:	f7ff fff0 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	0a9b      	lsrs	r3, r3, #10
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	4903      	ldr	r1, [pc, #12]	; (8006a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a76:	5ccb      	ldrb	r3, [r1, r3]
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40023800 	.word	0x40023800
 8006a84:	080100a0 	.word	0x080100a0

08006a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a8c:	f7ff ffdc 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a90:	4602      	mov	r2, r0
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	0b5b      	lsrs	r3, r3, #13
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	4903      	ldr	r1, [pc, #12]	; (8006aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a9e:	5ccb      	ldrb	r3, [r1, r3]
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	080100a0 	.word	0x080100a0

08006ab0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	220f      	movs	r2, #15
 8006abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ac0:	4b12      	ldr	r3, [pc, #72]	; (8006b0c <HAL_RCC_GetClockConfig+0x5c>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f003 0203 	and.w	r2, r3, #3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <HAL_RCC_GetClockConfig+0x5c>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <HAL_RCC_GetClockConfig+0x5c>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ae4:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <HAL_RCC_GetClockConfig+0x5c>)
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	08db      	lsrs	r3, r3, #3
 8006aea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006af2:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <HAL_RCC_GetClockConfig+0x60>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0207 	and.w	r2, r3, #7
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	601a      	str	r2, [r3, #0]
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	40023c00 	.word	0x40023c00

08006b14 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d105      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d035      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b3c:	4b62      	ldr	r3, [pc, #392]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b42:	f7fb fb75 	bl	8002230 <HAL_GetTick>
 8006b46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b48:	e008      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b4a:	f7fb fb71 	bl	8002230 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e0b0      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b5c:	4b5b      	ldr	r3, [pc, #364]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1f0      	bne.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	019a      	lsls	r2, r3, #6
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	071b      	lsls	r3, r3, #28
 8006b74:	4955      	ldr	r1, [pc, #340]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b7c:	4b52      	ldr	r3, [pc, #328]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b82:	f7fb fb55 	bl	8002230 <HAL_GetTick>
 8006b86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b88:	e008      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b8a:	f7fb fb51 	bl	8002230 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e090      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b9c:	4b4b      	ldr	r3, [pc, #300]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0f0      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 8083 	beq.w	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	4b44      	ldr	r3, [pc, #272]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	4a43      	ldr	r2, [pc, #268]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bc6:	4b41      	ldr	r3, [pc, #260]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006bd2:	4b3f      	ldr	r3, [pc, #252]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a3e      	ldr	r2, [pc, #248]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bdc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bde:	f7fb fb27 	bl	8002230 <HAL_GetTick>
 8006be2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006be6:	f7fb fb23 	bl	8002230 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e062      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bf8:	4b35      	ldr	r3, [pc, #212]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0f0      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c04:	4b31      	ldr	r3, [pc, #196]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02f      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d028      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c22:	4b2a      	ldr	r3, [pc, #168]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c2c:	4b29      	ldr	r3, [pc, #164]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c2e:	2201      	movs	r2, #1
 8006c30:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c32:	4b28      	ldr	r3, [pc, #160]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c38:	4a24      	ldr	r2, [pc, #144]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c3e:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d114      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c4a:	f7fb faf1 	bl	8002230 <HAL_GetTick>
 8006c4e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c50:	e00a      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c52:	f7fb faed 	bl	8002230 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e02a      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c68:	4b18      	ldr	r3, [pc, #96]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d0ee      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c80:	d10d      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006c82:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c96:	490d      	ldr	r1, [pc, #52]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	608b      	str	r3, [r1, #8]
 8006c9c:	e005      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c9e:	4b0b      	ldr	r3, [pc, #44]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	4a0a      	ldr	r2, [pc, #40]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ca8:	6093      	str	r3, [r2, #8]
 8006caa:	4b08      	ldr	r3, [pc, #32]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cb6:	4905      	ldr	r1, [pc, #20]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	42470068 	.word	0x42470068
 8006ccc:	40023800 	.word	0x40023800
 8006cd0:	40007000 	.word	0x40007000
 8006cd4:	42470e40 	.word	0x42470e40

08006cd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d13e      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006cf6:	4b23      	ldr	r3, [pc, #140]	; (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d005      	beq.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d12f      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d0c:	4b1e      	ldr	r3, [pc, #120]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d0e:	617b      	str	r3, [r7, #20]
          break;
 8006d10:	e02f      	b.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d12:	4b1c      	ldr	r3, [pc, #112]	; (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d1e:	d108      	bne.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d20:	4b18      	ldr	r3, [pc, #96]	; (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d28:	4a18      	ldr	r2, [pc, #96]	; (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2e:	613b      	str	r3, [r7, #16]
 8006d30:	e007      	b.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d32:	4b14      	ldr	r3, [pc, #80]	; (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d3a:	4a15      	ldr	r2, [pc, #84]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d40:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006d42:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d48:	099b      	lsrs	r3, r3, #6
 8006d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	fb02 f303 	mul.w	r3, r2, r3
 8006d54:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d56:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d5c:	0f1b      	lsrs	r3, r3, #28
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d68:	617b      	str	r3, [r7, #20]
          break;
 8006d6a:	e002      	b.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]
          break;
 8006d70:	bf00      	nop
        }
      }
      break;
 8006d72:	bf00      	nop
    }
  }
  return frequency;
 8006d74:	697b      	ldr	r3, [r7, #20]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40023800 	.word	0x40023800
 8006d88:	00bb8000 	.word	0x00bb8000
 8006d8c:	007a1200 	.word	0x007a1200
 8006d90:	00f42400 	.word	0x00f42400

08006d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e07b      	b.n	8006e9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d108      	bne.n	8006dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006db6:	d009      	beq.n	8006dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	61da      	str	r2, [r3, #28]
 8006dbe:	e005      	b.n	8006dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fb f84c 	bl	8001e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e14:	431a      	orrs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e50:	ea42 0103 	orr.w	r1, r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	0c1b      	lsrs	r3, r3, #16
 8006e6a:	f003 0104 	and.w	r1, r3, #4
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	f003 0210 	and.w	r2, r3, #16
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e041      	b.n	8006f3c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d106      	bne.n	8006ed2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f839 	bl	8006f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	f000 f9d7 	bl	8007298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d001      	beq.n	8006f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e04e      	b.n	800700e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0201 	orr.w	r2, r2, #1
 8006f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a23      	ldr	r2, [pc, #140]	; (800701c <HAL_TIM_Base_Start_IT+0xc4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d022      	beq.n	8006fd8 <HAL_TIM_Base_Start_IT+0x80>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9a:	d01d      	beq.n	8006fd8 <HAL_TIM_Base_Start_IT+0x80>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a1f      	ldr	r2, [pc, #124]	; (8007020 <HAL_TIM_Base_Start_IT+0xc8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d018      	beq.n	8006fd8 <HAL_TIM_Base_Start_IT+0x80>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a1e      	ldr	r2, [pc, #120]	; (8007024 <HAL_TIM_Base_Start_IT+0xcc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d013      	beq.n	8006fd8 <HAL_TIM_Base_Start_IT+0x80>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a1c      	ldr	r2, [pc, #112]	; (8007028 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d00e      	beq.n	8006fd8 <HAL_TIM_Base_Start_IT+0x80>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a1b      	ldr	r2, [pc, #108]	; (800702c <HAL_TIM_Base_Start_IT+0xd4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d009      	beq.n	8006fd8 <HAL_TIM_Base_Start_IT+0x80>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a19      	ldr	r2, [pc, #100]	; (8007030 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d004      	beq.n	8006fd8 <HAL_TIM_Base_Start_IT+0x80>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a18      	ldr	r2, [pc, #96]	; (8007034 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d111      	bne.n	8006ffc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b06      	cmp	r3, #6
 8006fe8:	d010      	beq.n	800700c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffa:	e007      	b.n	800700c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40010000 	.word	0x40010000
 8007020:	40000400 	.word	0x40000400
 8007024:	40000800 	.word	0x40000800
 8007028:	40000c00 	.word	0x40000c00
 800702c:	40010400 	.word	0x40010400
 8007030:	40014000 	.word	0x40014000
 8007034:	40001800 	.word	0x40001800

08007038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b02      	cmp	r3, #2
 800704c:	d122      	bne.n	8007094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b02      	cmp	r3, #2
 800705a:	d11b      	bne.n	8007094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0202 	mvn.w	r2, #2
 8007064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f8ee 	bl	800725c <HAL_TIM_IC_CaptureCallback>
 8007080:	e005      	b.n	800708e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f8e0 	bl	8007248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f8f1 	bl	8007270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d122      	bne.n	80070e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d11b      	bne.n	80070e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0204 	mvn.w	r2, #4
 80070b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2202      	movs	r2, #2
 80070be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f8c4 	bl	800725c <HAL_TIM_IC_CaptureCallback>
 80070d4:	e005      	b.n	80070e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f8b6 	bl	8007248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f8c7 	bl	8007270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 0308 	and.w	r3, r3, #8
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d122      	bne.n	800713c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b08      	cmp	r3, #8
 8007102:	d11b      	bne.n	800713c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0208 	mvn.w	r2, #8
 800710c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2204      	movs	r2, #4
 8007112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f89a 	bl	800725c <HAL_TIM_IC_CaptureCallback>
 8007128:	e005      	b.n	8007136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f88c 	bl	8007248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f89d 	bl	8007270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0310 	and.w	r3, r3, #16
 8007146:	2b10      	cmp	r3, #16
 8007148:	d122      	bne.n	8007190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b10      	cmp	r3, #16
 8007156:	d11b      	bne.n	8007190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0210 	mvn.w	r2, #16
 8007160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2208      	movs	r2, #8
 8007166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f870 	bl	800725c <HAL_TIM_IC_CaptureCallback>
 800717c:	e005      	b.n	800718a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f862 	bl	8007248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f873 	bl	8007270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b01      	cmp	r3, #1
 800719c:	d10e      	bne.n	80071bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d107      	bne.n	80071bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0201 	mvn.w	r2, #1
 80071b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7fa f980 	bl	80014bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c6:	2b80      	cmp	r3, #128	; 0x80
 80071c8:	d10e      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d4:	2b80      	cmp	r3, #128	; 0x80
 80071d6:	d107      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f902 	bl	80073ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f2:	2b40      	cmp	r3, #64	; 0x40
 80071f4:	d10e      	bne.n	8007214 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b40      	cmp	r3, #64	; 0x40
 8007202:	d107      	bne.n	8007214 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800720c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f838 	bl	8007284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b20      	cmp	r3, #32
 8007220:	d10e      	bne.n	8007240 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b20      	cmp	r3, #32
 800722e:	d107      	bne.n	8007240 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 0220 	mvn.w	r2, #32
 8007238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f8cc 	bl	80073d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a40      	ldr	r2, [pc, #256]	; (80073ac <TIM_Base_SetConfig+0x114>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d013      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b6:	d00f      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a3d      	ldr	r2, [pc, #244]	; (80073b0 <TIM_Base_SetConfig+0x118>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00b      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a3c      	ldr	r2, [pc, #240]	; (80073b4 <TIM_Base_SetConfig+0x11c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d007      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a3b      	ldr	r2, [pc, #236]	; (80073b8 <TIM_Base_SetConfig+0x120>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d003      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a3a      	ldr	r2, [pc, #232]	; (80073bc <TIM_Base_SetConfig+0x124>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d108      	bne.n	80072ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a2f      	ldr	r2, [pc, #188]	; (80073ac <TIM_Base_SetConfig+0x114>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d02b      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f8:	d027      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a2c      	ldr	r2, [pc, #176]	; (80073b0 <TIM_Base_SetConfig+0x118>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d023      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a2b      	ldr	r2, [pc, #172]	; (80073b4 <TIM_Base_SetConfig+0x11c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d01f      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a2a      	ldr	r2, [pc, #168]	; (80073b8 <TIM_Base_SetConfig+0x120>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d01b      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a29      	ldr	r2, [pc, #164]	; (80073bc <TIM_Base_SetConfig+0x124>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d017      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a28      	ldr	r2, [pc, #160]	; (80073c0 <TIM_Base_SetConfig+0x128>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d013      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a27      	ldr	r2, [pc, #156]	; (80073c4 <TIM_Base_SetConfig+0x12c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00f      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a26      	ldr	r2, [pc, #152]	; (80073c8 <TIM_Base_SetConfig+0x130>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00b      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a25      	ldr	r2, [pc, #148]	; (80073cc <TIM_Base_SetConfig+0x134>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d007      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a24      	ldr	r2, [pc, #144]	; (80073d0 <TIM_Base_SetConfig+0x138>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d003      	beq.n	800734a <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a23      	ldr	r2, [pc, #140]	; (80073d4 <TIM_Base_SetConfig+0x13c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d108      	bne.n	800735c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <TIM_Base_SetConfig+0x114>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d003      	beq.n	8007390 <TIM_Base_SetConfig+0xf8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a0c      	ldr	r2, [pc, #48]	; (80073bc <TIM_Base_SetConfig+0x124>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d103      	bne.n	8007398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	615a      	str	r2, [r3, #20]
}
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40010000 	.word	0x40010000
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40000800 	.word	0x40000800
 80073b8:	40000c00 	.word	0x40000c00
 80073bc:	40010400 	.word	0x40010400
 80073c0:	40014000 	.word	0x40014000
 80073c4:	40014400 	.word	0x40014400
 80073c8:	40014800 	.word	0x40014800
 80073cc:	40001800 	.word	0x40001800
 80073d0:	40001c00 	.word	0x40001c00
 80073d4:	40002000 	.word	0x40002000

080073d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e03f      	b.n	8007492 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d106      	bne.n	800742c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fa fd74 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2224      	movs	r2, #36	; 0x24
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fb3f 	bl	8007ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691a      	ldr	r2, [r3, #16]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	695a      	ldr	r2, [r3, #20]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	; 0x28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80074bc:	2300      	movs	r3, #0
 80074be:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10d      	bne.n	80074ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <HAL_UART_IRQHandler+0x52>
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa57 	bl	800799a <UART_Receive_IT>
      return;
 80074ec:	e17c      	b.n	80077e8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 80b1 	beq.w	8007658 <HAL_UART_IRQHandler+0x1bc>
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <HAL_UART_IRQHandler+0x70>
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 80a6 	beq.w	8007658 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <HAL_UART_IRQHandler+0x90>
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	f043 0201 	orr.w	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <HAL_UART_IRQHandler+0xb0>
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	f043 0202 	orr.w	r2, r3, #2
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <HAL_UART_IRQHandler+0xd0>
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	f043 0204 	orr.w	r2, r3, #4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00f      	beq.n	8007596 <HAL_UART_IRQHandler+0xfa>
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d104      	bne.n	800758a <HAL_UART_IRQHandler+0xee>
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d005      	beq.n	8007596 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f043 0208 	orr.w	r2, r3, #8
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 811f 	beq.w	80077de <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d007      	beq.n	80075ba <HAL_UART_IRQHandler+0x11e>
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	f003 0320 	and.w	r3, r3, #32
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f9f0 	bl	800799a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	2b40      	cmp	r3, #64	; 0x40
 80075c6:	bf0c      	ite	eq
 80075c8:	2301      	moveq	r3, #1
 80075ca:	2300      	movne	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d102      	bne.n	80075e2 <HAL_UART_IRQHandler+0x146>
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d031      	beq.n	8007646 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f930 	bl	8007848 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f2:	2b40      	cmp	r3, #64	; 0x40
 80075f4:	d123      	bne.n	800763e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	695a      	ldr	r2, [r3, #20]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007604:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760a:	2b00      	cmp	r3, #0
 800760c:	d013      	beq.n	8007636 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	4a77      	ldr	r2, [pc, #476]	; (80077f0 <HAL_UART_IRQHandler+0x354>)
 8007614:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	4618      	mov	r0, r3
 800761c:	f7fa ff8a 	bl	8002534 <HAL_DMA_Abort_IT>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d016      	beq.n	8007654 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007634:	e00e      	b.n	8007654 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f8f0 	bl	800781c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763c:	e00a      	b.n	8007654 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f8ec 	bl	800781c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007644:	e006      	b.n	8007654 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f8e8 	bl	800781c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007652:	e0c4      	b.n	80077de <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007654:	bf00      	nop
    return;
 8007656:	e0c2      	b.n	80077de <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765c:	2b01      	cmp	r3, #1
 800765e:	f040 80a2 	bne.w	80077a6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	f003 0310 	and.w	r3, r3, #16
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 809c 	beq.w	80077a6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 8096 	beq.w	80077a6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769a:	2b40      	cmp	r3, #64	; 0x40
 800769c:	d14f      	bne.n	800773e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80076a8:	8a3b      	ldrh	r3, [r7, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 8099 	beq.w	80077e2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076b4:	8a3a      	ldrh	r2, [r7, #16]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	f080 8093 	bcs.w	80077e2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8a3a      	ldrh	r2, [r7, #16]
 80076c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076cc:	d02b      	beq.n	8007726 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076dc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695a      	ldr	r2, [r3, #20]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0201 	bic.w	r2, r2, #1
 80076ec:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	695a      	ldr	r2, [r3, #20]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076fc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0210 	bic.w	r2, r2, #16
 800771a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007720:	4618      	mov	r0, r3
 8007722:	f7fa fe97 	bl	8002454 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800772e:	b29b      	uxth	r3, r3
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	b29b      	uxth	r3, r3
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f87a 	bl	8007830 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800773c:	e051      	b.n	80077e2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007746:	b29b      	uxth	r3, r3
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d047      	beq.n	80077e6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007756:	8a7b      	ldrh	r3, [r7, #18]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d044      	beq.n	80077e6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68da      	ldr	r2, [r3, #12]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800776a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0201 	bic.w	r2, r2, #1
 800777a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68da      	ldr	r2, [r3, #12]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0210 	bic.w	r2, r2, #16
 8007798:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800779a:	8a7b      	ldrh	r3, [r7, #18]
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f846 	bl	8007830 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80077a4:	e01f      	b.n	80077e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d008      	beq.n	80077c2 <HAL_UART_IRQHandler+0x326>
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f885 	bl	80078ca <UART_Transmit_IT>
    return;
 80077c0:	e012      	b.n	80077e8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00d      	beq.n	80077e8 <HAL_UART_IRQHandler+0x34c>
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d008      	beq.n	80077e8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f8c7 	bl	800796a <UART_EndTransmit_IT>
    return;
 80077dc:	e004      	b.n	80077e8 <HAL_UART_IRQHandler+0x34c>
    return;
 80077de:	bf00      	nop
 80077e0:	e002      	b.n	80077e8 <HAL_UART_IRQHandler+0x34c>
      return;
 80077e2:	bf00      	nop
 80077e4:	e000      	b.n	80077e8 <HAL_UART_IRQHandler+0x34c>
      return;
 80077e6:	bf00      	nop
  }
}
 80077e8:	3728      	adds	r7, #40	; 0x28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	080078a3 	.word	0x080078a3

080077f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	460b      	mov	r3, r1
 800783a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800785e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695a      	ldr	r2, [r3, #20]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0201 	bic.w	r2, r2, #1
 800786e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007874:	2b01      	cmp	r3, #1
 8007876:	d107      	bne.n	8007888 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0210 	bic.w	r2, r2, #16
 8007886:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2220      	movs	r2, #32
 800788c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7ff ffad 	bl	800781c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b085      	sub	sp, #20
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b21      	cmp	r3, #33	; 0x21
 80078dc:	d13e      	bne.n	800795c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e6:	d114      	bne.n	8007912 <UART_Transmit_IT+0x48>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d110      	bne.n	8007912 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007904:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	1c9a      	adds	r2, r3, #2
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	621a      	str	r2, [r3, #32]
 8007910:	e008      	b.n	8007924 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	1c59      	adds	r1, r3, #1
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6211      	str	r1, [r2, #32]
 800791c:	781a      	ldrb	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007928:	b29b      	uxth	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	b29b      	uxth	r3, r3
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	4619      	mov	r1, r3
 8007932:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10f      	bne.n	8007958 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007946:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007956:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	e000      	b.n	800795e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800795c:	2302      	movs	r3, #2
  }
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007980:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2220      	movs	r2, #32
 8007986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff ff32 	bl	80077f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b22      	cmp	r3, #34	; 0x22
 80079ac:	f040 8087 	bne.w	8007abe <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b8:	d117      	bne.n	80079ea <UART_Receive_IT+0x50>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d113      	bne.n	80079ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ca:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e2:	1c9a      	adds	r2, r3, #2
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	629a      	str	r2, [r3, #40]	; 0x28
 80079e8:	e026      	b.n	8007a38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ee:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80079f0:	2300      	movs	r3, #0
 80079f2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079fc:	d007      	beq.n	8007a0e <UART_Receive_IT+0x74>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <UART_Receive_IT+0x82>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	701a      	strb	r2, [r3, #0]
 8007a1a:	e008      	b.n	8007a2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	4619      	mov	r1, r3
 8007a46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d136      	bne.n	8007aba <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 0220 	bic.w	r2, r2, #32
 8007a5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	695a      	ldr	r2, [r3, #20]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0201 	bic.w	r2, r2, #1
 8007a7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d10e      	bne.n	8007aaa <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0210 	bic.w	r2, r2, #16
 8007a9a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fec4 	bl	8007830 <HAL_UARTEx_RxEventCallback>
 8007aa8:	e002      	b.n	8007ab0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff feac 	bl	8007808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e002      	b.n	8007ac0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	e000      	b.n	8007ac0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007abe:	2302      	movs	r3, #2
  }
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	b09f      	sub	sp, #124	; 0x7c
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ade:	68d9      	ldr	r1, [r3, #12]
 8007ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	ea40 0301 	orr.w	r3, r0, r1
 8007ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	431a      	orrs	r2, r3
 8007af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	431a      	orrs	r2, r3
 8007afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b0c:	f021 010c 	bic.w	r1, r1, #12
 8007b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b16:	430b      	orrs	r3, r1
 8007b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b26:	6999      	ldr	r1, [r3, #24]
 8007b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	ea40 0301 	orr.w	r3, r0, r1
 8007b30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	4bc5      	ldr	r3, [pc, #788]	; (8007e4c <UART_SetConfig+0x384>)
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d004      	beq.n	8007b46 <UART_SetConfig+0x7e>
 8007b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	4bc3      	ldr	r3, [pc, #780]	; (8007e50 <UART_SetConfig+0x388>)
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d103      	bne.n	8007b4e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b46:	f7fe ff9f 	bl	8006a88 <HAL_RCC_GetPCLK2Freq>
 8007b4a:	6778      	str	r0, [r7, #116]	; 0x74
 8007b4c:	e002      	b.n	8007b54 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b4e:	f7fe ff87 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 8007b52:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b5c:	f040 80b6 	bne.w	8007ccc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b62:	461c      	mov	r4, r3
 8007b64:	f04f 0500 	mov.w	r5, #0
 8007b68:	4622      	mov	r2, r4
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	1891      	adds	r1, r2, r2
 8007b6e:	6439      	str	r1, [r7, #64]	; 0x40
 8007b70:	415b      	adcs	r3, r3
 8007b72:	647b      	str	r3, [r7, #68]	; 0x44
 8007b74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b78:	1912      	adds	r2, r2, r4
 8007b7a:	eb45 0303 	adc.w	r3, r5, r3
 8007b7e:	f04f 0000 	mov.w	r0, #0
 8007b82:	f04f 0100 	mov.w	r1, #0
 8007b86:	00d9      	lsls	r1, r3, #3
 8007b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b8c:	00d0      	lsls	r0, r2, #3
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	1911      	adds	r1, r2, r4
 8007b94:	6639      	str	r1, [r7, #96]	; 0x60
 8007b96:	416b      	adcs	r3, r5
 8007b98:	667b      	str	r3, [r7, #100]	; 0x64
 8007b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f04f 0300 	mov.w	r3, #0
 8007ba4:	1891      	adds	r1, r2, r2
 8007ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ba8:	415b      	adcs	r3, r3
 8007baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007bb0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007bb4:	f7f8 ffd2 	bl	8000b5c <__aeabi_uldivmod>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4ba5      	ldr	r3, [pc, #660]	; (8007e54 <UART_SetConfig+0x38c>)
 8007bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007bc2:	095b      	lsrs	r3, r3, #5
 8007bc4:	011e      	lsls	r6, r3, #4
 8007bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc8:	461c      	mov	r4, r3
 8007bca:	f04f 0500 	mov.w	r5, #0
 8007bce:	4622      	mov	r2, r4
 8007bd0:	462b      	mov	r3, r5
 8007bd2:	1891      	adds	r1, r2, r2
 8007bd4:	6339      	str	r1, [r7, #48]	; 0x30
 8007bd6:	415b      	adcs	r3, r3
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007bde:	1912      	adds	r2, r2, r4
 8007be0:	eb45 0303 	adc.w	r3, r5, r3
 8007be4:	f04f 0000 	mov.w	r0, #0
 8007be8:	f04f 0100 	mov.w	r1, #0
 8007bec:	00d9      	lsls	r1, r3, #3
 8007bee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bf2:	00d0      	lsls	r0, r2, #3
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	1911      	adds	r1, r2, r4
 8007bfa:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bfc:	416b      	adcs	r3, r5
 8007bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	461a      	mov	r2, r3
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	1891      	adds	r1, r2, r2
 8007c0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c0e:	415b      	adcs	r3, r3
 8007c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c1a:	f7f8 ff9f 	bl	8000b5c <__aeabi_uldivmod>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4b8c      	ldr	r3, [pc, #560]	; (8007e54 <UART_SetConfig+0x38c>)
 8007c24:	fba3 1302 	umull	r1, r3, r3, r2
 8007c28:	095b      	lsrs	r3, r3, #5
 8007c2a:	2164      	movs	r1, #100	; 0x64
 8007c2c:	fb01 f303 	mul.w	r3, r1, r3
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	3332      	adds	r3, #50	; 0x32
 8007c36:	4a87      	ldr	r2, [pc, #540]	; (8007e54 <UART_SetConfig+0x38c>)
 8007c38:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c44:	441e      	add	r6, r3
 8007c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f04f 0100 	mov.w	r1, #0
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	1894      	adds	r4, r2, r2
 8007c54:	623c      	str	r4, [r7, #32]
 8007c56:	415b      	adcs	r3, r3
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
 8007c5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c5e:	1812      	adds	r2, r2, r0
 8007c60:	eb41 0303 	adc.w	r3, r1, r3
 8007c64:	f04f 0400 	mov.w	r4, #0
 8007c68:	f04f 0500 	mov.w	r5, #0
 8007c6c:	00dd      	lsls	r5, r3, #3
 8007c6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c72:	00d4      	lsls	r4, r2, #3
 8007c74:	4622      	mov	r2, r4
 8007c76:	462b      	mov	r3, r5
 8007c78:	1814      	adds	r4, r2, r0
 8007c7a:	653c      	str	r4, [r7, #80]	; 0x50
 8007c7c:	414b      	adcs	r3, r1
 8007c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8007c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	461a      	mov	r2, r3
 8007c86:	f04f 0300 	mov.w	r3, #0
 8007c8a:	1891      	adds	r1, r2, r2
 8007c8c:	61b9      	str	r1, [r7, #24]
 8007c8e:	415b      	adcs	r3, r3
 8007c90:	61fb      	str	r3, [r7, #28]
 8007c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c9a:	f7f8 ff5f 	bl	8000b5c <__aeabi_uldivmod>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4b6c      	ldr	r3, [pc, #432]	; (8007e54 <UART_SetConfig+0x38c>)
 8007ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca8:	095b      	lsrs	r3, r3, #5
 8007caa:	2164      	movs	r1, #100	; 0x64
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	3332      	adds	r3, #50	; 0x32
 8007cb6:	4a67      	ldr	r2, [pc, #412]	; (8007e54 <UART_SetConfig+0x38c>)
 8007cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	f003 0207 	and.w	r2, r3, #7
 8007cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4432      	add	r2, r6
 8007cc8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cca:	e0b9      	b.n	8007e40 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cce:	461c      	mov	r4, r3
 8007cd0:	f04f 0500 	mov.w	r5, #0
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	462b      	mov	r3, r5
 8007cd8:	1891      	adds	r1, r2, r2
 8007cda:	6139      	str	r1, [r7, #16]
 8007cdc:	415b      	adcs	r3, r3
 8007cde:	617b      	str	r3, [r7, #20]
 8007ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ce4:	1912      	adds	r2, r2, r4
 8007ce6:	eb45 0303 	adc.w	r3, r5, r3
 8007cea:	f04f 0000 	mov.w	r0, #0
 8007cee:	f04f 0100 	mov.w	r1, #0
 8007cf2:	00d9      	lsls	r1, r3, #3
 8007cf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cf8:	00d0      	lsls	r0, r2, #3
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	eb12 0804 	adds.w	r8, r2, r4
 8007d02:	eb43 0905 	adc.w	r9, r3, r5
 8007d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f04f 0100 	mov.w	r1, #0
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	f04f 0300 	mov.w	r3, #0
 8007d18:	008b      	lsls	r3, r1, #2
 8007d1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d1e:	0082      	lsls	r2, r0, #2
 8007d20:	4640      	mov	r0, r8
 8007d22:	4649      	mov	r1, r9
 8007d24:	f7f8 ff1a 	bl	8000b5c <__aeabi_uldivmod>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4b49      	ldr	r3, [pc, #292]	; (8007e54 <UART_SetConfig+0x38c>)
 8007d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d32:	095b      	lsrs	r3, r3, #5
 8007d34:	011e      	lsls	r6, r3, #4
 8007d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f04f 0100 	mov.w	r1, #0
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	1894      	adds	r4, r2, r2
 8007d44:	60bc      	str	r4, [r7, #8]
 8007d46:	415b      	adcs	r3, r3
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d4e:	1812      	adds	r2, r2, r0
 8007d50:	eb41 0303 	adc.w	r3, r1, r3
 8007d54:	f04f 0400 	mov.w	r4, #0
 8007d58:	f04f 0500 	mov.w	r5, #0
 8007d5c:	00dd      	lsls	r5, r3, #3
 8007d5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d62:	00d4      	lsls	r4, r2, #3
 8007d64:	4622      	mov	r2, r4
 8007d66:	462b      	mov	r3, r5
 8007d68:	1814      	adds	r4, r2, r0
 8007d6a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007d6c:	414b      	adcs	r3, r1
 8007d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f04f 0100 	mov.w	r1, #0
 8007d7a:	f04f 0200 	mov.w	r2, #0
 8007d7e:	f04f 0300 	mov.w	r3, #0
 8007d82:	008b      	lsls	r3, r1, #2
 8007d84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d88:	0082      	lsls	r2, r0, #2
 8007d8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007d8e:	f7f8 fee5 	bl	8000b5c <__aeabi_uldivmod>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4b2f      	ldr	r3, [pc, #188]	; (8007e54 <UART_SetConfig+0x38c>)
 8007d98:	fba3 1302 	umull	r1, r3, r3, r2
 8007d9c:	095b      	lsrs	r3, r3, #5
 8007d9e:	2164      	movs	r1, #100	; 0x64
 8007da0:	fb01 f303 	mul.w	r3, r1, r3
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	011b      	lsls	r3, r3, #4
 8007da8:	3332      	adds	r3, #50	; 0x32
 8007daa:	4a2a      	ldr	r2, [pc, #168]	; (8007e54 <UART_SetConfig+0x38c>)
 8007dac:	fba2 2303 	umull	r2, r3, r2, r3
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007db6:	441e      	add	r6, r3
 8007db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f04f 0100 	mov.w	r1, #0
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	1894      	adds	r4, r2, r2
 8007dc6:	603c      	str	r4, [r7, #0]
 8007dc8:	415b      	adcs	r3, r3
 8007dca:	607b      	str	r3, [r7, #4]
 8007dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dd0:	1812      	adds	r2, r2, r0
 8007dd2:	eb41 0303 	adc.w	r3, r1, r3
 8007dd6:	f04f 0400 	mov.w	r4, #0
 8007dda:	f04f 0500 	mov.w	r5, #0
 8007dde:	00dd      	lsls	r5, r3, #3
 8007de0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007de4:	00d4      	lsls	r4, r2, #3
 8007de6:	4622      	mov	r2, r4
 8007de8:	462b      	mov	r3, r5
 8007dea:	eb12 0a00 	adds.w	sl, r2, r0
 8007dee:	eb43 0b01 	adc.w	fp, r3, r1
 8007df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f04f 0100 	mov.w	r1, #0
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	f04f 0300 	mov.w	r3, #0
 8007e04:	008b      	lsls	r3, r1, #2
 8007e06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e0a:	0082      	lsls	r2, r0, #2
 8007e0c:	4650      	mov	r0, sl
 8007e0e:	4659      	mov	r1, fp
 8007e10:	f7f8 fea4 	bl	8000b5c <__aeabi_uldivmod>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4b0e      	ldr	r3, [pc, #56]	; (8007e54 <UART_SetConfig+0x38c>)
 8007e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	2164      	movs	r1, #100	; 0x64
 8007e22:	fb01 f303 	mul.w	r3, r1, r3
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	3332      	adds	r3, #50	; 0x32
 8007e2c:	4a09      	ldr	r2, [pc, #36]	; (8007e54 <UART_SetConfig+0x38c>)
 8007e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e32:	095b      	lsrs	r3, r3, #5
 8007e34:	f003 020f 	and.w	r2, r3, #15
 8007e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4432      	add	r2, r6
 8007e3e:	609a      	str	r2, [r3, #8]
}
 8007e40:	bf00      	nop
 8007e42:	377c      	adds	r7, #124	; 0x7c
 8007e44:	46bd      	mov	sp, r7
 8007e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4a:	bf00      	nop
 8007e4c:	40011000 	.word	0x40011000
 8007e50:	40011400 	.word	0x40011400
 8007e54:	51eb851f 	.word	0x51eb851f

08007e58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e58:	b084      	sub	sp, #16
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	f107 001c 	add.w	r0, r7, #28
 8007e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d122      	bne.n	8007eb6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d105      	bne.n	8007eaa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f94a 	bl	8008144 <USB_CoreReset>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]
 8007eb4:	e01a      	b.n	8007eec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f93e 	bl	8008144 <USB_CoreReset>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	639a      	str	r2, [r3, #56]	; 0x38
 8007ede:	e005      	b.n	8007eec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d10b      	bne.n	8007f0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f043 0206 	orr.w	r2, r3, #6
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f043 0220 	orr.w	r2, r3, #32
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f16:	b004      	add	sp, #16
 8007f18:	4770      	bx	lr

08007f1a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f043 0201 	orr.w	r2, r3, #1
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f023 0201 	bic.w	r2, r3, #1
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	460b      	mov	r3, r1
 8007f68:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f76:	78fb      	ldrb	r3, [r7, #3]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d106      	bne.n	8007f8a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60da      	str	r2, [r3, #12]
 8007f88:	e00b      	b.n	8007fa2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d106      	bne.n	8007f9e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	60da      	str	r2, [r3, #12]
 8007f9c:	e001      	b.n	8007fa2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e003      	b.n	8007faa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007fa2:	2032      	movs	r0, #50	; 0x32
 8007fa4:	f7fa f950 	bl	8002248 <HAL_Delay>

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	019b      	lsls	r3, r3, #6
 8007fc6:	f043 0220 	orr.w	r2, r3, #32
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4a09      	ldr	r2, [pc, #36]	; (8007ffc <USB_FlushTxFifo+0x48>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d901      	bls.n	8007fe0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e006      	b.n	8007fee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	f003 0320 	and.w	r3, r3, #32
 8007fe8:	2b20      	cmp	r3, #32
 8007fea:	d0f0      	beq.n	8007fce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	00030d40 	.word	0x00030d40

08008000 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2210      	movs	r2, #16
 8008010:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3301      	adds	r3, #1
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4a09      	ldr	r2, [pc, #36]	; (8008040 <USB_FlushRxFifo+0x40>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d901      	bls.n	8008024 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e006      	b.n	8008032 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	f003 0310 	and.w	r3, r3, #16
 800802c:	2b10      	cmp	r3, #16
 800802e:	d0f0      	beq.n	8008012 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	00030d40 	.word	0x00030d40

08008044 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008044:	b480      	push	{r7}
 8008046:	b089      	sub	sp, #36	; 0x24
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	4611      	mov	r1, r2
 8008050:	461a      	mov	r2, r3
 8008052:	460b      	mov	r3, r1
 8008054:	71fb      	strb	r3, [r7, #7]
 8008056:	4613      	mov	r3, r2
 8008058:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008062:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008066:	2b00      	cmp	r3, #0
 8008068:	d11a      	bne.n	80080a0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800806a:	88bb      	ldrh	r3, [r7, #4]
 800806c:	3303      	adds	r3, #3
 800806e:	089b      	lsrs	r3, r3, #2
 8008070:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008072:	2300      	movs	r3, #0
 8008074:	61bb      	str	r3, [r7, #24]
 8008076:	e00f      	b.n	8008098 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	031a      	lsls	r2, r3, #12
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	4413      	add	r3, r2
 8008080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008084:	461a      	mov	r2, r3
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	3304      	adds	r3, #4
 8008090:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	3301      	adds	r3, #1
 8008096:	61bb      	str	r3, [r7, #24]
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	429a      	cmp	r2, r3
 800809e:	d3eb      	bcc.n	8008078 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3724      	adds	r7, #36	; 0x24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b089      	sub	sp, #36	; 0x24
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	4613      	mov	r3, r2
 80080ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	3303      	adds	r3, #3
 80080c8:	089b      	lsrs	r3, r3, #2
 80080ca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80080cc:	2300      	movs	r3, #0
 80080ce:	61bb      	str	r3, [r7, #24]
 80080d0:	e00b      	b.n	80080ea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	601a      	str	r2, [r3, #0]
    pDest++;
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	3304      	adds	r3, #4
 80080e2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	3301      	adds	r3, #1
 80080e8:	61bb      	str	r3, [r7, #24]
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d3ef      	bcc.n	80080d2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80080f2:	69fb      	ldr	r3, [r7, #28]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3724      	adds	r7, #36	; 0x24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4013      	ands	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008118:	68fb      	ldr	r3, [r7, #12]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	f003 0301 	and.w	r3, r3, #1
}
 8008136:	4618      	mov	r0, r3
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
	...

08008144 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3301      	adds	r3, #1
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4a13      	ldr	r2, [pc, #76]	; (80081a8 <USB_CoreReset+0x64>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d901      	bls.n	8008162 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e01b      	b.n	800819a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	daf2      	bge.n	8008150 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f043 0201 	orr.w	r2, r3, #1
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	3301      	adds	r3, #1
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4a09      	ldr	r2, [pc, #36]	; (80081a8 <USB_CoreReset+0x64>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d901      	bls.n	800818c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e006      	b.n	800819a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b01      	cmp	r3, #1
 8008196:	d0f0      	beq.n	800817a <USB_CoreReset+0x36>

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	00030d40 	.word	0x00030d40

080081ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081ac:	b084      	sub	sp, #16
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	f107 001c 	add.w	r0, r7, #28
 80081ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081c8:	461a      	mov	r2, r3
 80081ca:	2300      	movs	r3, #0
 80081cc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081de:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d018      	beq.n	8008230 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	2b01      	cmp	r3, #1
 8008202:	d10a      	bne.n	800821a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008212:	f043 0304 	orr.w	r3, r3, #4
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	e014      	b.n	8008244 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008228:	f023 0304 	bic.w	r3, r3, #4
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	e009      	b.n	8008244 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800823e:	f023 0304 	bic.w	r3, r3, #4
 8008242:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008244:	2110      	movs	r1, #16
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff feb4 	bl	8007fb4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7ff fed7 	bl	8008000 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]
 8008256:	e015      	b.n	8008284 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	4413      	add	r3, r2
 8008260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008264:	461a      	mov	r2, r3
 8008266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800826a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4413      	add	r3, r2
 8008274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008278:	461a      	mov	r2, r3
 800827a:	2300      	movs	r3, #0
 800827c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3301      	adds	r3, #1
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	429a      	cmp	r2, r3
 800828a:	d3e5      	bcc.n	8008258 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800828c:	2101      	movs	r1, #1
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f8ac 	bl	80083ec <USB_DriveVbus>

  HAL_Delay(200U);
 8008294:	20c8      	movs	r0, #200	; 0xc8
 8008296:	f7f9 ffd7 	bl	8002248 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082a6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00b      	beq.n	80082cc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a14      	ldr	r2, [pc, #80]	; (8008310 <USB_HostInit+0x164>)
 80082c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a13      	ldr	r2, [pc, #76]	; (8008314 <USB_HostInit+0x168>)
 80082c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80082ca:	e009      	b.n	80082e0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2280      	movs	r2, #128	; 0x80
 80082d0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a10      	ldr	r2, [pc, #64]	; (8008318 <USB_HostInit+0x16c>)
 80082d6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a10      	ldr	r2, [pc, #64]	; (800831c <USB_HostInit+0x170>)
 80082dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d105      	bne.n	80082f2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	f043 0210 	orr.w	r2, r3, #16
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699a      	ldr	r2, [r3, #24]
 80082f6:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <USB_HostInit+0x174>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800830a:	b004      	add	sp, #16
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	01000200 	.word	0x01000200
 8008314:	00e00300 	.word	0x00e00300
 8008318:	00600080 	.word	0x00600080
 800831c:	004000e0 	.word	0x004000e0
 8008320:	a3200008 	.word	0xa3200008

08008324 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008342:	f023 0303 	bic.w	r3, r3, #3
 8008346:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	68f9      	ldr	r1, [r7, #12]
 8008358:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800835c:	4313      	orrs	r3, r2
 800835e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d107      	bne.n	8008376 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800836c:	461a      	mov	r2, r3
 800836e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008372:	6053      	str	r3, [r2, #4]
 8008374:	e009      	b.n	800838a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008376:	78fb      	ldrb	r3, [r7, #3]
 8008378:	2b02      	cmp	r3, #2
 800837a:	d106      	bne.n	800838a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008382:	461a      	mov	r2, r3
 8008384:	f241 7370 	movw	r3, #6000	; 0x1770
 8008388:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80083b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80083c8:	2064      	movs	r0, #100	; 0x64
 80083ca:	f7f9 ff3d 	bl	8002248 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083da:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80083dc:	200a      	movs	r0, #10
 80083de:	f7f9 ff33 	bl	8002248 <HAL_Delay>

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008410:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d109      	bne.n	8008430 <USB_DriveVbus+0x44>
 800841c:	78fb      	ldrb	r3, [r7, #3]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d106      	bne.n	8008430 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800842a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800842e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843a:	d109      	bne.n	8008450 <USB_DriveVbus+0x64>
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d106      	bne.n	8008450 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800844a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800844e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800845e:	b480      	push	{r7}
 8008460:	b085      	sub	sp, #20
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	0c5b      	lsrs	r3, r3, #17
 800847c:	f003 0303 	and.w	r3, r3, #3
}
 8008480:	4618      	mov	r0, r3
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	b29b      	uxth	r3, r3
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
	...

080084b0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	4608      	mov	r0, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	461a      	mov	r2, r3
 80084be:	4603      	mov	r3, r0
 80084c0:	70fb      	strb	r3, [r7, #3]
 80084c2:	460b      	mov	r3, r1
 80084c4:	70bb      	strb	r3, [r7, #2]
 80084c6:	4613      	mov	r3, r2
 80084c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80084d2:	78fb      	ldrb	r3, [r7, #3]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084de:	461a      	mov	r2, r3
 80084e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084e4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80084e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d87e      	bhi.n	80085ec <USB_HC_Init+0x13c>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <USB_HC_Init+0x44>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008505 	.word	0x08008505
 80084f8:	080085af 	.word	0x080085af
 80084fc:	08008505 	.word	0x08008505
 8008500:	08008571 	.word	0x08008571
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008504:	78fb      	ldrb	r3, [r7, #3]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	4413      	add	r3, r2
 800850c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008510:	461a      	mov	r2, r3
 8008512:	f240 439d 	movw	r3, #1181	; 0x49d
 8008516:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008518:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800851c:	2b00      	cmp	r3, #0
 800851e:	da10      	bge.n	8008542 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008520:	78fb      	ldrb	r3, [r7, #3]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	4413      	add	r3, r2
 8008528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	0151      	lsls	r1, r2, #5
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	440a      	add	r2, r1
 8008536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800853a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800853e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008540:	e057      	b.n	80085f2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854a:	2b00      	cmp	r3, #0
 800854c:	d051      	beq.n	80085f2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	4413      	add	r3, r2
 8008556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	78fa      	ldrb	r2, [r7, #3]
 800855e:	0151      	lsls	r1, r2, #5
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	440a      	add	r2, r1
 8008564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008568:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800856c:	60d3      	str	r3, [r2, #12]
      break;
 800856e:	e040      	b.n	80085f2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	4413      	add	r3, r2
 8008578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857c:	461a      	mov	r2, r3
 800857e:	f240 639d 	movw	r3, #1693	; 0x69d
 8008582:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008584:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008588:	2b00      	cmp	r3, #0
 800858a:	da34      	bge.n	80085f6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	4413      	add	r3, r2
 8008594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	78fa      	ldrb	r2, [r7, #3]
 800859c:	0151      	lsls	r1, r2, #5
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	440a      	add	r2, r1
 80085a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80085ac:	e023      	b.n	80085f6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ba:	461a      	mov	r2, r3
 80085bc:	f240 2325 	movw	r3, #549	; 0x225
 80085c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	da17      	bge.n	80085fa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	78fa      	ldrb	r2, [r7, #3]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085e4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80085e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80085ea:	e006      	b.n	80085fa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	77fb      	strb	r3, [r7, #31]
      break;
 80085f0:	e004      	b.n	80085fc <USB_HC_Init+0x14c>
      break;
 80085f2:	bf00      	nop
 80085f4:	e002      	b.n	80085fc <USB_HC_Init+0x14c>
      break;
 80085f6:	bf00      	nop
 80085f8:	e000      	b.n	80085fc <USB_HC_Init+0x14c>
      break;
 80085fa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	78fb      	ldrb	r3, [r7, #3]
 8008606:	f003 030f 	and.w	r3, r3, #15
 800860a:	2101      	movs	r1, #1
 800860c:	fa01 f303 	lsl.w	r3, r1, r3
 8008610:	6939      	ldr	r1, [r7, #16]
 8008612:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008616:	4313      	orrs	r3, r2
 8008618:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008626:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800862a:	2b00      	cmp	r3, #0
 800862c:	da03      	bge.n	8008636 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800862e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008632:	61bb      	str	r3, [r7, #24]
 8008634:	e001      	b.n	800863a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7ff ff0f 	bl	800845e <USB_GetHostSpeed>
 8008640:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008642:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008646:	2b02      	cmp	r3, #2
 8008648:	d106      	bne.n	8008658 <USB_HC_Init+0x1a8>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b02      	cmp	r3, #2
 800864e:	d003      	beq.n	8008658 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008654:	617b      	str	r3, [r7, #20]
 8008656:	e001      	b.n	800865c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008658:	2300      	movs	r3, #0
 800865a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800865c:	787b      	ldrb	r3, [r7, #1]
 800865e:	059b      	lsls	r3, r3, #22
 8008660:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008664:	78bb      	ldrb	r3, [r7, #2]
 8008666:	02db      	lsls	r3, r3, #11
 8008668:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800866c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800866e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008672:	049b      	lsls	r3, r3, #18
 8008674:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008678:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800867a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800867c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008680:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008686:	78fb      	ldrb	r3, [r7, #3]
 8008688:	0159      	lsls	r1, r3, #5
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	440b      	add	r3, r1
 800868e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008692:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008698:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800869a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d10f      	bne.n	80086c2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80086a2:	78fb      	ldrb	r3, [r7, #3]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	78fa      	ldrb	r2, [r7, #3]
 80086b2:	0151      	lsls	r1, r2, #5
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	440a      	add	r2, r1
 80086b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086c0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80086c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3720      	adds	r7, #32
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b08c      	sub	sp, #48	; 0x30
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	4613      	mov	r3, r2
 80086d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	785b      	ldrb	r3, [r3, #1]
 80086e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80086e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086e8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d02d      	beq.n	8008752 <USB_HC_StartXfer+0x86>
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	791b      	ldrb	r3, [r3, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d129      	bne.n	8008752 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80086fe:	79fb      	ldrb	r3, [r7, #7]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d117      	bne.n	8008734 <USB_HC_StartXfer+0x68>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	79db      	ldrb	r3, [r3, #7]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <USB_HC_StartXfer+0x48>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	79db      	ldrb	r3, [r3, #7]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d10f      	bne.n	8008734 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	4413      	add	r3, r2
 800871c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	69fa      	ldr	r2, [r7, #28]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	6a3a      	ldr	r2, [r7, #32]
 8008728:	440a      	add	r2, r1
 800872a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800872e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008732:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10b      	bne.n	8008752 <USB_HC_StartXfer+0x86>
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	795b      	ldrb	r3, [r3, #5]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d107      	bne.n	8008752 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	4619      	mov	r1, r3
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 fa2f 	bl	8008bac <USB_DoPing>
      return HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	e0f8      	b.n	8008944 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d018      	beq.n	800878c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	8912      	ldrh	r2, [r2, #8]
 8008762:	4413      	add	r3, r2
 8008764:	3b01      	subs	r3, #1
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	8912      	ldrh	r2, [r2, #8]
 800876a:	fbb3 f3f2 	udiv	r3, r3, r2
 800876e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008770:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008772:	8b7b      	ldrh	r3, [r7, #26]
 8008774:	429a      	cmp	r2, r3
 8008776:	d90b      	bls.n	8008790 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008778:	8b7b      	ldrh	r3, [r7, #26]
 800877a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800877c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	8912      	ldrh	r2, [r2, #8]
 8008782:	fb02 f203 	mul.w	r2, r2, r3
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	611a      	str	r2, [r3, #16]
 800878a:	e001      	b.n	8008790 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800878c:	2301      	movs	r3, #1
 800878e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	78db      	ldrb	r3, [r3, #3]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d007      	beq.n	80087a8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	8912      	ldrh	r2, [r2, #8]
 800879e:	fb02 f203 	mul.w	r2, r2, r3
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	611a      	str	r2, [r3, #16]
 80087a6:	e003      	b.n	80087b0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	695a      	ldr	r2, [r3, #20]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087ba:	04d9      	lsls	r1, r3, #19
 80087bc:	4b63      	ldr	r3, [pc, #396]	; (800894c <USB_HC_StartXfer+0x280>)
 80087be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	7a9b      	ldrb	r3, [r3, #10]
 80087c6:	075b      	lsls	r3, r3, #29
 80087c8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087cc:	69f9      	ldr	r1, [r7, #28]
 80087ce:	0148      	lsls	r0, r1, #5
 80087d0:	6a39      	ldr	r1, [r7, #32]
 80087d2:	4401      	add	r1, r0
 80087d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80087dc:	79fb      	ldrb	r3, [r7, #7]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	68d9      	ldr	r1, [r3, #12]
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f2:	460a      	mov	r2, r1
 80087f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	bf0c      	ite	eq
 8008806:	2301      	moveq	r3, #1
 8008808:	2300      	movne	r3, #0
 800880a:	b2db      	uxtb	r3, r3
 800880c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	4413      	add	r3, r2
 8008816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	69fa      	ldr	r2, [r7, #28]
 800881e:	0151      	lsls	r1, r2, #5
 8008820:	6a3a      	ldr	r2, [r7, #32]
 8008822:	440a      	add	r2, r1
 8008824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008828:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800882c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	4413      	add	r3, r2
 8008836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	7e7b      	ldrb	r3, [r7, #25]
 800883e:	075b      	lsls	r3, r3, #29
 8008840:	69f9      	ldr	r1, [r7, #28]
 8008842:	0148      	lsls	r0, r1, #5
 8008844:	6a39      	ldr	r1, [r7, #32]
 8008846:	4401      	add	r1, r0
 8008848:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800884c:	4313      	orrs	r3, r2
 800884e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	4413      	add	r3, r2
 8008858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008866:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	78db      	ldrb	r3, [r3, #3]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d004      	beq.n	800887a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008876:	613b      	str	r3, [r7, #16]
 8008878:	e003      	b.n	8008882 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008880:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008888:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	4413      	add	r3, r2
 8008892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008896:	461a      	mov	r2, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	e04e      	b.n	8008944 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	78db      	ldrb	r3, [r3, #3]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d149      	bne.n	8008942 <USB_HC_StartXfer+0x276>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d045      	beq.n	8008942 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	79db      	ldrb	r3, [r3, #7]
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d830      	bhi.n	8008920 <USB_HC_StartXfer+0x254>
 80088be:	a201      	add	r2, pc, #4	; (adr r2, 80088c4 <USB_HC_StartXfer+0x1f8>)
 80088c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c4:	080088d5 	.word	0x080088d5
 80088c8:	080088f9 	.word	0x080088f9
 80088cc:	080088d5 	.word	0x080088d5
 80088d0:	080088f9 	.word	0x080088f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	3303      	adds	r3, #3
 80088da:	089b      	lsrs	r3, r3, #2
 80088dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80088de:	8afa      	ldrh	r2, [r7, #22]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d91c      	bls.n	8008924 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	f043 0220 	orr.w	r2, r3, #32
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80088f6:	e015      	b.n	8008924 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	3303      	adds	r3, #3
 80088fe:	089b      	lsrs	r3, r3, #2
 8008900:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008902:	8afa      	ldrh	r2, [r7, #22]
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	b29b      	uxth	r3, r3
 800890e:	429a      	cmp	r2, r3
 8008910:	d90a      	bls.n	8008928 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	619a      	str	r2, [r3, #24]
        }
        break;
 800891e:	e003      	b.n	8008928 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008920:	bf00      	nop
 8008922:	e002      	b.n	800892a <USB_HC_StartXfer+0x25e>
        break;
 8008924:	bf00      	nop
 8008926:	e000      	b.n	800892a <USB_HC_StartXfer+0x25e>
        break;
 8008928:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	68d9      	ldr	r1, [r3, #12]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	785a      	ldrb	r2, [r3, #1]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	b29b      	uxth	r3, r3
 8008938:	2000      	movs	r0, #0
 800893a:	9000      	str	r0, [sp, #0]
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f7ff fb81 	bl	8008044 <USB_WritePacket>
  }

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3728      	adds	r7, #40	; 0x28
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	1ff80000 	.word	0x1ff80000

08008950 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	b29b      	uxth	r3, r3
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008972:	b480      	push	{r7}
 8008974:	b089      	sub	sp, #36	; 0x24
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008982:	78fb      	ldrb	r3, [r7, #3]
 8008984:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	4413      	add	r3, r2
 8008992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	0c9b      	lsrs	r3, r3, #18
 800899a:	f003 0303 	and.w	r3, r3, #3
 800899e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	0fdb      	lsrs	r3, r3, #31
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b20      	cmp	r3, #32
 80089c0:	d104      	bne.n	80089cc <USB_HC_Halt+0x5a>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	e0e8      	b.n	8008b9e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <USB_HC_Halt+0x66>
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d173      	bne.n	8008ac0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	0151      	lsls	r1, r2, #5
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	440a      	add	r2, r1
 80089ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 0320 	and.w	r3, r3, #32
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f040 80cb 	bne.w	8008b9c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d143      	bne.n	8008a9a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	0151      	lsls	r1, r2, #5
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	440a      	add	r2, r1
 8008a28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a30:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	015a      	lsls	r2, r3, #5
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	4413      	add	r3, r2
 8008a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	0151      	lsls	r1, r2, #5
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	440a      	add	r2, r1
 8008a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a50:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	0151      	lsls	r1, r2, #5
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	440a      	add	r2, r1
 8008a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a70:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	3301      	adds	r3, #1
 8008a76:	61fb      	str	r3, [r7, #28]
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a7e:	d81d      	bhi.n	8008abc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a96:	d0ec      	beq.n	8008a72 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a98:	e080      	b.n	8008b9c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	0151      	lsls	r1, r2, #5
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	440a      	add	r2, r1
 8008ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ab8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008aba:	e06f      	b.n	8008b9c <USB_HC_Halt+0x22a>
            break;
 8008abc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008abe:	e06d      	b.n	8008b9c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	0151      	lsls	r1, r2, #5
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	440a      	add	r2, r1
 8008ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ade:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d143      	bne.n	8008b78 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	0151      	lsls	r1, r2, #5
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	440a      	add	r2, r1
 8008b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	0151      	lsls	r1, r2, #5
 8008b22:	69ba      	ldr	r2, [r7, #24]
 8008b24:	440a      	add	r2, r1
 8008b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	0151      	lsls	r1, r2, #5
 8008b42:	69ba      	ldr	r2, [r7, #24]
 8008b44:	440a      	add	r2, r1
 8008b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b4e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	3301      	adds	r3, #1
 8008b54:	61fb      	str	r3, [r7, #28]
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b5c:	d81d      	bhi.n	8008b9a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b74:	d0ec      	beq.n	8008b50 <USB_HC_Halt+0x1de>
 8008b76:	e011      	b.n	8008b9c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	0151      	lsls	r1, r2, #5
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	440a      	add	r2, r1
 8008b8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	e000      	b.n	8008b9c <USB_HC_Halt+0x22a>
          break;
 8008b9a:	bf00      	nop
    }
  }

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3724      	adds	r7, #36	; 0x24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
	...

08008bac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	04da      	lsls	r2, r3, #19
 8008bc8:	4b15      	ldr	r3, [pc, #84]	; (8008c20 <USB_DoPing+0x74>)
 8008bca:	4013      	ands	r3, r2
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	0151      	lsls	r1, r2, #5
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	440a      	add	r2, r1
 8008bd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bdc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008bf4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bfc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	371c      	adds	r7, #28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	1ff80000 	.word	0x1ff80000

08008c24 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff f981 	bl	8007f3c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008c3a:	2110      	movs	r1, #16
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7ff f9b9 	bl	8007fb4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff f9dc 	bl	8008000 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008c48:	2300      	movs	r3, #0
 8008c4a:	613b      	str	r3, [r7, #16]
 8008c4c:	e01f      	b.n	8008c8e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c6c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c74:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c82:	461a      	mov	r2, r3
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	613b      	str	r3, [r7, #16]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	2b0f      	cmp	r3, #15
 8008c92:	d9dc      	bls.n	8008c4e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008c94:	2300      	movs	r3, #0
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	e034      	b.n	8008d04 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cb0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cb8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008cc0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cce:	461a      	mov	r2, r3
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	617b      	str	r3, [r7, #20]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ce0:	d80c      	bhi.n	8008cfc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cf8:	d0ec      	beq.n	8008cd4 <USB_StopHost+0xb0>
 8008cfa:	e000      	b.n	8008cfe <USB_StopHost+0xda>
        break;
 8008cfc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	3301      	adds	r3, #1
 8008d02:	613b      	str	r3, [r7, #16]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	2b0f      	cmp	r3, #15
 8008d08:	d9c7      	bls.n	8008c9a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d10:	461a      	mov	r2, r3
 8008d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d16:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d1e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff f8fa 	bl	8007f1a <USB_EnableGlobalInt>

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008d30:	b590      	push	{r4, r7, lr}
 8008d32:	b089      	sub	sp, #36	; 0x24
 8008d34:	af04      	add	r7, sp, #16
 8008d36:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008d38:	2301      	movs	r3, #1
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	2102      	movs	r1, #2
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fcb2 	bl	80096a8 <USBH_FindInterface>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	2bff      	cmp	r3, #255	; 0xff
 8008d4c:	d002      	beq.n	8008d54 <USBH_CDC_InterfaceInit+0x24>
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d901      	bls.n	8008d58 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008d54:	2302      	movs	r3, #2
 8008d56:	e13d      	b.n	8008fd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fc87 	bl	8009670 <USBH_SelectInterface>
 8008d62:	4603      	mov	r3, r0
 8008d64:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e131      	b.n	8008fd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008d76:	2050      	movs	r0, #80	; 0x50
 8008d78:	f005 fbd4 	bl	800e524 <malloc>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008d90:	2302      	movs	r3, #2
 8008d92:	e11f      	b.n	8008fd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008d94:	2250      	movs	r2, #80	; 0x50
 8008d96:	2100      	movs	r1, #0
 8008d98:	68b8      	ldr	r0, [r7, #8]
 8008d9a:	f005 fbe1 	bl	800e560 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	211a      	movs	r1, #26
 8008da4:	fb01 f303 	mul.w	r3, r1, r3
 8008da8:	4413      	add	r3, r2
 8008daa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	b25b      	sxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	da15      	bge.n	8008de2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	211a      	movs	r1, #26
 8008dbc:	fb01 f303 	mul.w	r3, r1, r3
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dc6:	781a      	ldrb	r2, [r3, #0]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	211a      	movs	r1, #26
 8008dd2:	fb01 f303 	mul.w	r3, r1, r3
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ddc:	881a      	ldrh	r2, [r3, #0]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f002 f88c 	bl	800af06 <USBH_AllocPipe>
 8008dee:	4603      	mov	r3, r0
 8008df0:	461a      	mov	r2, r3
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	7819      	ldrb	r1, [r3, #0]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	7858      	ldrb	r0, [r3, #1]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	8952      	ldrh	r2, [r2, #10]
 8008e0e:	9202      	str	r2, [sp, #8]
 8008e10:	2203      	movs	r2, #3
 8008e12:	9201      	str	r2, [sp, #4]
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	4623      	mov	r3, r4
 8008e18:	4602      	mov	r2, r0
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f002 f844 	bl	800aea8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2200      	movs	r2, #0
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f005 facd 	bl	800e3c8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2200      	movs	r2, #0
 8008e32:	210a      	movs	r1, #10
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fc37 	bl	80096a8 <USBH_FindInterface>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	2bff      	cmp	r3, #255	; 0xff
 8008e42:	d002      	beq.n	8008e4a <USBH_CDC_InterfaceInit+0x11a>
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d901      	bls.n	8008e4e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	e0c2      	b.n	8008fd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	211a      	movs	r1, #26
 8008e54:	fb01 f303 	mul.w	r3, r1, r3
 8008e58:	4413      	add	r3, r2
 8008e5a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	b25b      	sxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	da16      	bge.n	8008e94 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	211a      	movs	r1, #26
 8008e6c:	fb01 f303 	mul.w	r3, r1, r3
 8008e70:	4413      	add	r3, r2
 8008e72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	211a      	movs	r1, #26
 8008e82:	fb01 f303 	mul.w	r3, r1, r3
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e8c:	881a      	ldrh	r2, [r3, #0]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	835a      	strh	r2, [r3, #26]
 8008e92:	e015      	b.n	8008ec0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	211a      	movs	r1, #26
 8008e9a:	fb01 f303 	mul.w	r3, r1, r3
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ea4:	781a      	ldrb	r2, [r3, #0]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	211a      	movs	r1, #26
 8008eb0:	fb01 f303 	mul.w	r3, r1, r3
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008eba:	881a      	ldrh	r2, [r3, #0]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	211a      	movs	r1, #26
 8008ec6:	fb01 f303 	mul.w	r3, r1, r3
 8008eca:	4413      	add	r3, r2
 8008ecc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	b25b      	sxtb	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	da16      	bge.n	8008f06 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	211a      	movs	r1, #26
 8008ede:	fb01 f303 	mul.w	r3, r1, r3
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ee8:	781a      	ldrb	r2, [r3, #0]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	211a      	movs	r1, #26
 8008ef4:	fb01 f303 	mul.w	r3, r1, r3
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008efe:	881a      	ldrh	r2, [r3, #0]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	835a      	strh	r2, [r3, #26]
 8008f04:	e015      	b.n	8008f32 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	211a      	movs	r1, #26
 8008f0c:	fb01 f303 	mul.w	r3, r1, r3
 8008f10:	4413      	add	r3, r2
 8008f12:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008f16:	781a      	ldrb	r2, [r3, #0]
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	211a      	movs	r1, #26
 8008f22:	fb01 f303 	mul.w	r3, r1, r3
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008f2c:	881a      	ldrh	r2, [r3, #0]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	7b9b      	ldrb	r3, [r3, #14]
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f001 ffe4 	bl	800af06 <USBH_AllocPipe>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	461a      	mov	r2, r3
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	7bdb      	ldrb	r3, [r3, #15]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 ffda 	bl	800af06 <USBH_AllocPipe>
 8008f52:	4603      	mov	r3, r0
 8008f54:	461a      	mov	r2, r3
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	7b59      	ldrb	r1, [r3, #13]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	7b98      	ldrb	r0, [r3, #14]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	8b12      	ldrh	r2, [r2, #24]
 8008f72:	9202      	str	r2, [sp, #8]
 8008f74:	2202      	movs	r2, #2
 8008f76:	9201      	str	r2, [sp, #4]
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	4623      	mov	r3, r4
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 ff92 	bl	800aea8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	7b19      	ldrb	r1, [r3, #12]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	7bd8      	ldrb	r0, [r3, #15]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	8b52      	ldrh	r2, [r2, #26]
 8008f9c:	9202      	str	r2, [sp, #8]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	9201      	str	r2, [sp, #4]
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	4623      	mov	r3, r4
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 ff7d 	bl	800aea8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	7b5b      	ldrb	r3, [r3, #13]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f005 fa02 	bl	800e3c8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	7b1b      	ldrb	r3, [r3, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f005 f9fb 	bl	800e3c8 <USBH_LL_SetToggle>

  return USBH_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd90      	pop	{r4, r7, pc}

08008fdc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00e      	beq.n	8009014 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 ff72 	bl	800aee6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f001 ff9d 	bl	800af48 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	7b1b      	ldrb	r3, [r3, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00e      	beq.n	800903a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	7b1b      	ldrb	r3, [r3, #12]
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f001 ff5f 	bl	800aee6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	7b1b      	ldrb	r3, [r3, #12]
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 ff8a 	bl	800af48 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	7b5b      	ldrb	r3, [r3, #13]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00e      	beq.n	8009060 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	7b5b      	ldrb	r3, [r3, #13]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 ff4c 	bl	800aee6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	7b5b      	ldrb	r3, [r3, #13]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 ff77 	bl	800af48 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009072:	69db      	ldr	r3, [r3, #28]
 8009074:	4618      	mov	r0, r3
 8009076:	f005 fa5d 	bl	800e534 <free>
    phost->pActiveClass->pData = 0U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009080:	2200      	movs	r2, #0
 8009082:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3340      	adds	r3, #64	; 0x40
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f8b1 	bl	800920e <GetLineCoding>
 80090ac:	4603      	mov	r3, r0
 80090ae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80090b0:	7afb      	ldrb	r3, [r7, #11]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090bc:	2102      	movs	r1, #2
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80090c2:	7afb      	ldrb	r3, [r7, #11]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80090d4:	2301      	movs	r3, #1
 80090d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090e2:	69db      	ldr	r3, [r3, #28]
 80090e4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d877      	bhi.n	80091e0 <USBH_CDC_Process+0x114>
 80090f0:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <USBH_CDC_Process+0x2c>)
 80090f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	0800910d 	.word	0x0800910d
 80090fc:	08009113 	.word	0x08009113
 8009100:	08009143 	.word	0x08009143
 8009104:	080091b7 	.word	0x080091b7
 8009108:	080091c5 	.word	0x080091c5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73fb      	strb	r3, [r7, #15]
      break;
 8009110:	e06d      	b.n	80091ee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f897 	bl	800924c <SetLineCoding>
 800911e:	4603      	mov	r3, r0
 8009120:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d104      	bne.n	8009132 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2202      	movs	r2, #2
 800912c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009130:	e058      	b.n	80091e4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d055      	beq.n	80091e4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2204      	movs	r2, #4
 800913c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009140:	e050      	b.n	80091e4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	3340      	adds	r3, #64	; 0x40
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f860 	bl	800920e <GetLineCoding>
 800914e:	4603      	mov	r3, r0
 8009150:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d126      	bne.n	80091a6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800916a:	791b      	ldrb	r3, [r3, #4]
 800916c:	429a      	cmp	r2, r3
 800916e:	d13b      	bne.n	80091e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800917a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800917c:	429a      	cmp	r2, r3
 800917e:	d133      	bne.n	80091e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800918a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800918c:	429a      	cmp	r2, r3
 800918e:	d12b      	bne.n	80091e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009198:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800919a:	429a      	cmp	r2, r3
 800919c:	d124      	bne.n	80091e8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f982 	bl	80094a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80091a4:	e020      	b.n	80091e8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80091a6:	7bbb      	ldrb	r3, [r7, #14]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d01d      	beq.n	80091e8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2204      	movs	r2, #4
 80091b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80091b4:	e018      	b.n	80091e8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f867 	bl	800928a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f8f6 	bl	80093ae <CDC_ProcessReception>
      break;
 80091c2:	e014      	b.n	80091ee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80091c4:	2100      	movs	r1, #0
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f001 f94d 	bl	800a466 <USBH_ClrFeature>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80091de:	e005      	b.n	80091ec <USBH_CDC_Process+0x120>

    default:
      break;
 80091e0:	bf00      	nop
 80091e2:	e004      	b.n	80091ee <USBH_CDC_Process+0x122>
      break;
 80091e4:	bf00      	nop
 80091e6:	e002      	b.n	80091ee <USBH_CDC_Process+0x122>
      break;
 80091e8:	bf00      	nop
 80091ea:	e000      	b.n	80091ee <USBH_CDC_Process+0x122>
      break;
 80091ec:	bf00      	nop

  }

  return status;
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	22a1      	movs	r2, #161	; 0xa1
 800921c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2221      	movs	r2, #33	; 0x21
 8009222:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2207      	movs	r2, #7
 8009234:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2207      	movs	r2, #7
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 faf2 	bl	800a826 <USBH_CtlReq>
 8009242:	4603      	mov	r3, r0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2221      	movs	r2, #33	; 0x21
 800925a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2220      	movs	r2, #32
 8009260:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2207      	movs	r2, #7
 8009272:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2207      	movs	r2, #7
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f001 fad3 	bl	800a826 <USBH_CtlReq>
 8009280:	4603      	mov	r3, r0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b086      	sub	sp, #24
 800928e:	af02      	add	r7, sp, #8
 8009290:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800929c:	2300      	movs	r3, #0
 800929e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d002      	beq.n	80092b0 <CDC_ProcessTransmission+0x26>
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d023      	beq.n	80092f6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80092ae:	e07a      	b.n	80093a6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	8b12      	ldrh	r2, [r2, #24]
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d90b      	bls.n	80092d4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	69d9      	ldr	r1, [r3, #28]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8b1a      	ldrh	r2, [r3, #24]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	7b5b      	ldrb	r3, [r3, #13]
 80092c8:	2001      	movs	r0, #1
 80092ca:	9000      	str	r0, [sp, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 fda8 	bl	800ae22 <USBH_BulkSendData>
 80092d2:	e00b      	b.n	80092ec <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80092dc:	b29a      	uxth	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	7b5b      	ldrb	r3, [r3, #13]
 80092e2:	2001      	movs	r0, #1
 80092e4:	9000      	str	r0, [sp, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 fd9b 	bl	800ae22 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2202      	movs	r2, #2
 80092f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80092f4:	e057      	b.n	80093a6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	7b5b      	ldrb	r3, [r3, #13]
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f005 f839 	bl	800e374 <USBH_LL_GetURBState>
 8009302:	4603      	mov	r3, r0
 8009304:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009306:	7afb      	ldrb	r3, [r7, #11]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d136      	bne.n	800937a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	8b12      	ldrh	r2, [r2, #24]
 8009314:	4293      	cmp	r3, r2
 8009316:	d90e      	bls.n	8009336 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	8b12      	ldrh	r2, [r2, #24]
 8009320:	1a9a      	subs	r2, r3, r2
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	8b12      	ldrh	r2, [r2, #24]
 800932e:	441a      	add	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	61da      	str	r2, [r3, #28]
 8009334:	e002      	b.n	800933c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	2b00      	cmp	r3, #0
 8009342:	d004      	beq.n	800934e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800934c:	e006      	b.n	800935c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f892 	bl	8009480 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2204      	movs	r2, #4
 8009360:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009370:	2300      	movs	r3, #0
 8009372:	2200      	movs	r2, #0
 8009374:	f001 ffd8 	bl	800b328 <osMessageQueuePut>
      break;
 8009378:	e014      	b.n	80093a4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800937a:	7afb      	ldrb	r3, [r7, #11]
 800937c:	2b02      	cmp	r3, #2
 800937e:	d111      	bne.n	80093a4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2204      	movs	r2, #4
 800938c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800939c:	2300      	movs	r3, #0
 800939e:	2200      	movs	r2, #0
 80093a0:	f001 ffc2 	bl	800b328 <osMessageQueuePut>
      break;
 80093a4:	bf00      	nop
  }
}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b086      	sub	sp, #24
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80093c0:	2300      	movs	r3, #0
 80093c2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d002      	beq.n	80093d4 <CDC_ProcessReception+0x26>
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d00e      	beq.n	80093f0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80093d2:	e051      	b.n	8009478 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	6a19      	ldr	r1, [r3, #32]
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	8b5a      	ldrh	r2, [r3, #26]
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	7b1b      	ldrb	r3, [r3, #12]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 fd43 	bl	800ae6c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2204      	movs	r2, #4
 80093ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80093ee:	e043      	b.n	8009478 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	7b1b      	ldrb	r3, [r3, #12]
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f004 ffbc 	bl	800e374 <USBH_LL_GetURBState>
 80093fc:	4603      	mov	r3, r0
 80093fe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009400:	7cfb      	ldrb	r3, [r7, #19]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d137      	bne.n	8009476 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	7b1b      	ldrb	r3, [r3, #12]
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f004 ff1f 	bl	800e250 <USBH_LL_GetLastXferSize>
 8009412:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	429a      	cmp	r2, r3
 800941c:	d016      	beq.n	800944c <CDC_ProcessReception+0x9e>
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	8b5b      	ldrh	r3, [r3, #26]
 8009422:	461a      	mov	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4293      	cmp	r3, r2
 8009428:	d910      	bls.n	800944c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	1ad2      	subs	r2, r2, r3
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	6a1a      	ldr	r2, [r3, #32]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	441a      	add	r2, r3
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2203      	movs	r2, #3
 8009446:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800944a:	e006      	b.n	800945a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f81d 	bl	8009494 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2204      	movs	r2, #4
 800945e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800946e:	2300      	movs	r3, #0
 8009470:	2200      	movs	r2, #0
 8009472:	f001 ff59 	bl	800b328 <osMessageQueuePut>
      break;
 8009476:	bf00      	nop
  }
}
 8009478:	bf00      	nop
 800947a:	3718      	adds	r7, #24
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	4613      	mov	r3, r2
 80094c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80094d0:	2302      	movs	r3, #2
 80094d2:	e044      	b.n	800955e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	79fa      	ldrb	r2, [r7, #7]
 80094d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 f841 	bl	8009574 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8009520:	2200      	movs	r2, #0
 8009522:	2104      	movs	r1, #4
 8009524:	2010      	movs	r0, #16
 8009526:	f001 fe8c 	bl	800b242 <osMessageQueueNew>
 800952a:	4602      	mov	r2, r0
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8009532:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <USBH_Init+0xac>)
 8009534:	4a0d      	ldr	r2, [pc, #52]	; (800956c <USBH_Init+0xb0>)
 8009536:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8009538:	4b0b      	ldr	r3, [pc, #44]	; (8009568 <USBH_Init+0xac>)
 800953a:	2280      	movs	r2, #128	; 0x80
 800953c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800953e:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <USBH_Init+0xac>)
 8009540:	2218      	movs	r2, #24
 8009542:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8009544:	4a08      	ldr	r2, [pc, #32]	; (8009568 <USBH_Init+0xac>)
 8009546:	68f9      	ldr	r1, [r7, #12]
 8009548:	4809      	ldr	r0, [pc, #36]	; (8009570 <USBH_Init+0xb4>)
 800954a:	f001 fdcd 	bl	800b0e8 <osThreadNew>
 800954e:	4602      	mov	r2, r0
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f004 fdc6 	bl	800e0e8 <USBH_LL_Init>

  return USBH_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20004fbc 	.word	0x20004fbc
 800956c:	0800e848 	.word	0x0800e848
 8009570:	0800a1dd 	.word	0x0800a1dd

08009574 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800957c:	2300      	movs	r3, #0
 800957e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009580:	2300      	movs	r3, #0
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	e009      	b.n	800959a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	33e0      	adds	r3, #224	; 0xe0
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	2200      	movs	r2, #0
 8009592:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3301      	adds	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b0e      	cmp	r3, #14
 800959e:	d9f2      	bls.n	8009586 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	e009      	b.n	80095ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80095b0:	2200      	movs	r2, #0
 80095b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3301      	adds	r3, #1
 80095b8:	60fb      	str	r3, [r7, #12]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095c0:	d3f1      	bcc.n	80095a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2240      	movs	r2, #64	; 0x40
 80095e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d016      	beq.n	800965e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10e      	bne.n	8009658 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009640:	1c59      	adds	r1, r3, #1
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	33de      	adds	r3, #222	; 0xde
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	73fb      	strb	r3, [r7, #15]
 8009656:	e004      	b.n	8009662 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009658:	2302      	movs	r3, #2
 800965a:	73fb      	strb	r3, [r7, #15]
 800965c:	e001      	b.n	8009662 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800965e:	2302      	movs	r3, #2
 8009660:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009662:	7bfb      	ldrb	r3, [r7, #15]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	429a      	cmp	r2, r3
 800968a:	d204      	bcs.n	8009696 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009694:	e001      	b.n	800969a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009696:	2302      	movs	r3, #2
 8009698:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800969a:	7bfb      	ldrb	r3, [r7, #15]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	4608      	mov	r0, r1
 80096b2:	4611      	mov	r1, r2
 80096b4:	461a      	mov	r2, r3
 80096b6:	4603      	mov	r3, r0
 80096b8:	70fb      	strb	r3, [r7, #3]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70bb      	strb	r3, [r7, #2]
 80096be:	4613      	mov	r3, r2
 80096c0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80096c2:	2300      	movs	r3, #0
 80096c4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80096d0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80096d2:	e025      	b.n	8009720 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
 80096d6:	221a      	movs	r2, #26
 80096d8:	fb02 f303 	mul.w	r3, r2, r3
 80096dc:	3308      	adds	r3, #8
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	4413      	add	r3, r2
 80096e2:	3302      	adds	r3, #2
 80096e4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	795b      	ldrb	r3, [r3, #5]
 80096ea:	78fa      	ldrb	r2, [r7, #3]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d002      	beq.n	80096f6 <USBH_FindInterface+0x4e>
 80096f0:	78fb      	ldrb	r3, [r7, #3]
 80096f2:	2bff      	cmp	r3, #255	; 0xff
 80096f4:	d111      	bne.n	800971a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80096fa:	78ba      	ldrb	r2, [r7, #2]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d002      	beq.n	8009706 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009700:	78bb      	ldrb	r3, [r7, #2]
 8009702:	2bff      	cmp	r3, #255	; 0xff
 8009704:	d109      	bne.n	800971a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800970a:	787a      	ldrb	r2, [r7, #1]
 800970c:	429a      	cmp	r2, r3
 800970e:	d002      	beq.n	8009716 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009710:	787b      	ldrb	r3, [r7, #1]
 8009712:	2bff      	cmp	r3, #255	; 0xff
 8009714:	d101      	bne.n	800971a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009716:	7dfb      	ldrb	r3, [r7, #23]
 8009718:	e006      	b.n	8009728 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800971a:	7dfb      	ldrb	r3, [r7, #23]
 800971c:	3301      	adds	r3, #1
 800971e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009720:	7dfb      	ldrb	r3, [r7, #23]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d9d6      	bls.n	80096d4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009726:	23ff      	movs	r3, #255	; 0xff
}
 8009728:	4618      	mov	r0, r3
 800972a:	371c      	adds	r7, #28
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f004 fd0f 	bl	800e160 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009742:	2101      	movs	r1, #1
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f004 fe28 	bl	800e39a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b088      	sub	sp, #32
 8009758:	af04      	add	r7, sp, #16
 800975a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800975c:	2302      	movs	r3, #2
 800975e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b01      	cmp	r3, #1
 800976e:	d102      	bne.n	8009776 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2203      	movs	r2, #3
 8009774:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b0b      	cmp	r3, #11
 800977e:	f200 823c 	bhi.w	8009bfa <USBH_Process+0x4a6>
 8009782:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <USBH_Process+0x34>)
 8009784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009788:	080097b9 	.word	0x080097b9
 800978c:	08009807 	.word	0x08009807
 8009790:	0800988b 	.word	0x0800988b
 8009794:	08009b79 	.word	0x08009b79
 8009798:	08009bfb 	.word	0x08009bfb
 800979c:	0800994b 	.word	0x0800994b
 80097a0:	08009b03 	.word	0x08009b03
 80097a4:	0800999d 	.word	0x0800999d
 80097a8:	080099d9 	.word	0x080099d9
 80097ac:	08009a13 	.word	0x08009a13
 80097b0:	08009a5b 	.word	0x08009a5b
 80097b4:	08009b61 	.word	0x08009b61
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 821c 	beq.w	8009bfe <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80097cc:	20c8      	movs	r0, #200	; 0xc8
 80097ce:	f004 fe2b 	bl	800e428 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f004 fd21 	bl	800e21a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80097fc:	2300      	movs	r3, #0
 80097fe:	2200      	movs	r2, #0
 8009800:	f001 fd92 	bl	800b328 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8009804:	e1fb      	b.n	8009bfe <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800980c:	2b01      	cmp	r3, #1
 800980e:	d107      	bne.n	8009820 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2202      	movs	r2, #2
 800981c:	701a      	strb	r2, [r3, #0]
 800981e:	e025      	b.n	800986c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800982a:	d914      	bls.n	8009856 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009832:	3301      	adds	r3, #1
 8009834:	b2da      	uxtb	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009842:	2b03      	cmp	r3, #3
 8009844:	d903      	bls.n	800984e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	220d      	movs	r2, #13
 800984a:	701a      	strb	r2, [r3, #0]
 800984c:	e00e      	b.n	800986c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	701a      	strb	r2, [r3, #0]
 8009854:	e00a      	b.n	800986c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800985c:	f103 020a 	add.w	r2, r3, #10
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009866:	200a      	movs	r0, #10
 8009868:	f004 fdde 	bl	800e428 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009880:	2300      	movs	r3, #0
 8009882:	2200      	movs	r2, #0
 8009884:	f001 fd50 	bl	800b328 <osMessageQueuePut>
#endif
#endif
      break;
 8009888:	e1c0      	b.n	8009c0c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d005      	beq.n	80098a0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800989a:	2104      	movs	r1, #4
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80098a0:	2064      	movs	r0, #100	; 0x64
 80098a2:	f004 fdc1 	bl	800e428 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f004 fc90 	bl	800e1cc <USBH_LL_GetSpeed>
 80098ac:	4603      	mov	r3, r0
 80098ae:	461a      	mov	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2205      	movs	r2, #5
 80098ba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80098bc:	2100      	movs	r1, #0
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f001 fb21 	bl	800af06 <USBH_AllocPipe>
 80098c4:	4603      	mov	r3, r0
 80098c6:	461a      	mov	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80098cc:	2180      	movs	r1, #128	; 0x80
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 fb19 	bl	800af06 <USBH_AllocPipe>
 80098d4:	4603      	mov	r3, r0
 80098d6:	461a      	mov	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	7919      	ldrb	r1, [r3, #4]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80098f0:	b292      	uxth	r2, r2
 80098f2:	9202      	str	r2, [sp, #8]
 80098f4:	2200      	movs	r2, #0
 80098f6:	9201      	str	r2, [sp, #4]
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	4603      	mov	r3, r0
 80098fc:	2280      	movs	r2, #128	; 0x80
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f001 fad2 	bl	800aea8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	7959      	ldrb	r1, [r3, #5]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009918:	b292      	uxth	r2, r2
 800991a:	9202      	str	r2, [sp, #8]
 800991c:	2200      	movs	r2, #0
 800991e:	9201      	str	r2, [sp, #4]
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	4603      	mov	r3, r0
 8009924:	2200      	movs	r2, #0
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f001 fabe 	bl	800aea8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009940:	2300      	movs	r3, #0
 8009942:	2200      	movs	r2, #0
 8009944:	f001 fcf0 	bl	800b328 <osMessageQueuePut>
#endif
#endif
      break;
 8009948:	e160      	b.n	8009c0c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f964 	bl	8009c18 <USBH_HandleEnum>
 8009950:	4603      	mov	r3, r0
 8009952:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009954:	7bbb      	ldrb	r3, [r7, #14]
 8009956:	b2db      	uxtb	r3, r3
 8009958:	2b00      	cmp	r3, #0
 800995a:	f040 8152 	bne.w	8009c02 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800996c:	2b01      	cmp	r3, #1
 800996e:	d103      	bne.n	8009978 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2208      	movs	r2, #8
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	e002      	b.n	800997e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2207      	movs	r2, #7
 800997c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2205      	movs	r2, #5
 8009982:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009992:	2300      	movs	r3, #0
 8009994:	2200      	movs	r2, #0
 8009996:	f001 fcc7 	bl	800b328 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800999a:	e132      	b.n	8009c02 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 812f 	beq.w	8009c06 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099ae:	2101      	movs	r1, #1
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2208      	movs	r2, #8
 80099b8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2205      	movs	r2, #5
 80099be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80099ce:	2300      	movs	r3, #0
 80099d0:	2200      	movs	r2, #0
 80099d2:	f001 fca9 	bl	800b328 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80099d6:	e116      	b.n	8009c06 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80099de:	b29b      	uxth	r3, r3
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fcf8 	bl	800a3d8 <USBH_SetCfg>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d102      	bne.n	80099f4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2209      	movs	r2, #9
 80099f2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f001 fc8c 	bl	800b328 <osMessageQueuePut>
#endif
#endif
      break;
 8009a10:	e0fc      	b.n	8009c0c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00a      	beq.n	8009a36 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009a20:	2101      	movs	r1, #1
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fcfb 	bl	800a41e <USBH_SetFeature>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d106      	bne.n	8009a3c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	220a      	movs	r2, #10
 8009a32:	701a      	strb	r2, [r3, #0]
 8009a34:	e002      	b.n	8009a3c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	220a      	movs	r2, #10
 8009a3a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009a50:	2300      	movs	r3, #0
 8009a52:	2200      	movs	r2, #0
 8009a54:	f001 fc68 	bl	800b328 <osMessageQueuePut>
#endif
#endif
      break;
 8009a58:	e0d8      	b.n	8009c0c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d03f      	beq.n	8009ae4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
 8009a70:	e016      	b.n	8009aa0 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009a72:	7bfa      	ldrb	r2, [r7, #15]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	32de      	adds	r2, #222	; 0xde
 8009a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a7c:	791a      	ldrb	r2, [r3, #4]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d108      	bne.n	8009a9a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009a88:	7bfa      	ldrb	r2, [r7, #15]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	32de      	adds	r2, #222	; 0xde
 8009a8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009a98:	e005      	b.n	8009aa6 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	73fb      	strb	r3, [r7, #15]
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0e5      	beq.n	8009a72 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d016      	beq.n	8009ade <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	4798      	blx	r3
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d109      	bne.n	8009ad6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2206      	movs	r2, #6
 8009ac6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ace:	2103      	movs	r1, #3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	4798      	blx	r3
 8009ad4:	e006      	b.n	8009ae4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	220d      	movs	r2, #13
 8009ada:	701a      	strb	r2, [r3, #0]
 8009adc:	e002      	b.n	8009ae4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	220d      	movs	r2, #13
 8009ae2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2205      	movs	r2, #5
 8009ae8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009af8:	2300      	movs	r3, #0
 8009afa:	2200      	movs	r2, #0
 8009afc:	f001 fc14 	bl	800b328 <osMessageQueuePut>
#endif
#endif
      break;
 8009b00:	e084      	b.n	8009c0c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d017      	beq.n	8009b3c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	4798      	blx	r3
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d103      	bne.n	8009b2c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	220b      	movs	r2, #11
 8009b28:	701a      	strb	r2, [r3, #0]
 8009b2a:	e00a      	b.n	8009b42 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d106      	bne.n	8009b42 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	220d      	movs	r2, #13
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	e002      	b.n	8009b42 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	220d      	movs	r2, #13
 8009b40:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2205      	movs	r2, #5
 8009b46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009b56:	2300      	movs	r3, #0
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f001 fbe5 	bl	800b328 <osMessageQueuePut>
#endif
#endif
      break;
 8009b5e:	e055      	b.n	8009c0c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d04f      	beq.n	8009c0a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
      }
      break;
 8009b76:	e048      	b.n	8009c0a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff fcf7 	bl	8009574 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d009      	beq.n	8009ba4 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d005      	beq.n	8009bba <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009bb4:	2105      	movs	r1, #5
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d107      	bne.n	8009bd6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7ff fdb0 	bl	8009734 <USBH_Start>
 8009bd4:	e002      	b.n	8009bdc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f004 fac2 	bl	800e160 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f001 fb98 	bl	800b328 <osMessageQueuePut>
#endif
#endif
      break;
 8009bf8:	e008      	b.n	8009c0c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009bfa:	bf00      	nop
 8009bfc:	e006      	b.n	8009c0c <USBH_Process+0x4b8>
      break;
 8009bfe:	bf00      	nop
 8009c00:	e004      	b.n	8009c0c <USBH_Process+0x4b8>
      break;
 8009c02:	bf00      	nop
 8009c04:	e002      	b.n	8009c0c <USBH_Process+0x4b8>
    break;
 8009c06:	bf00      	nop
 8009c08:	e000      	b.n	8009c0c <USBH_Process+0x4b8>
      break;
 8009c0a:	bf00      	nop
  }
  return USBH_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop

08009c18 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af04      	add	r7, sp, #16
 8009c1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009c20:	2301      	movs	r3, #1
 8009c22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009c24:	2301      	movs	r3, #1
 8009c26:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	785b      	ldrb	r3, [r3, #1]
 8009c2c:	2b07      	cmp	r3, #7
 8009c2e:	f200 8208 	bhi.w	800a042 <USBH_HandleEnum+0x42a>
 8009c32:	a201      	add	r2, pc, #4	; (adr r2, 8009c38 <USBH_HandleEnum+0x20>)
 8009c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c38:	08009c59 	.word	0x08009c59
 8009c3c:	08009d17 	.word	0x08009d17
 8009c40:	08009d81 	.word	0x08009d81
 8009c44:	08009e0f 	.word	0x08009e0f
 8009c48:	08009e79 	.word	0x08009e79
 8009c4c:	08009ee9 	.word	0x08009ee9
 8009c50:	08009f85 	.word	0x08009f85
 8009c54:	0800a003 	.word	0x0800a003
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009c58:	2108      	movs	r1, #8
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 faec 	bl	800a238 <USBH_Get_DevDesc>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d130      	bne.n	8009ccc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	7919      	ldrb	r1, [r3, #4]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009c8e:	b292      	uxth	r2, r2
 8009c90:	9202      	str	r2, [sp, #8]
 8009c92:	2200      	movs	r2, #0
 8009c94:	9201      	str	r2, [sp, #4]
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2280      	movs	r2, #128	; 0x80
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 f903 	bl	800aea8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	7959      	ldrb	r1, [r3, #5]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009cb6:	b292      	uxth	r2, r2
 8009cb8:	9202      	str	r2, [sp, #8]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	9201      	str	r2, [sp, #4]
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f001 f8ef 	bl	800aea8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009cca:	e1bc      	b.n	800a046 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	f040 81b9 	bne.w	800a046 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cda:	3301      	adds	r3, #1
 8009cdc:	b2da      	uxtb	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d903      	bls.n	8009cf6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	220d      	movs	r2, #13
 8009cf2:	701a      	strb	r2, [r3, #0]
      break;
 8009cf4:	e1a7      	b.n	800a046 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	795b      	ldrb	r3, [r3, #5]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f001 f923 	bl	800af48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	791b      	ldrb	r3, [r3, #4]
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f001 f91d 	bl	800af48 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	701a      	strb	r2, [r3, #0]
      break;
 8009d14:	e197      	b.n	800a046 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009d16:	2112      	movs	r1, #18
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fa8d 	bl	800a238 <USBH_Get_DevDesc>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d103      	bne.n	8009d30 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d2e:	e18c      	b.n	800a04a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	f040 8189 	bne.w	800a04a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d3e:	3301      	adds	r3, #1
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	d903      	bls.n	8009d5a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	220d      	movs	r2, #13
 8009d56:	701a      	strb	r2, [r3, #0]
      break;
 8009d58:	e177      	b.n	800a04a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	795b      	ldrb	r3, [r3, #5]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 f8f1 	bl	800af48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	791b      	ldrb	r3, [r3, #4]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 f8eb 	bl	800af48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	701a      	strb	r2, [r3, #0]
      break;
 8009d7e:	e164      	b.n	800a04a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009d80:	2101      	movs	r1, #1
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fb04 	bl	800a390 <USBH_SetAddress>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d132      	bne.n	8009df8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009d92:	2002      	movs	r0, #2
 8009d94:	f004 fb48 	bl	800e428 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2203      	movs	r2, #3
 8009da4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	7919      	ldrb	r1, [r3, #4]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009dba:	b292      	uxth	r2, r2
 8009dbc:	9202      	str	r2, [sp, #8]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	9201      	str	r2, [sp, #4]
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2280      	movs	r2, #128	; 0x80
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f001 f86d 	bl	800aea8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	7959      	ldrb	r1, [r3, #5]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009de2:	b292      	uxth	r2, r2
 8009de4:	9202      	str	r2, [sp, #8]
 8009de6:	2200      	movs	r2, #0
 8009de8:	9201      	str	r2, [sp, #4]
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	4603      	mov	r3, r0
 8009dee:	2200      	movs	r2, #0
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f001 f859 	bl	800aea8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009df6:	e12a      	b.n	800a04e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	f040 8127 	bne.w	800a04e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	220d      	movs	r2, #13
 8009e04:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	705a      	strb	r2, [r3, #1]
      break;
 8009e0c:	e11f      	b.n	800a04e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009e0e:	2109      	movs	r1, #9
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fa39 	bl	800a288 <USBH_Get_CfgDesc>
 8009e16:	4603      	mov	r3, r0
 8009e18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e1a:	7bbb      	ldrb	r3, [r7, #14]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d103      	bne.n	8009e28 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2204      	movs	r2, #4
 8009e24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e26:	e114      	b.n	800a052 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e28:	7bbb      	ldrb	r3, [r7, #14]
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	f040 8111 	bne.w	800a052 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e36:	3301      	adds	r3, #1
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	d903      	bls.n	8009e52 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	220d      	movs	r2, #13
 8009e4e:	701a      	strb	r2, [r3, #0]
      break;
 8009e50:	e0ff      	b.n	800a052 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	795b      	ldrb	r3, [r3, #5]
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 f875 	bl	800af48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	791b      	ldrb	r3, [r3, #4]
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f001 f86f 	bl	800af48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	701a      	strb	r2, [r3, #0]
      break;
 8009e76:	e0ec      	b.n	800a052 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fa01 	bl	800a288 <USBH_Get_CfgDesc>
 8009e86:	4603      	mov	r3, r0
 8009e88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d103      	bne.n	8009e98 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2205      	movs	r2, #5
 8009e94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e96:	e0de      	b.n	800a056 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	f040 80db 	bne.w	800a056 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	d903      	bls.n	8009ec2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	220d      	movs	r2, #13
 8009ebe:	701a      	strb	r2, [r3, #0]
      break;
 8009ec0:	e0c9      	b.n	800a056 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	795b      	ldrb	r3, [r3, #5]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f001 f83d 	bl	800af48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	791b      	ldrb	r3, [r3, #4]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 f837 	bl	800af48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
      break;
 8009ee6:	e0b6      	b.n	800a056 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d036      	beq.n	8009f60 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009efe:	23ff      	movs	r3, #255	; 0xff
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f9e5 	bl	800a2d0 <USBH_Get_StringDesc>
 8009f06:	4603      	mov	r3, r0
 8009f08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d111      	bne.n	8009f34 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2206      	movs	r2, #6
 8009f14:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2205      	movs	r2, #5
 8009f1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f001 f9fb 	bl	800b328 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009f32:	e092      	b.n	800a05a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f34:	7bbb      	ldrb	r3, [r7, #14]
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	f040 808f 	bne.w	800a05a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2206      	movs	r2, #6
 8009f40:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2205      	movs	r2, #5
 8009f46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009f56:	2300      	movs	r3, #0
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f001 f9e5 	bl	800b328 <osMessageQueuePut>
      break;
 8009f5e:	e07c      	b.n	800a05a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2206      	movs	r2, #6
 8009f64:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2205      	movs	r2, #5
 8009f6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f001 f9d3 	bl	800b328 <osMessageQueuePut>
      break;
 8009f82:	e06a      	b.n	800a05a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d027      	beq.n	8009fde <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f9a:	23ff      	movs	r3, #255	; 0xff
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f997 	bl	800a2d0 <USBH_Get_StringDesc>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fa6:	7bbb      	ldrb	r3, [r7, #14]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d103      	bne.n	8009fb4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2207      	movs	r2, #7
 8009fb0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009fb2:	e054      	b.n	800a05e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d151      	bne.n	800a05e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2207      	movs	r2, #7
 8009fbe:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2205      	movs	r2, #5
 8009fc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f001 f9a6 	bl	800b328 <osMessageQueuePut>
      break;
 8009fdc:	e03f      	b.n	800a05e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2207      	movs	r2, #7
 8009fe2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2205      	movs	r2, #5
 8009fe8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f001 f994 	bl	800b328 <osMessageQueuePut>
      break;
 800a000:	e02d      	b.n	800a05e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d017      	beq.n	800a03c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a018:	23ff      	movs	r3, #255	; 0xff
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f958 	bl	800a2d0 <USBH_Get_StringDesc>
 800a020:	4603      	mov	r3, r0
 800a022:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d102      	bne.n	800a030 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a02e:	e018      	b.n	800a062 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a030:	7bbb      	ldrb	r3, [r7, #14]
 800a032:	2b03      	cmp	r3, #3
 800a034:	d115      	bne.n	800a062 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	73fb      	strb	r3, [r7, #15]
      break;
 800a03a:	e012      	b.n	800a062 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a03c:	2300      	movs	r3, #0
 800a03e:	73fb      	strb	r3, [r7, #15]
      break;
 800a040:	e00f      	b.n	800a062 <USBH_HandleEnum+0x44a>

    default:
      break;
 800a042:	bf00      	nop
 800a044:	e00e      	b.n	800a064 <USBH_HandleEnum+0x44c>
      break;
 800a046:	bf00      	nop
 800a048:	e00c      	b.n	800a064 <USBH_HandleEnum+0x44c>
      break;
 800a04a:	bf00      	nop
 800a04c:	e00a      	b.n	800a064 <USBH_HandleEnum+0x44c>
      break;
 800a04e:	bf00      	nop
 800a050:	e008      	b.n	800a064 <USBH_HandleEnum+0x44c>
      break;
 800a052:	bf00      	nop
 800a054:	e006      	b.n	800a064 <USBH_HandleEnum+0x44c>
      break;
 800a056:	bf00      	nop
 800a058:	e004      	b.n	800a064 <USBH_HandleEnum+0x44c>
      break;
 800a05a:	bf00      	nop
 800a05c:	e002      	b.n	800a064 <USBH_HandleEnum+0x44c>
      break;
 800a05e:	bf00      	nop
 800a060:	e000      	b.n	800a064 <USBH_HandleEnum+0x44c>
      break;
 800a062:	bf00      	nop
  }
  return Status;
 800a064:	7bfb      	ldrb	r3, [r7, #15]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop

0800a070 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a082:	bf00      	nop
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b082      	sub	sp, #8
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a09c:	1c5a      	adds	r2, r3, #1
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f804 	bl	800a0b2 <USBH_HandleSof>
}
 800a0aa:	bf00      	nop
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b082      	sub	sp, #8
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	2b0b      	cmp	r3, #11
 800a0c2:	d10a      	bne.n	800a0da <USBH_HandleSof+0x28>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	4798      	blx	r3
  }
}
 800a0da:	bf00      	nop
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b082      	sub	sp, #8
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a106:	2300      	movs	r3, #0
 800a108:	2200      	movs	r2, #0
 800a10a:	f001 f90d 	bl	800b328 <osMessageQueuePut>
#endif
#endif

  return;
 800a10e:	bf00      	nop
}
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a126:	bf00      	nop
}
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a166:	2300      	movs	r3, #0
 800a168:	2200      	movs	r2, #0
 800a16a:	f001 f8dd 	bl	800b328 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f003 fffc 	bl	800e196 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	791b      	ldrb	r3, [r3, #4]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fecf 	bl	800af48 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	795b      	ldrb	r3, [r3, #5]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fec9 	bl	800af48 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f001 f8ab 	bl	800b328 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a1f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f001 f8f7 	bl	800b3e8 <osMessageQueueGet>
 800a1fa:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1f0      	bne.n	800a1e4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7ff faa6 	bl	8009754 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a208:	e7ec      	b.n	800a1e4 <USBH_Process_OS+0x8>

0800a20a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b082      	sub	sp, #8
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a226:	2300      	movs	r3, #0
 800a228:	2200      	movs	r2, #0
 800a22a:	f001 f87d 	bl	800b328 <osMessageQueuePut>
#endif

  return USBH_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af02      	add	r7, sp, #8
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a24a:	78fb      	ldrb	r3, [r7, #3]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	4613      	mov	r3, r2
 800a252:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a256:	2100      	movs	r1, #0
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f864 	bl	800a326 <USBH_GetDescriptor>
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10a      	bne.n	800a27e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a274:	78fa      	ldrb	r2, [r7, #3]
 800a276:	b292      	uxth	r2, r2
 800a278:	4619      	mov	r1, r3
 800a27a:	f000 f918 	bl	800a4ae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af02      	add	r7, sp, #8
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	331c      	adds	r3, #28
 800a298:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a29a:	887b      	ldrh	r3, [r7, #2]
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f83d 	bl	800a326 <USBH_GetDescriptor>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	72fb      	strb	r3, [r7, #11]
 800a2b0:	7afb      	ldrb	r3, [r7, #11]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d107      	bne.n	800a2c6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a2bc:	887a      	ldrh	r2, [r7, #2]
 800a2be:	68f9      	ldr	r1, [r7, #12]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 f964 	bl	800a58e <USBH_ParseCfgDesc>
  }

  return status;
 800a2c6:	7afb      	ldrb	r3, [r7, #11]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b088      	sub	sp, #32
 800a2d4:	af02      	add	r7, sp, #8
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	607a      	str	r2, [r7, #4]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	460b      	mov	r3, r1
 800a2de:	72fb      	strb	r3, [r7, #11]
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a2e4:	7afb      	ldrb	r3, [r7, #11]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a2ec:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a2f4:	893b      	ldrh	r3, [r7, #8]
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 f812 	bl	800a326 <USBH_GetDescriptor>
 800a302:	4603      	mov	r3, r0
 800a304:	75fb      	strb	r3, [r7, #23]
 800a306:	7dfb      	ldrb	r3, [r7, #23]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d107      	bne.n	800a31c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a312:	893a      	ldrh	r2, [r7, #8]
 800a314:	6879      	ldr	r1, [r7, #4]
 800a316:	4618      	mov	r0, r3
 800a318:	f000 fa37 	bl	800a78a <USBH_ParseStringDesc>
  }

  return status;
 800a31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b084      	sub	sp, #16
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	607b      	str	r3, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	72fb      	strb	r3, [r7, #11]
 800a334:	4613      	mov	r3, r2
 800a336:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	789b      	ldrb	r3, [r3, #2]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d11c      	bne.n	800a37a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a340:	7afb      	ldrb	r3, [r7, #11]
 800a342:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a346:	b2da      	uxtb	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2206      	movs	r2, #6
 800a350:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	893a      	ldrh	r2, [r7, #8]
 800a356:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a358:	893b      	ldrh	r3, [r7, #8]
 800a35a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a35e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a362:	d104      	bne.n	800a36e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f240 4209 	movw	r2, #1033	; 0x409
 800a36a:	829a      	strh	r2, [r3, #20]
 800a36c:	e002      	b.n	800a374 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	8b3a      	ldrh	r2, [r7, #24]
 800a378:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a37a:	8b3b      	ldrh	r3, [r7, #24]
 800a37c:	461a      	mov	r2, r3
 800a37e:	6879      	ldr	r1, [r7, #4]
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 fa50 	bl	800a826 <USBH_CtlReq>
 800a386:	4603      	mov	r3, r0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	460b      	mov	r3, r1
 800a39a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	789b      	ldrb	r3, [r3, #2]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d10f      	bne.n	800a3c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2205      	movs	r2, #5
 800a3ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fa2c 	bl	800a826 <USBH_CtlReq>
 800a3ce:	4603      	mov	r3, r0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	789b      	ldrb	r3, [r3, #2]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d10e      	bne.n	800a40a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2209      	movs	r2, #9
 800a3f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	887a      	ldrh	r2, [r7, #2]
 800a3fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a40a:	2200      	movs	r2, #0
 800a40c:	2100      	movs	r1, #0
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fa09 	bl	800a826 <USBH_CtlReq>
 800a414:	4603      	mov	r3, r0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b082      	sub	sp, #8
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	460b      	mov	r3, r1
 800a428:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	789b      	ldrb	r3, [r3, #2]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d10f      	bne.n	800a452 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2203      	movs	r2, #3
 800a43c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a43e:	78fb      	ldrb	r3, [r7, #3]
 800a440:	b29a      	uxth	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a452:	2200      	movs	r2, #0
 800a454:	2100      	movs	r1, #0
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f9e5 	bl	800a826 <USBH_CtlReq>
 800a45c:	4603      	mov	r3, r0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b082      	sub	sp, #8
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	460b      	mov	r3, r1
 800a470:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	789b      	ldrb	r3, [r3, #2]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d10f      	bne.n	800a49a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2202      	movs	r2, #2
 800a47e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	b29a      	uxth	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a49a:	2200      	movs	r2, #0
 800a49c:	2100      	movs	r1, #0
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f9c1 	bl	800a826 <USBH_CtlReq>
 800a4a4:	4603      	mov	r3, r0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	60f8      	str	r0, [r7, #12]
 800a4b6:	60b9      	str	r1, [r7, #8]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	781a      	ldrb	r2, [r3, #0]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	785a      	ldrb	r2, [r3, #1]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	3302      	adds	r3, #2
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	3303      	adds	r3, #3
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	021b      	lsls	r3, r3, #8
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	791a      	ldrb	r2, [r3, #4]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	795a      	ldrb	r2, [r3, #5]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	799a      	ldrb	r2, [r3, #6]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	79da      	ldrb	r2, [r3, #7]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a508:	88fb      	ldrh	r3, [r7, #6]
 800a50a:	2b08      	cmp	r3, #8
 800a50c:	d939      	bls.n	800a582 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	3308      	adds	r3, #8
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	b29a      	uxth	r2, r3
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	3309      	adds	r3, #9
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	021b      	lsls	r3, r3, #8
 800a520:	b29b      	uxth	r3, r3
 800a522:	4313      	orrs	r3, r2
 800a524:	b29a      	uxth	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	330a      	adds	r3, #10
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	b29a      	uxth	r2, r3
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	330b      	adds	r3, #11
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	021b      	lsls	r3, r3, #8
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	4313      	orrs	r3, r2
 800a540:	b29a      	uxth	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	330c      	adds	r3, #12
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	330d      	adds	r3, #13
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	b29b      	uxth	r3, r3
 800a556:	021b      	lsls	r3, r3, #8
 800a558:	b29b      	uxth	r3, r3
 800a55a:	4313      	orrs	r3, r2
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	7b9a      	ldrb	r2, [r3, #14]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	7bda      	ldrb	r2, [r3, #15]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	7c1a      	ldrb	r2, [r3, #16]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	7c5a      	ldrb	r2, [r3, #17]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	745a      	strb	r2, [r3, #17]
  }
}
 800a582:	bf00      	nop
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b08a      	sub	sp, #40	; 0x28
 800a592:	af00      	add	r7, sp, #0
 800a594:	60f8      	str	r0, [r7, #12]
 800a596:	60b9      	str	r1, [r7, #8]
 800a598:	4613      	mov	r3, r2
 800a59a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	781a      	ldrb	r2, [r3, #0]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	785a      	ldrb	r2, [r3, #1]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	3302      	adds	r3, #2
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	3303      	adds	r3, #3
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	021b      	lsls	r3, r3, #8
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	791a      	ldrb	r2, [r3, #4]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	795a      	ldrb	r2, [r3, #5]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	799a      	ldrb	r2, [r3, #6]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	79da      	ldrb	r2, [r3, #7]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	7a1a      	ldrb	r2, [r3, #8]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a604:	88fb      	ldrh	r3, [r7, #6]
 800a606:	2b09      	cmp	r3, #9
 800a608:	d95f      	bls.n	800a6ca <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a60a:	2309      	movs	r3, #9
 800a60c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a60e:	2300      	movs	r3, #0
 800a610:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a612:	e051      	b.n	800a6b8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a614:	f107 0316 	add.w	r3, r7, #22
 800a618:	4619      	mov	r1, r3
 800a61a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a61c:	f000 f8e8 	bl	800a7f0 <USBH_GetNextDesc>
 800a620:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	785b      	ldrb	r3, [r3, #1]
 800a626:	2b04      	cmp	r3, #4
 800a628:	d146      	bne.n	800a6b8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a62a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a62e:	221a      	movs	r2, #26
 800a630:	fb02 f303 	mul.w	r3, r2, r3
 800a634:	3308      	adds	r3, #8
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	4413      	add	r3, r2
 800a63a:	3302      	adds	r3, #2
 800a63c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a63e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a640:	69f8      	ldr	r0, [r7, #28]
 800a642:	f000 f846 	bl	800a6d2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a646:	2300      	movs	r3, #0
 800a648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a650:	e022      	b.n	800a698 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a652:	f107 0316 	add.w	r3, r7, #22
 800a656:	4619      	mov	r1, r3
 800a658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a65a:	f000 f8c9 	bl	800a7f0 <USBH_GetNextDesc>
 800a65e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	785b      	ldrb	r3, [r3, #1]
 800a664:	2b05      	cmp	r3, #5
 800a666:	d117      	bne.n	800a698 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a668:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a66c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a670:	3201      	adds	r2, #1
 800a672:	00d2      	lsls	r2, r2, #3
 800a674:	211a      	movs	r1, #26
 800a676:	fb01 f303 	mul.w	r3, r1, r3
 800a67a:	4413      	add	r3, r2
 800a67c:	3308      	adds	r3, #8
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	4413      	add	r3, r2
 800a682:	3304      	adds	r3, #4
 800a684:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a688:	69b8      	ldr	r0, [r7, #24]
 800a68a:	f000 f851 	bl	800a730 <USBH_ParseEPDesc>
            ep_ix++;
 800a68e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a692:	3301      	adds	r3, #1
 800a694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	791b      	ldrb	r3, [r3, #4]
 800a69c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d204      	bcs.n	800a6ae <USBH_ParseCfgDesc+0x120>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	885a      	ldrh	r2, [r3, #2]
 800a6a8:	8afb      	ldrh	r3, [r7, #22]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d8d1      	bhi.n	800a652 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a6ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a6b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d804      	bhi.n	800a6ca <USBH_ParseCfgDesc+0x13c>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	885a      	ldrh	r2, [r3, #2]
 800a6c4:	8afb      	ldrh	r3, [r7, #22]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d8a4      	bhi.n	800a614 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a6ca:	bf00      	nop
 800a6cc:	3728      	adds	r7, #40	; 0x28
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	781a      	ldrb	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	785a      	ldrb	r2, [r3, #1]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	789a      	ldrb	r2, [r3, #2]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	78da      	ldrb	r2, [r3, #3]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	791a      	ldrb	r2, [r3, #4]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	795a      	ldrb	r2, [r3, #5]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	799a      	ldrb	r2, [r3, #6]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	79da      	ldrb	r2, [r3, #7]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	7a1a      	ldrb	r2, [r3, #8]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	721a      	strb	r2, [r3, #8]
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	781a      	ldrb	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	785a      	ldrb	r2, [r3, #1]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	789a      	ldrb	r2, [r3, #2]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	78da      	ldrb	r2, [r3, #3]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	3304      	adds	r3, #4
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	b29a      	uxth	r2, r3
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	3305      	adds	r3, #5
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	b29b      	uxth	r3, r3
 800a76a:	021b      	lsls	r3, r3, #8
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	4313      	orrs	r3, r2
 800a770:	b29a      	uxth	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	799a      	ldrb	r2, [r3, #6]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	719a      	strb	r2, [r3, #6]
}
 800a77e:	bf00      	nop
 800a780:	370c      	adds	r7, #12
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b087      	sub	sp, #28
 800a78e:	af00      	add	r7, sp, #0
 800a790:	60f8      	str	r0, [r7, #12]
 800a792:	60b9      	str	r1, [r7, #8]
 800a794:	4613      	mov	r3, r2
 800a796:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	3301      	adds	r3, #1
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d120      	bne.n	800a7e4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	1e9a      	subs	r2, r3, #2
 800a7a8:	88fb      	ldrh	r3, [r7, #6]
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	bf28      	it	cs
 800a7ae:	4613      	movcs	r3, r2
 800a7b0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3302      	adds	r3, #2
 800a7b6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	82fb      	strh	r3, [r7, #22]
 800a7bc:	e00b      	b.n	800a7d6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a7be:	8afb      	ldrh	r3, [r7, #22]
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	781a      	ldrb	r2, [r3, #0]
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a7d0:	8afb      	ldrh	r3, [r7, #22]
 800a7d2:	3302      	adds	r3, #2
 800a7d4:	82fb      	strh	r3, [r7, #22]
 800a7d6:	8afa      	ldrh	r2, [r7, #22]
 800a7d8:	8abb      	ldrh	r3, [r7, #20]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d3ef      	bcc.n	800a7be <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	701a      	strb	r2, [r3, #0]
  }
}
 800a7e4:	bf00      	nop
 800a7e6:	371c      	adds	r7, #28
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	881a      	ldrh	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	b29b      	uxth	r3, r3
 800a804:	4413      	add	r3, r2
 800a806:	b29a      	uxth	r2, r3
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4413      	add	r3, r2
 800a816:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a818:	68fb      	ldr	r3, [r7, #12]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b086      	sub	sp, #24
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	60b9      	str	r1, [r7, #8]
 800a830:	4613      	mov	r3, r2
 800a832:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a834:	2301      	movs	r3, #1
 800a836:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	789b      	ldrb	r3, [r3, #2]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d002      	beq.n	800a846 <USBH_CtlReq+0x20>
 800a840:	2b02      	cmp	r3, #2
 800a842:	d01d      	beq.n	800a880 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a844:	e043      	b.n	800a8ce <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	88fa      	ldrh	r2, [r7, #6]
 800a850:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2201      	movs	r2, #1
 800a856:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2202      	movs	r2, #2
 800a85c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a85e:	2301      	movs	r3, #1
 800a860:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2203      	movs	r2, #3
 800a866:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a876:	2300      	movs	r3, #0
 800a878:	2200      	movs	r2, #0
 800a87a:	f000 fd55 	bl	800b328 <osMessageQueuePut>
      break;
 800a87e:	e026      	b.n	800a8ce <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 f829 	bl	800a8d8 <USBH_HandleControl>
 800a886:	4603      	mov	r3, r0
 800a888:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a88a:	7dfb      	ldrb	r3, [r7, #23]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <USBH_CtlReq+0x70>
 800a890:	7dfb      	ldrb	r3, [r7, #23]
 800a892:	2b03      	cmp	r3, #3
 800a894:	d106      	bne.n	800a8a4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2201      	movs	r2, #1
 800a89a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	761a      	strb	r2, [r3, #24]
 800a8a2:	e005      	b.n	800a8b0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a8a4:	7dfb      	ldrb	r3, [r7, #23]
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d102      	bne.n	800a8b0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2203      	movs	r2, #3
 800a8b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f000 fd2e 	bl	800b328 <osMessageQueuePut>
      break;
 800a8cc:	bf00      	nop
  }
  return status;
 800a8ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af02      	add	r7, sp, #8
 800a8de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	7e1b      	ldrb	r3, [r3, #24]
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	2b0a      	cmp	r3, #10
 800a8f0:	f200 8229 	bhi.w	800ad46 <USBH_HandleControl+0x46e>
 800a8f4:	a201      	add	r2, pc, #4	; (adr r2, 800a8fc <USBH_HandleControl+0x24>)
 800a8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fa:	bf00      	nop
 800a8fc:	0800a929 	.word	0x0800a929
 800a900:	0800a943 	.word	0x0800a943
 800a904:	0800a9e5 	.word	0x0800a9e5
 800a908:	0800aa0b 	.word	0x0800aa0b
 800a90c:	0800aa97 	.word	0x0800aa97
 800a910:	0800aac1 	.word	0x0800aac1
 800a914:	0800ab83 	.word	0x0800ab83
 800a918:	0800aba5 	.word	0x0800aba5
 800a91c:	0800ac37 	.word	0x0800ac37
 800a920:	0800ac5d 	.word	0x0800ac5d
 800a924:	0800acef 	.word	0x0800acef
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f103 0110 	add.w	r1, r3, #16
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	795b      	ldrb	r3, [r3, #5]
 800a932:	461a      	mov	r2, r3
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fa17 	bl	800ad68 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2202      	movs	r2, #2
 800a93e:	761a      	strb	r2, [r3, #24]
      break;
 800a940:	e20c      	b.n	800ad5c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	795b      	ldrb	r3, [r3, #5]
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f003 fd13 	bl	800e374 <USBH_LL_GetURBState>
 800a94e:	4603      	mov	r3, r0
 800a950:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a952:	7bbb      	ldrb	r3, [r7, #14]
 800a954:	2b01      	cmp	r3, #1
 800a956:	d12c      	bne.n	800a9b2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	7c1b      	ldrb	r3, [r3, #16]
 800a95c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a960:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	8adb      	ldrh	r3, [r3, #22]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00a      	beq.n	800a980 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a96a:	7b7b      	ldrb	r3, [r7, #13]
 800a96c:	2b80      	cmp	r3, #128	; 0x80
 800a96e:	d103      	bne.n	800a978 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2203      	movs	r2, #3
 800a974:	761a      	strb	r2, [r3, #24]
 800a976:	e00d      	b.n	800a994 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2205      	movs	r2, #5
 800a97c:	761a      	strb	r2, [r3, #24]
 800a97e:	e009      	b.n	800a994 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a980:	7b7b      	ldrb	r3, [r7, #13]
 800a982:	2b80      	cmp	r3, #128	; 0x80
 800a984:	d103      	bne.n	800a98e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2209      	movs	r2, #9
 800a98a:	761a      	strb	r2, [r3, #24]
 800a98c:	e002      	b.n	800a994 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2207      	movs	r2, #7
 800a992:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2203      	movs	r2, #3
 800a998:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f000 fcbc 	bl	800b328 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a9b0:	e1cb      	b.n	800ad4a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
 800a9b4:	2b04      	cmp	r3, #4
 800a9b6:	d003      	beq.n	800a9c0 <USBH_HandleControl+0xe8>
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	f040 81c5 	bne.w	800ad4a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	220b      	movs	r2, #11
 800a9c4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2203      	movs	r2, #3
 800a9ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a9da:	2300      	movs	r3, #0
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f000 fca3 	bl	800b328 <osMessageQueuePut>
      break;
 800a9e2:	e1b2      	b.n	800ad4a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6899      	ldr	r1, [r3, #8]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	899a      	ldrh	r2, [r3, #12]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	791b      	ldrb	r3, [r3, #4]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f9f2 	bl	800ade6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2204      	movs	r2, #4
 800aa06:	761a      	strb	r2, [r3, #24]
      break;
 800aa08:	e1a8      	b.n	800ad5c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	791b      	ldrb	r3, [r3, #4]
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f003 fcaf 	bl	800e374 <USBH_LL_GetURBState>
 800aa16:	4603      	mov	r3, r0
 800aa18:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800aa1a:	7bbb      	ldrb	r3, [r7, #14]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d110      	bne.n	800aa42 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2209      	movs	r2, #9
 800aa24:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2203      	movs	r2, #3
 800aa2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f000 fc73 	bl	800b328 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800aa42:	7bbb      	ldrb	r3, [r7, #14]
 800aa44:	2b05      	cmp	r3, #5
 800aa46:	d110      	bne.n	800aa6a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2203      	movs	r2, #3
 800aa50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aa60:	2300      	movs	r3, #0
 800aa62:	2200      	movs	r2, #0
 800aa64:	f000 fc60 	bl	800b328 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aa68:	e171      	b.n	800ad4e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800aa6a:	7bbb      	ldrb	r3, [r7, #14]
 800aa6c:	2b04      	cmp	r3, #4
 800aa6e:	f040 816e 	bne.w	800ad4e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	220b      	movs	r2, #11
 800aa76:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2203      	movs	r2, #3
 800aa7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f000 fc4a 	bl	800b328 <osMessageQueuePut>
      break;
 800aa94:	e15b      	b.n	800ad4e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6899      	ldr	r1, [r3, #8]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	899a      	ldrh	r2, [r3, #12]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	795b      	ldrb	r3, [r3, #5]
 800aaa2:	2001      	movs	r0, #1
 800aaa4:	9000      	str	r0, [sp, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f978 	bl	800ad9c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2206      	movs	r2, #6
 800aabc:	761a      	strb	r2, [r3, #24]
      break;
 800aabe:	e14d      	b.n	800ad5c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	795b      	ldrb	r3, [r3, #5]
 800aac4:	4619      	mov	r1, r3
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f003 fc54 	bl	800e374 <USBH_LL_GetURBState>
 800aacc:	4603      	mov	r3, r0
 800aace:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aad0:	7bbb      	ldrb	r3, [r7, #14]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d111      	bne.n	800aafa <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2207      	movs	r2, #7
 800aada:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2203      	movs	r2, #3
 800aae0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f000 fc18 	bl	800b328 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aaf8:	e12b      	b.n	800ad52 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800aafa:	7bbb      	ldrb	r3, [r7, #14]
 800aafc:	2b05      	cmp	r3, #5
 800aafe:	d113      	bne.n	800ab28 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	220c      	movs	r2, #12
 800ab04:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ab06:	2303      	movs	r3, #3
 800ab08:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2203      	movs	r2, #3
 800ab0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ab1e:	2300      	movs	r3, #0
 800ab20:	2200      	movs	r2, #0
 800ab22:	f000 fc01 	bl	800b328 <osMessageQueuePut>
      break;
 800ab26:	e114      	b.n	800ad52 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab28:	7bbb      	ldrb	r3, [r7, #14]
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d111      	bne.n	800ab52 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2205      	movs	r2, #5
 800ab32:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2203      	movs	r2, #3
 800ab38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ab48:	2300      	movs	r3, #0
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f000 fbec 	bl	800b328 <osMessageQueuePut>
      break;
 800ab50:	e0ff      	b.n	800ad52 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	2b04      	cmp	r3, #4
 800ab56:	f040 80fc 	bne.w	800ad52 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	220b      	movs	r2, #11
 800ab5e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ab60:	2302      	movs	r3, #2
 800ab62:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2203      	movs	r2, #3
 800ab68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ab78:	2300      	movs	r3, #0
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f000 fbd4 	bl	800b328 <osMessageQueuePut>
      break;
 800ab80:	e0e7      	b.n	800ad52 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	791b      	ldrb	r3, [r3, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	2100      	movs	r1, #0
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f92b 	bl	800ade6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2208      	movs	r2, #8
 800aba0:	761a      	strb	r2, [r3, #24]

      break;
 800aba2:	e0db      	b.n	800ad5c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	791b      	ldrb	r3, [r3, #4]
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f003 fbe2 	bl	800e374 <USBH_LL_GetURBState>
 800abb0:	4603      	mov	r3, r0
 800abb2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d113      	bne.n	800abe2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	220d      	movs	r2, #13
 800abbe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2203      	movs	r2, #3
 800abc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800abd8:	2300      	movs	r3, #0
 800abda:	2200      	movs	r2, #0
 800abdc:	f000 fba4 	bl	800b328 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800abe0:	e0b9      	b.n	800ad56 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800abe2:	7bbb      	ldrb	r3, [r7, #14]
 800abe4:	2b04      	cmp	r3, #4
 800abe6:	d111      	bne.n	800ac0c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	220b      	movs	r2, #11
 800abec:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2203      	movs	r2, #3
 800abf2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ac02:	2300      	movs	r3, #0
 800ac04:	2200      	movs	r2, #0
 800ac06:	f000 fb8f 	bl	800b328 <osMessageQueuePut>
      break;
 800ac0a:	e0a4      	b.n	800ad56 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800ac0c:	7bbb      	ldrb	r3, [r7, #14]
 800ac0e:	2b05      	cmp	r3, #5
 800ac10:	f040 80a1 	bne.w	800ad56 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800ac14:	2303      	movs	r3, #3
 800ac16:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2203      	movs	r2, #3
 800ac1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f000 fb7a 	bl	800b328 <osMessageQueuePut>
      break;
 800ac34:	e08f      	b.n	800ad56 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	795b      	ldrb	r3, [r3, #5]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	9200      	str	r2, [sp, #0]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	2100      	movs	r1, #0
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f8aa 	bl	800ad9c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	220a      	movs	r2, #10
 800ac58:	761a      	strb	r2, [r3, #24]
      break;
 800ac5a:	e07f      	b.n	800ad5c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	795b      	ldrb	r3, [r3, #5]
 800ac60:	4619      	mov	r1, r3
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f003 fb86 	bl	800e374 <USBH_LL_GetURBState>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d113      	bne.n	800ac9a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	220d      	movs	r2, #13
 800ac7a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2203      	movs	r2, #3
 800ac80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ac90:	2300      	movs	r3, #0
 800ac92:	2200      	movs	r2, #0
 800ac94:	f000 fb48 	bl	800b328 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ac98:	e05f      	b.n	800ad5a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	2b02      	cmp	r3, #2
 800ac9e:	d111      	bne.n	800acc4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2209      	movs	r2, #9
 800aca4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2203      	movs	r2, #3
 800acaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800acba:	2300      	movs	r3, #0
 800acbc:	2200      	movs	r2, #0
 800acbe:	f000 fb33 	bl	800b328 <osMessageQueuePut>
      break;
 800acc2:	e04a      	b.n	800ad5a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
 800acc6:	2b04      	cmp	r3, #4
 800acc8:	d147      	bne.n	800ad5a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	220b      	movs	r2, #11
 800acce:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2203      	movs	r2, #3
 800acd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ace4:	2300      	movs	r3, #0
 800ace6:	2200      	movs	r2, #0
 800ace8:	f000 fb1e 	bl	800b328 <osMessageQueuePut>
      break;
 800acec:	e035      	b.n	800ad5a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	7e5b      	ldrb	r3, [r3, #25]
 800acf2:	3301      	adds	r3, #1
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	765a      	strb	r2, [r3, #25]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	7e5b      	ldrb	r3, [r3, #25]
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	d806      	bhi.n	800ad10 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2201      	movs	r2, #1
 800ad06:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ad0e:	e025      	b.n	800ad5c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad16:	2106      	movs	r1, #6
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	795b      	ldrb	r3, [r3, #5]
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 f90d 	bl	800af48 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	791b      	ldrb	r3, [r3, #4]
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f907 	bl	800af48 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ad40:	2302      	movs	r3, #2
 800ad42:	73fb      	strb	r3, [r7, #15]
      break;
 800ad44:	e00a      	b.n	800ad5c <USBH_HandleControl+0x484>

    default:
      break;
 800ad46:	bf00      	nop
 800ad48:	e008      	b.n	800ad5c <USBH_HandleControl+0x484>
      break;
 800ad4a:	bf00      	nop
 800ad4c:	e006      	b.n	800ad5c <USBH_HandleControl+0x484>
      break;
 800ad4e:	bf00      	nop
 800ad50:	e004      	b.n	800ad5c <USBH_HandleControl+0x484>
      break;
 800ad52:	bf00      	nop
 800ad54:	e002      	b.n	800ad5c <USBH_HandleControl+0x484>
      break;
 800ad56:	bf00      	nop
 800ad58:	e000      	b.n	800ad5c <USBH_HandleControl+0x484>
      break;
 800ad5a:	bf00      	nop
  }

  return status;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop

0800ad68 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af04      	add	r7, sp, #16
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	4613      	mov	r3, r2
 800ad74:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ad76:	79f9      	ldrb	r1, [r7, #7]
 800ad78:	2300      	movs	r3, #0
 800ad7a:	9303      	str	r3, [sp, #12]
 800ad7c:	2308      	movs	r3, #8
 800ad7e:	9302      	str	r3, [sp, #8]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	2300      	movs	r3, #0
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	2300      	movs	r3, #0
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f003 fac0 	bl	800e312 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af04      	add	r7, sp, #16
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	4611      	mov	r1, r2
 800ada8:	461a      	mov	r2, r3
 800adaa:	460b      	mov	r3, r1
 800adac:	80fb      	strh	r3, [r7, #6]
 800adae:	4613      	mov	r3, r2
 800adb0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800adbc:	2300      	movs	r3, #0
 800adbe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800adc0:	7979      	ldrb	r1, [r7, #5]
 800adc2:	7e3b      	ldrb	r3, [r7, #24]
 800adc4:	9303      	str	r3, [sp, #12]
 800adc6:	88fb      	ldrh	r3, [r7, #6]
 800adc8:	9302      	str	r3, [sp, #8]
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	9301      	str	r3, [sp, #4]
 800adce:	2301      	movs	r3, #1
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	2300      	movs	r3, #0
 800add4:	2200      	movs	r2, #0
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f003 fa9b 	bl	800e312 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b088      	sub	sp, #32
 800adea:	af04      	add	r7, sp, #16
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	4611      	mov	r1, r2
 800adf2:	461a      	mov	r2, r3
 800adf4:	460b      	mov	r3, r1
 800adf6:	80fb      	strh	r3, [r7, #6]
 800adf8:	4613      	mov	r3, r2
 800adfa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800adfc:	7979      	ldrb	r1, [r7, #5]
 800adfe:	2300      	movs	r3, #0
 800ae00:	9303      	str	r3, [sp, #12]
 800ae02:	88fb      	ldrh	r3, [r7, #6]
 800ae04:	9302      	str	r3, [sp, #8]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	9301      	str	r3, [sp, #4]
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	9300      	str	r3, [sp, #0]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2201      	movs	r2, #1
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	f003 fa7d 	bl	800e312 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ae18:	2300      	movs	r3, #0

}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b088      	sub	sp, #32
 800ae26:	af04      	add	r7, sp, #16
 800ae28:	60f8      	str	r0, [r7, #12]
 800ae2a:	60b9      	str	r1, [r7, #8]
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	461a      	mov	r2, r3
 800ae30:	460b      	mov	r3, r1
 800ae32:	80fb      	strh	r3, [r7, #6]
 800ae34:	4613      	mov	r3, r2
 800ae36:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d001      	beq.n	800ae46 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ae42:	2300      	movs	r3, #0
 800ae44:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ae46:	7979      	ldrb	r1, [r7, #5]
 800ae48:	7e3b      	ldrb	r3, [r7, #24]
 800ae4a:	9303      	str	r3, [sp, #12]
 800ae4c:	88fb      	ldrh	r3, [r7, #6]
 800ae4e:	9302      	str	r3, [sp, #8]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	9301      	str	r3, [sp, #4]
 800ae54:	2301      	movs	r3, #1
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	2302      	movs	r3, #2
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f003 fa58 	bl	800e312 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b088      	sub	sp, #32
 800ae70:	af04      	add	r7, sp, #16
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	4611      	mov	r1, r2
 800ae78:	461a      	mov	r2, r3
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	80fb      	strh	r3, [r7, #6]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ae82:	7979      	ldrb	r1, [r7, #5]
 800ae84:	2300      	movs	r3, #0
 800ae86:	9303      	str	r3, [sp, #12]
 800ae88:	88fb      	ldrh	r3, [r7, #6]
 800ae8a:	9302      	str	r3, [sp, #8]
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	9301      	str	r3, [sp, #4]
 800ae90:	2301      	movs	r3, #1
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	2302      	movs	r3, #2
 800ae96:	2201      	movs	r2, #1
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f003 fa3a 	bl	800e312 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af04      	add	r7, sp, #16
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	4608      	mov	r0, r1
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	70fb      	strb	r3, [r7, #3]
 800aeba:	460b      	mov	r3, r1
 800aebc:	70bb      	strb	r3, [r7, #2]
 800aebe:	4613      	mov	r3, r2
 800aec0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aec2:	7878      	ldrb	r0, [r7, #1]
 800aec4:	78ba      	ldrb	r2, [r7, #2]
 800aec6:	78f9      	ldrb	r1, [r7, #3]
 800aec8:	8b3b      	ldrh	r3, [r7, #24]
 800aeca:	9302      	str	r3, [sp, #8]
 800aecc:	7d3b      	ldrb	r3, [r7, #20]
 800aece:	9301      	str	r3, [sp, #4]
 800aed0:	7c3b      	ldrb	r3, [r7, #16]
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	4603      	mov	r3, r0
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f003 f9cd 	bl	800e276 <USBH_LL_OpenPipe>

  return USBH_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	460b      	mov	r3, r1
 800aef0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800aef2:	78fb      	ldrb	r3, [r7, #3]
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f003 f9ec 	bl	800e2d4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b084      	sub	sp, #16
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	460b      	mov	r3, r1
 800af10:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f836 	bl	800af84 <USBH_GetFreePipe>
 800af18:	4603      	mov	r3, r0
 800af1a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800af1c:	89fb      	ldrh	r3, [r7, #14]
 800af1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af22:	4293      	cmp	r3, r2
 800af24:	d00a      	beq.n	800af3c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800af26:	78fa      	ldrb	r2, [r7, #3]
 800af28:	89fb      	ldrh	r3, [r7, #14]
 800af2a:	f003 030f 	and.w	r3, r3, #15
 800af2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af32:	6879      	ldr	r1, [r7, #4]
 800af34:	33e0      	adds	r3, #224	; 0xe0
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	440b      	add	r3, r1
 800af3a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af3c:	89fb      	ldrh	r3, [r7, #14]
 800af3e:	b2db      	uxtb	r3, r3
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800af54:	78fb      	ldrb	r3, [r7, #3]
 800af56:	2b0a      	cmp	r3, #10
 800af58:	d80d      	bhi.n	800af76 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800af5a:	78fb      	ldrb	r3, [r7, #3]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	33e0      	adds	r3, #224	; 0xe0
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	78fb      	ldrb	r3, [r7, #3]
 800af68:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800af6c:	6879      	ldr	r1, [r7, #4]
 800af6e:	33e0      	adds	r3, #224	; 0xe0
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	440b      	add	r3, r1
 800af74:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800af8c:	2300      	movs	r3, #0
 800af8e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800af90:	2300      	movs	r3, #0
 800af92:	73fb      	strb	r3, [r7, #15]
 800af94:	e00f      	b.n	800afb6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800af96:	7bfb      	ldrb	r3, [r7, #15]
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	33e0      	adds	r3, #224	; 0xe0
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d102      	bne.n	800afb0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
 800afac:	b29b      	uxth	r3, r3
 800afae:	e007      	b.n	800afc0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800afb0:	7bfb      	ldrb	r3, [r7, #15]
 800afb2:	3301      	adds	r3, #1
 800afb4:	73fb      	strb	r3, [r7, #15]
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
 800afb8:	2b0a      	cmp	r3, #10
 800afba:	d9ec      	bls.n	800af96 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800afbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <__NVIC_SetPriority>:
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	4603      	mov	r3, r0
 800afd4:	6039      	str	r1, [r7, #0]
 800afd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800afd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	db0a      	blt.n	800aff6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	490c      	ldr	r1, [pc, #48]	; (800b018 <__NVIC_SetPriority+0x4c>)
 800afe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afea:	0112      	lsls	r2, r2, #4
 800afec:	b2d2      	uxtb	r2, r2
 800afee:	440b      	add	r3, r1
 800aff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aff4:	e00a      	b.n	800b00c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	4908      	ldr	r1, [pc, #32]	; (800b01c <__NVIC_SetPriority+0x50>)
 800affc:	79fb      	ldrb	r3, [r7, #7]
 800affe:	f003 030f 	and.w	r3, r3, #15
 800b002:	3b04      	subs	r3, #4
 800b004:	0112      	lsls	r2, r2, #4
 800b006:	b2d2      	uxtb	r2, r2
 800b008:	440b      	add	r3, r1
 800b00a:	761a      	strb	r2, [r3, #24]
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	e000e100 	.word	0xe000e100
 800b01c:	e000ed00 	.word	0xe000ed00

0800b020 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b024:	4b05      	ldr	r3, [pc, #20]	; (800b03c <SysTick_Handler+0x1c>)
 800b026:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b028:	f001 fee8 	bl	800cdfc <xTaskGetSchedulerState>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d001      	beq.n	800b036 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b032:	f002 fcd1 	bl	800d9d8 <xPortSysTickHandler>
  }
}
 800b036:	bf00      	nop
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	e000e010 	.word	0xe000e010

0800b040 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b040:	b580      	push	{r7, lr}
 800b042:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b044:	2100      	movs	r1, #0
 800b046:	f06f 0004 	mvn.w	r0, #4
 800b04a:	f7ff ffbf 	bl	800afcc <__NVIC_SetPriority>
#endif
}
 800b04e:	bf00      	nop
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b05a:	f3ef 8305 	mrs	r3, IPSR
 800b05e:	603b      	str	r3, [r7, #0]
  return(result);
 800b060:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b062:	2b00      	cmp	r3, #0
 800b064:	d003      	beq.n	800b06e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b066:	f06f 0305 	mvn.w	r3, #5
 800b06a:	607b      	str	r3, [r7, #4]
 800b06c:	e00c      	b.n	800b088 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b06e:	4b0a      	ldr	r3, [pc, #40]	; (800b098 <osKernelInitialize+0x44>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d105      	bne.n	800b082 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b076:	4b08      	ldr	r3, [pc, #32]	; (800b098 <osKernelInitialize+0x44>)
 800b078:	2201      	movs	r2, #1
 800b07a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b07c:	2300      	movs	r3, #0
 800b07e:	607b      	str	r3, [r7, #4]
 800b080:	e002      	b.n	800b088 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b086:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b088:	687b      	ldr	r3, [r7, #4]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	370c      	adds	r7, #12
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	200004bc 	.word	0x200004bc

0800b09c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0a2:	f3ef 8305 	mrs	r3, IPSR
 800b0a6:	603b      	str	r3, [r7, #0]
  return(result);
 800b0a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d003      	beq.n	800b0b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b0ae:	f06f 0305 	mvn.w	r3, #5
 800b0b2:	607b      	str	r3, [r7, #4]
 800b0b4:	e010      	b.n	800b0d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b0b6:	4b0b      	ldr	r3, [pc, #44]	; (800b0e4 <osKernelStart+0x48>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d109      	bne.n	800b0d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b0be:	f7ff ffbf 	bl	800b040 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b0c2:	4b08      	ldr	r3, [pc, #32]	; (800b0e4 <osKernelStart+0x48>)
 800b0c4:	2202      	movs	r2, #2
 800b0c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b0c8:	f001 fa50 	bl	800c56c <vTaskStartScheduler>
      stat = osOK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	607b      	str	r3, [r7, #4]
 800b0d0:	e002      	b.n	800b0d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b0d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b0d8:	687b      	ldr	r3, [r7, #4]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	200004bc 	.word	0x200004bc

0800b0e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08e      	sub	sp, #56	; 0x38
 800b0ec:	af04      	add	r7, sp, #16
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0f8:	f3ef 8305 	mrs	r3, IPSR
 800b0fc:	617b      	str	r3, [r7, #20]
  return(result);
 800b0fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b100:	2b00      	cmp	r3, #0
 800b102:	d17e      	bne.n	800b202 <osThreadNew+0x11a>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d07b      	beq.n	800b202 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b10a:	2380      	movs	r3, #128	; 0x80
 800b10c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b10e:	2318      	movs	r3, #24
 800b110:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b11a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d045      	beq.n	800b1ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <osThreadNew+0x48>
        name = attr->name;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d008      	beq.n	800b156 <osThreadNew+0x6e>
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	2b38      	cmp	r3, #56	; 0x38
 800b148:	d805      	bhi.n	800b156 <osThreadNew+0x6e>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <osThreadNew+0x72>
        return (NULL);
 800b156:	2300      	movs	r3, #0
 800b158:	e054      	b.n	800b204 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d003      	beq.n	800b16a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	089b      	lsrs	r3, r3, #2
 800b168:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00e      	beq.n	800b190 <osThreadNew+0xa8>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	2b5b      	cmp	r3, #91	; 0x5b
 800b178:	d90a      	bls.n	800b190 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d006      	beq.n	800b190 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d002      	beq.n	800b190 <osThreadNew+0xa8>
        mem = 1;
 800b18a:	2301      	movs	r3, #1
 800b18c:	61bb      	str	r3, [r7, #24]
 800b18e:	e010      	b.n	800b1b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10c      	bne.n	800b1b2 <osThreadNew+0xca>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d108      	bne.n	800b1b2 <osThreadNew+0xca>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d104      	bne.n	800b1b2 <osThreadNew+0xca>
          mem = 0;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	61bb      	str	r3, [r7, #24]
 800b1ac:	e001      	b.n	800b1b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d110      	bne.n	800b1da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b1c0:	9202      	str	r2, [sp, #8]
 800b1c2:	9301      	str	r3, [sp, #4]
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	6a3a      	ldr	r2, [r7, #32]
 800b1cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f000 fff6 	bl	800c1c0 <xTaskCreateStatic>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	613b      	str	r3, [r7, #16]
 800b1d8:	e013      	b.n	800b202 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d110      	bne.n	800b202 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	f107 0310 	add.w	r3, r7, #16
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f001 f841 	bl	800c27a <xTaskCreate>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d001      	beq.n	800b202 <osThreadNew+0x11a>
            hTask = NULL;
 800b1fe:	2300      	movs	r3, #0
 800b200:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b202:	693b      	ldr	r3, [r7, #16]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3728      	adds	r7, #40	; 0x28
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b214:	f3ef 8305 	mrs	r3, IPSR
 800b218:	60bb      	str	r3, [r7, #8]
  return(result);
 800b21a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d003      	beq.n	800b228 <osDelay+0x1c>
    stat = osErrorISR;
 800b220:	f06f 0305 	mvn.w	r3, #5
 800b224:	60fb      	str	r3, [r7, #12]
 800b226:	e007      	b.n	800b238 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b228:	2300      	movs	r3, #0
 800b22a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d002      	beq.n	800b238 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f001 f966 	bl	800c504 <vTaskDelay>
    }
  }

  return (stat);
 800b238:	68fb      	ldr	r3, [r7, #12]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b242:	b580      	push	{r7, lr}
 800b244:	b08a      	sub	sp, #40	; 0x28
 800b246:	af02      	add	r7, sp, #8
 800b248:	60f8      	str	r0, [r7, #12]
 800b24a:	60b9      	str	r1, [r7, #8]
 800b24c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b252:	f3ef 8305 	mrs	r3, IPSR
 800b256:	613b      	str	r3, [r7, #16]
  return(result);
 800b258:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d15f      	bne.n	800b31e <osMessageQueueNew+0xdc>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d05c      	beq.n	800b31e <osMessageQueueNew+0xdc>
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d059      	beq.n	800b31e <osMessageQueueNew+0xdc>
    mem = -1;
 800b26a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b26e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d029      	beq.n	800b2ca <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d012      	beq.n	800b2a4 <osMessageQueueNew+0x62>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	2b4f      	cmp	r3, #79	; 0x4f
 800b284:	d90e      	bls.n	800b2a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00a      	beq.n	800b2a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	695a      	ldr	r2, [r3, #20]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	68b9      	ldr	r1, [r7, #8]
 800b296:	fb01 f303 	mul.w	r3, r1, r3
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d302      	bcc.n	800b2a4 <osMessageQueueNew+0x62>
        mem = 1;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	61bb      	str	r3, [r7, #24]
 800b2a2:	e014      	b.n	800b2ce <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d110      	bne.n	800b2ce <osMessageQueueNew+0x8c>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10c      	bne.n	800b2ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d108      	bne.n	800b2ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	695b      	ldr	r3, [r3, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d104      	bne.n	800b2ce <osMessageQueueNew+0x8c>
          mem = 0;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	61bb      	str	r3, [r7, #24]
 800b2c8:	e001      	b.n	800b2ce <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d10b      	bne.n	800b2ec <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	691a      	ldr	r2, [r3, #16]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	2100      	movs	r1, #0
 800b2de:	9100      	str	r1, [sp, #0]
 800b2e0:	68b9      	ldr	r1, [r7, #8]
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 fa2e 	bl	800b744 <xQueueGenericCreateStatic>
 800b2e8:	61f8      	str	r0, [r7, #28]
 800b2ea:	e008      	b.n	800b2fe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d105      	bne.n	800b2fe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	68b9      	ldr	r1, [r7, #8]
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f000 fa9c 	bl	800b834 <xQueueGenericCreate>
 800b2fc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00c      	beq.n	800b31e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	617b      	str	r3, [r7, #20]
 800b310:	e001      	b.n	800b316 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b316:	6979      	ldr	r1, [r7, #20]
 800b318:	69f8      	ldr	r0, [r7, #28]
 800b31a:	f000 fef3 	bl	800c104 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b31e:	69fb      	ldr	r3, [r7, #28]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3720      	adds	r7, #32
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b328:	b580      	push	{r7, lr}
 800b32a:	b088      	sub	sp, #32
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	603b      	str	r3, [r7, #0]
 800b334:	4613      	mov	r3, r2
 800b336:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b340:	f3ef 8305 	mrs	r3, IPSR
 800b344:	617b      	str	r3, [r7, #20]
  return(result);
 800b346:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d028      	beq.n	800b39e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d005      	beq.n	800b35e <osMessageQueuePut+0x36>
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <osMessageQueuePut+0x36>
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d003      	beq.n	800b366 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b35e:	f06f 0303 	mvn.w	r3, #3
 800b362:	61fb      	str	r3, [r7, #28]
 800b364:	e038      	b.n	800b3d8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b366:	2300      	movs	r3, #0
 800b368:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b36a:	f107 0210 	add.w	r2, r7, #16
 800b36e:	2300      	movs	r3, #0
 800b370:	68b9      	ldr	r1, [r7, #8]
 800b372:	69b8      	ldr	r0, [r7, #24]
 800b374:	f000 fbba 	bl	800baec <xQueueGenericSendFromISR>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d003      	beq.n	800b386 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b37e:	f06f 0302 	mvn.w	r3, #2
 800b382:	61fb      	str	r3, [r7, #28]
 800b384:	e028      	b.n	800b3d8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d025      	beq.n	800b3d8 <osMessageQueuePut+0xb0>
 800b38c:	4b15      	ldr	r3, [pc, #84]	; (800b3e4 <osMessageQueuePut+0xbc>)
 800b38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b392:	601a      	str	r2, [r3, #0]
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	f3bf 8f6f 	isb	sy
 800b39c:	e01c      	b.n	800b3d8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <osMessageQueuePut+0x82>
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d103      	bne.n	800b3b2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b3aa:	f06f 0303 	mvn.w	r3, #3
 800b3ae:	61fb      	str	r3, [r7, #28]
 800b3b0:	e012      	b.n	800b3d8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	68b9      	ldr	r1, [r7, #8]
 800b3b8:	69b8      	ldr	r0, [r7, #24]
 800b3ba:	f000 fa99 	bl	800b8f0 <xQueueGenericSend>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d009      	beq.n	800b3d8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d003      	beq.n	800b3d2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b3ca:	f06f 0301 	mvn.w	r3, #1
 800b3ce:	61fb      	str	r3, [r7, #28]
 800b3d0:	e002      	b.n	800b3d8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b3d2:	f06f 0302 	mvn.w	r3, #2
 800b3d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b3d8:	69fb      	ldr	r3, [r7, #28]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3720      	adds	r7, #32
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	e000ed04 	.word	0xe000ed04

0800b3e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b088      	sub	sp, #32
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3fe:	f3ef 8305 	mrs	r3, IPSR
 800b402:	617b      	str	r3, [r7, #20]
  return(result);
 800b404:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b406:	2b00      	cmp	r3, #0
 800b408:	d028      	beq.n	800b45c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d005      	beq.n	800b41c <osMessageQueueGet+0x34>
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d002      	beq.n	800b41c <osMessageQueueGet+0x34>
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b41c:	f06f 0303 	mvn.w	r3, #3
 800b420:	61fb      	str	r3, [r7, #28]
 800b422:	e037      	b.n	800b494 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b424:	2300      	movs	r3, #0
 800b426:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b428:	f107 0310 	add.w	r3, r7, #16
 800b42c:	461a      	mov	r2, r3
 800b42e:	68b9      	ldr	r1, [r7, #8]
 800b430:	69b8      	ldr	r0, [r7, #24]
 800b432:	f000 fcd7 	bl	800bde4 <xQueueReceiveFromISR>
 800b436:	4603      	mov	r3, r0
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d003      	beq.n	800b444 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b43c:	f06f 0302 	mvn.w	r3, #2
 800b440:	61fb      	str	r3, [r7, #28]
 800b442:	e027      	b.n	800b494 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d024      	beq.n	800b494 <osMessageQueueGet+0xac>
 800b44a:	4b15      	ldr	r3, [pc, #84]	; (800b4a0 <osMessageQueueGet+0xb8>)
 800b44c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b450:	601a      	str	r2, [r3, #0]
 800b452:	f3bf 8f4f 	dsb	sy
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	e01b      	b.n	800b494 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d002      	beq.n	800b468 <osMessageQueueGet+0x80>
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d103      	bne.n	800b470 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b468:	f06f 0303 	mvn.w	r3, #3
 800b46c:	61fb      	str	r3, [r7, #28]
 800b46e:	e011      	b.n	800b494 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	68b9      	ldr	r1, [r7, #8]
 800b474:	69b8      	ldr	r0, [r7, #24]
 800b476:	f000 fbd5 	bl	800bc24 <xQueueReceive>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d009      	beq.n	800b494 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b486:	f06f 0301 	mvn.w	r3, #1
 800b48a:	61fb      	str	r3, [r7, #28]
 800b48c:	e002      	b.n	800b494 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b48e:	f06f 0302 	mvn.w	r3, #2
 800b492:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b494:	69fb      	ldr	r3, [r7, #28]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3720      	adds	r7, #32
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	e000ed04 	.word	0xe000ed04

0800b4a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	4a07      	ldr	r2, [pc, #28]	; (800b4d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b4b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	4a06      	ldr	r2, [pc, #24]	; (800b4d4 <vApplicationGetIdleTaskMemory+0x30>)
 800b4ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2280      	movs	r2, #128	; 0x80
 800b4c0:	601a      	str	r2, [r3, #0]
}
 800b4c2:	bf00      	nop
 800b4c4:	3714      	adds	r7, #20
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	200004c0 	.word	0x200004c0
 800b4d4:	2000051c 	.word	0x2000051c

0800b4d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4a07      	ldr	r2, [pc, #28]	; (800b504 <vApplicationGetTimerTaskMemory+0x2c>)
 800b4e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	4a06      	ldr	r2, [pc, #24]	; (800b508 <vApplicationGetTimerTaskMemory+0x30>)
 800b4ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4f6:	601a      	str	r2, [r3, #0]
}
 800b4f8:	bf00      	nop
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr
 800b504:	2000071c 	.word	0x2000071c
 800b508:	20000778 	.word	0x20000778

0800b50c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f103 0208 	add.w	r2, r3, #8
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f103 0208 	add.w	r2, r3, #8
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f103 0208 	add.w	r2, r3, #8
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b55a:	bf00      	nop
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b566:	b480      	push	{r7}
 800b568:	b085      	sub	sp, #20
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	689a      	ldr	r2, [r3, #8]
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	1c5a      	adds	r2, r3, #1
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	601a      	str	r2, [r3, #0]
}
 800b5a2:	bf00      	nop
 800b5a4:	3714      	adds	r7, #20
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5ae:	b480      	push	{r7}
 800b5b0:	b085      	sub	sp, #20
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5c4:	d103      	bne.n	800b5ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	60fb      	str	r3, [r7, #12]
 800b5cc:	e00c      	b.n	800b5e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	3308      	adds	r3, #8
 800b5d2:	60fb      	str	r3, [r7, #12]
 800b5d4:	e002      	b.n	800b5dc <vListInsert+0x2e>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	60fb      	str	r3, [r7, #12]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d2f6      	bcs.n	800b5d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	683a      	ldr	r2, [r7, #0]
 800b5f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	683a      	ldr	r2, [r7, #0]
 800b602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	601a      	str	r2, [r3, #0]
}
 800b614:	bf00      	nop
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	6892      	ldr	r2, [r2, #8]
 800b636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	6852      	ldr	r2, [r2, #4]
 800b640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d103      	bne.n	800b654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	689a      	ldr	r2, [r3, #8]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	1e5a      	subs	r2, r3, #1
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10a      	bne.n	800b69e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b69a:	bf00      	nop
 800b69c:	e7fe      	b.n	800b69c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b69e:	f002 f909 	bl	800d8b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6aa:	68f9      	ldr	r1, [r7, #12]
 800b6ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6ae:	fb01 f303 	mul.w	r3, r1, r3
 800b6b2:	441a      	add	r2, r3
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	68f9      	ldr	r1, [r7, #12]
 800b6d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6d4:	fb01 f303 	mul.w	r3, r1, r3
 800b6d8:	441a      	add	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	22ff      	movs	r2, #255	; 0xff
 800b6e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	22ff      	movs	r2, #255	; 0xff
 800b6ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d114      	bne.n	800b71e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01a      	beq.n	800b732 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	3310      	adds	r3, #16
 800b700:	4618      	mov	r0, r3
 800b702:	f001 f9bd 	bl	800ca80 <xTaskRemoveFromEventList>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d012      	beq.n	800b732 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b70c:	4b0c      	ldr	r3, [pc, #48]	; (800b740 <xQueueGenericReset+0xcc>)
 800b70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	e009      	b.n	800b732 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	3310      	adds	r3, #16
 800b722:	4618      	mov	r0, r3
 800b724:	f7ff fef2 	bl	800b50c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	3324      	adds	r3, #36	; 0x24
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7ff feed 	bl	800b50c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b732:	f002 f8ef 	bl	800d914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b736:	2301      	movs	r3, #1
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	e000ed04 	.word	0xe000ed04

0800b744 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b744:	b580      	push	{r7, lr}
 800b746:	b08e      	sub	sp, #56	; 0x38
 800b748:	af02      	add	r7, sp, #8
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
 800b750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10a      	bne.n	800b76e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b76a:	bf00      	nop
 800b76c:	e7fe      	b.n	800b76c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10a      	bne.n	800b78a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b786:	bf00      	nop
 800b788:	e7fe      	b.n	800b788 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d002      	beq.n	800b796 <xQueueGenericCreateStatic+0x52>
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <xQueueGenericCreateStatic+0x56>
 800b796:	2301      	movs	r3, #1
 800b798:	e000      	b.n	800b79c <xQueueGenericCreateStatic+0x58>
 800b79a:	2300      	movs	r3, #0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10a      	bne.n	800b7b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	623b      	str	r3, [r7, #32]
}
 800b7b2:	bf00      	nop
 800b7b4:	e7fe      	b.n	800b7b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d102      	bne.n	800b7c2 <xQueueGenericCreateStatic+0x7e>
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d101      	bne.n	800b7c6 <xQueueGenericCreateStatic+0x82>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e000      	b.n	800b7c8 <xQueueGenericCreateStatic+0x84>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10a      	bne.n	800b7e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d0:	f383 8811 	msr	BASEPRI, r3
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	61fb      	str	r3, [r7, #28]
}
 800b7de:	bf00      	nop
 800b7e0:	e7fe      	b.n	800b7e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b7e2:	2350      	movs	r3, #80	; 0x50
 800b7e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	2b50      	cmp	r3, #80	; 0x50
 800b7ea:	d00a      	beq.n	800b802 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	61bb      	str	r3, [r7, #24]
}
 800b7fe:	bf00      	nop
 800b800:	e7fe      	b.n	800b800 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b802:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00d      	beq.n	800b82a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b810:	2201      	movs	r2, #1
 800b812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b816:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	4613      	mov	r3, r2
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	68b9      	ldr	r1, [r7, #8]
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f000 f83f 	bl	800b8a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3730      	adds	r7, #48	; 0x30
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b834:	b580      	push	{r7, lr}
 800b836:	b08a      	sub	sp, #40	; 0x28
 800b838:	af02      	add	r7, sp, #8
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	4613      	mov	r3, r2
 800b840:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d10a      	bne.n	800b85e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	613b      	str	r3, [r7, #16]
}
 800b85a:	bf00      	nop
 800b85c:	e7fe      	b.n	800b85c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	fb02 f303 	mul.w	r3, r2, r3
 800b866:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	3350      	adds	r3, #80	; 0x50
 800b86c:	4618      	mov	r0, r3
 800b86e:	f002 f943 	bl	800daf8 <pvPortMalloc>
 800b872:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d011      	beq.n	800b89e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	3350      	adds	r3, #80	; 0x50
 800b882:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	2200      	movs	r2, #0
 800b888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b88c:	79fa      	ldrb	r2, [r7, #7]
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	4613      	mov	r3, r2
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	68b9      	ldr	r1, [r7, #8]
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 f805 	bl	800b8a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b89e:	69bb      	ldr	r3, [r7, #24]
	}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3720      	adds	r7, #32
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
 800b8b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d103      	bne.n	800b8c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	69ba      	ldr	r2, [r7, #24]
 800b8c0:	601a      	str	r2, [r3, #0]
 800b8c2:	e002      	b.n	800b8ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	69b8      	ldr	r0, [r7, #24]
 800b8da:	f7ff fecb 	bl	800b674 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	78fa      	ldrb	r2, [r7, #3]
 800b8e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b8e6:	bf00      	nop
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
	...

0800b8f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b08e      	sub	sp, #56	; 0x38
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b8fe:	2300      	movs	r3, #0
 800b900:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d10a      	bne.n	800b922 <xQueueGenericSend+0x32>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b91e:	bf00      	nop
 800b920:	e7fe      	b.n	800b920 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d103      	bne.n	800b930 <xQueueGenericSend+0x40>
 800b928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d101      	bne.n	800b934 <xQueueGenericSend+0x44>
 800b930:	2301      	movs	r3, #1
 800b932:	e000      	b.n	800b936 <xQueueGenericSend+0x46>
 800b934:	2300      	movs	r3, #0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10a      	bne.n	800b950 <xQueueGenericSend+0x60>
	__asm volatile
 800b93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b94c:	bf00      	nop
 800b94e:	e7fe      	b.n	800b94e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	2b02      	cmp	r3, #2
 800b954:	d103      	bne.n	800b95e <xQueueGenericSend+0x6e>
 800b956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d101      	bne.n	800b962 <xQueueGenericSend+0x72>
 800b95e:	2301      	movs	r3, #1
 800b960:	e000      	b.n	800b964 <xQueueGenericSend+0x74>
 800b962:	2300      	movs	r3, #0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10a      	bne.n	800b97e <xQueueGenericSend+0x8e>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	623b      	str	r3, [r7, #32]
}
 800b97a:	bf00      	nop
 800b97c:	e7fe      	b.n	800b97c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b97e:	f001 fa3d 	bl	800cdfc <xTaskGetSchedulerState>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d102      	bne.n	800b98e <xQueueGenericSend+0x9e>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <xQueueGenericSend+0xa2>
 800b98e:	2301      	movs	r3, #1
 800b990:	e000      	b.n	800b994 <xQueueGenericSend+0xa4>
 800b992:	2300      	movs	r3, #0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10a      	bne.n	800b9ae <xQueueGenericSend+0xbe>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	61fb      	str	r3, [r7, #28]
}
 800b9aa:	bf00      	nop
 800b9ac:	e7fe      	b.n	800b9ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9ae:	f001 ff81 	bl	800d8b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d302      	bcc.n	800b9c4 <xQueueGenericSend+0xd4>
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b02      	cmp	r3, #2
 800b9c2:	d129      	bne.n	800ba18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	68b9      	ldr	r1, [r7, #8]
 800b9c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9ca:	f000 fa8b 	bl	800bee4 <prvCopyDataToQueue>
 800b9ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d010      	beq.n	800b9fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9da:	3324      	adds	r3, #36	; 0x24
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f001 f84f 	bl	800ca80 <xTaskRemoveFromEventList>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d013      	beq.n	800ba10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b9e8:	4b3f      	ldr	r3, [pc, #252]	; (800bae8 <xQueueGenericSend+0x1f8>)
 800b9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	e00a      	b.n	800ba10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d007      	beq.n	800ba10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba00:	4b39      	ldr	r3, [pc, #228]	; (800bae8 <xQueueGenericSend+0x1f8>)
 800ba02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba10:	f001 ff80 	bl	800d914 <vPortExitCritical>
				return pdPASS;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e063      	b.n	800bae0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d103      	bne.n	800ba26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba1e:	f001 ff79 	bl	800d914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba22:	2300      	movs	r3, #0
 800ba24:	e05c      	b.n	800bae0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d106      	bne.n	800ba3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba2c:	f107 0314 	add.w	r3, r7, #20
 800ba30:	4618      	mov	r0, r3
 800ba32:	f001 f889 	bl	800cb48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba36:	2301      	movs	r3, #1
 800ba38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba3a:	f001 ff6b 	bl	800d914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba3e:	f000 fdfb 	bl	800c638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba42:	f001 ff37 	bl	800d8b4 <vPortEnterCritical>
 800ba46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba4c:	b25b      	sxtb	r3, r3
 800ba4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba52:	d103      	bne.n	800ba5c <xQueueGenericSend+0x16c>
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba62:	b25b      	sxtb	r3, r3
 800ba64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba68:	d103      	bne.n	800ba72 <xQueueGenericSend+0x182>
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba72:	f001 ff4f 	bl	800d914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba76:	1d3a      	adds	r2, r7, #4
 800ba78:	f107 0314 	add.w	r3, r7, #20
 800ba7c:	4611      	mov	r1, r2
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f001 f878 	bl	800cb74 <xTaskCheckForTimeOut>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d124      	bne.n	800bad4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba8c:	f000 fb22 	bl	800c0d4 <prvIsQueueFull>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d018      	beq.n	800bac8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ba96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba98:	3310      	adds	r3, #16
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 ff9e 	bl	800c9e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800baa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baa6:	f000 faad 	bl	800c004 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800baaa:	f000 fdd3 	bl	800c654 <xTaskResumeAll>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f47f af7c 	bne.w	800b9ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bab6:	4b0c      	ldr	r3, [pc, #48]	; (800bae8 <xQueueGenericSend+0x1f8>)
 800bab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800babc:	601a      	str	r2, [r3, #0]
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	f3bf 8f6f 	isb	sy
 800bac6:	e772      	b.n	800b9ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baca:	f000 fa9b 	bl	800c004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bace:	f000 fdc1 	bl	800c654 <xTaskResumeAll>
 800bad2:	e76c      	b.n	800b9ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bad6:	f000 fa95 	bl	800c004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bada:	f000 fdbb 	bl	800c654 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bade:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3738      	adds	r7, #56	; 0x38
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	e000ed04 	.word	0xe000ed04

0800baec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b090      	sub	sp, #64	; 0x40
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
 800baf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10a      	bne.n	800bb1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb16:	bf00      	nop
 800bb18:	e7fe      	b.n	800bb18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d103      	bne.n	800bb28 <xQueueGenericSendFromISR+0x3c>
 800bb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d101      	bne.n	800bb2c <xQueueGenericSendFromISR+0x40>
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e000      	b.n	800bb2e <xQueueGenericSendFromISR+0x42>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10a      	bne.n	800bb48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb36:	f383 8811 	msr	BASEPRI, r3
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb44:	bf00      	nop
 800bb46:	e7fe      	b.n	800bb46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d103      	bne.n	800bb56 <xQueueGenericSendFromISR+0x6a>
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d101      	bne.n	800bb5a <xQueueGenericSendFromISR+0x6e>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e000      	b.n	800bb5c <xQueueGenericSendFromISR+0x70>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10a      	bne.n	800bb76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	623b      	str	r3, [r7, #32]
}
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb76:	f001 ff7f 	bl	800da78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bb7a:	f3ef 8211 	mrs	r2, BASEPRI
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	61fa      	str	r2, [r7, #28]
 800bb90:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bb92:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb94:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d302      	bcc.n	800bba8 <xQueueGenericSendFromISR+0xbc>
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d12f      	bne.n	800bc08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	68b9      	ldr	r1, [r7, #8]
 800bbbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbbe:	f000 f991 	bl	800bee4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbc2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bbc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbca:	d112      	bne.n	800bbf2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d016      	beq.n	800bc02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd6:	3324      	adds	r3, #36	; 0x24
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f000 ff51 	bl	800ca80 <xTaskRemoveFromEventList>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00e      	beq.n	800bc02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00b      	beq.n	800bc02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2201      	movs	r2, #1
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	e007      	b.n	800bc02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bbf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	b25a      	sxtb	r2, r3
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc02:	2301      	movs	r3, #1
 800bc04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bc06:	e001      	b.n	800bc0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3740      	adds	r7, #64	; 0x40
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
	...

0800bc24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08c      	sub	sp, #48	; 0x30
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc30:	2300      	movs	r3, #0
 800bc32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d10a      	bne.n	800bc54 <xQueueReceive+0x30>
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	623b      	str	r3, [r7, #32]
}
 800bc50:	bf00      	nop
 800bc52:	e7fe      	b.n	800bc52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d103      	bne.n	800bc62 <xQueueReceive+0x3e>
 800bc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <xQueueReceive+0x42>
 800bc62:	2301      	movs	r3, #1
 800bc64:	e000      	b.n	800bc68 <xQueueReceive+0x44>
 800bc66:	2300      	movs	r3, #0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10a      	bne.n	800bc82 <xQueueReceive+0x5e>
	__asm volatile
 800bc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc70:	f383 8811 	msr	BASEPRI, r3
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	f3bf 8f4f 	dsb	sy
 800bc7c:	61fb      	str	r3, [r7, #28]
}
 800bc7e:	bf00      	nop
 800bc80:	e7fe      	b.n	800bc80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc82:	f001 f8bb 	bl	800cdfc <xTaskGetSchedulerState>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <xQueueReceive+0x6e>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d101      	bne.n	800bc96 <xQueueReceive+0x72>
 800bc92:	2301      	movs	r3, #1
 800bc94:	e000      	b.n	800bc98 <xQueueReceive+0x74>
 800bc96:	2300      	movs	r3, #0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d10a      	bne.n	800bcb2 <xQueueReceive+0x8e>
	__asm volatile
 800bc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca0:	f383 8811 	msr	BASEPRI, r3
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	61bb      	str	r3, [r7, #24]
}
 800bcae:	bf00      	nop
 800bcb0:	e7fe      	b.n	800bcb0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcb2:	f001 fdff 	bl	800d8b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d01f      	beq.n	800bd02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcc2:	68b9      	ldr	r1, [r7, #8]
 800bcc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcc6:	f000 f977 	bl	800bfb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	1e5a      	subs	r2, r3, #1
 800bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00f      	beq.n	800bcfa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcdc:	3310      	adds	r3, #16
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 fece 	bl	800ca80 <xTaskRemoveFromEventList>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d007      	beq.n	800bcfa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bcea:	4b3d      	ldr	r3, [pc, #244]	; (800bde0 <xQueueReceive+0x1bc>)
 800bcec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bcfa:	f001 fe0b 	bl	800d914 <vPortExitCritical>
				return pdPASS;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e069      	b.n	800bdd6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d103      	bne.n	800bd10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd08:	f001 fe04 	bl	800d914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	e062      	b.n	800bdd6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d106      	bne.n	800bd24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd16:	f107 0310 	add.w	r3, r7, #16
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 ff14 	bl	800cb48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd20:	2301      	movs	r3, #1
 800bd22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd24:	f001 fdf6 	bl	800d914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd28:	f000 fc86 	bl	800c638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd2c:	f001 fdc2 	bl	800d8b4 <vPortEnterCritical>
 800bd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd36:	b25b      	sxtb	r3, r3
 800bd38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd3c:	d103      	bne.n	800bd46 <xQueueReceive+0x122>
 800bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd4c:	b25b      	sxtb	r3, r3
 800bd4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd52:	d103      	bne.n	800bd5c <xQueueReceive+0x138>
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd5c:	f001 fdda 	bl	800d914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd60:	1d3a      	adds	r2, r7, #4
 800bd62:	f107 0310 	add.w	r3, r7, #16
 800bd66:	4611      	mov	r1, r2
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 ff03 	bl	800cb74 <xTaskCheckForTimeOut>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d123      	bne.n	800bdbc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd76:	f000 f997 	bl	800c0a8 <prvIsQueueEmpty>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d017      	beq.n	800bdb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd82:	3324      	adds	r3, #36	; 0x24
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	4611      	mov	r1, r2
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 fe29 	bl	800c9e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd90:	f000 f938 	bl	800c004 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd94:	f000 fc5e 	bl	800c654 <xTaskResumeAll>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d189      	bne.n	800bcb2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bd9e:	4b10      	ldr	r3, [pc, #64]	; (800bde0 <xQueueReceive+0x1bc>)
 800bda0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bda4:	601a      	str	r2, [r3, #0]
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	f3bf 8f6f 	isb	sy
 800bdae:	e780      	b.n	800bcb2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bdb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdb2:	f000 f927 	bl	800c004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdb6:	f000 fc4d 	bl	800c654 <xTaskResumeAll>
 800bdba:	e77a      	b.n	800bcb2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bdbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdbe:	f000 f921 	bl	800c004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdc2:	f000 fc47 	bl	800c654 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdc8:	f000 f96e 	bl	800c0a8 <prvIsQueueEmpty>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f43f af6f 	beq.w	800bcb2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3730      	adds	r7, #48	; 0x30
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	e000ed04 	.word	0xe000ed04

0800bde4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08e      	sub	sp, #56	; 0x38
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d10a      	bne.n	800be10 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	623b      	str	r3, [r7, #32]
}
 800be0c:	bf00      	nop
 800be0e:	e7fe      	b.n	800be0e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d103      	bne.n	800be1e <xQueueReceiveFromISR+0x3a>
 800be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <xQueueReceiveFromISR+0x3e>
 800be1e:	2301      	movs	r3, #1
 800be20:	e000      	b.n	800be24 <xQueueReceiveFromISR+0x40>
 800be22:	2300      	movs	r3, #0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d10a      	bne.n	800be3e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800be28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	61fb      	str	r3, [r7, #28]
}
 800be3a:	bf00      	nop
 800be3c:	e7fe      	b.n	800be3c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be3e:	f001 fe1b 	bl	800da78 <vPortValidateInterruptPriority>
	__asm volatile
 800be42:	f3ef 8211 	mrs	r2, BASEPRI
 800be46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	61ba      	str	r2, [r7, #24]
 800be58:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800be5a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be66:	2b00      	cmp	r3, #0
 800be68:	d02f      	beq.n	800beca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800be6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be74:	68b9      	ldr	r1, [r7, #8]
 800be76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be78:	f000 f89e 	bl	800bfb8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	1e5a      	subs	r2, r3, #1
 800be80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be82:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800be84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be8c:	d112      	bne.n	800beb4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be90:	691b      	ldr	r3, [r3, #16]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d016      	beq.n	800bec4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	3310      	adds	r3, #16
 800be9a:	4618      	mov	r0, r3
 800be9c:	f000 fdf0 	bl	800ca80 <xTaskRemoveFromEventList>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00e      	beq.n	800bec4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00b      	beq.n	800bec4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	601a      	str	r2, [r3, #0]
 800beb2:	e007      	b.n	800bec4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800beb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800beb8:	3301      	adds	r3, #1
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	b25a      	sxtb	r2, r3
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bec4:	2301      	movs	r3, #1
 800bec6:	637b      	str	r3, [r7, #52]	; 0x34
 800bec8:	e001      	b.n	800bece <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800beca:	2300      	movs	r3, #0
 800becc:	637b      	str	r3, [r7, #52]	; 0x34
 800bece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	f383 8811 	msr	BASEPRI, r3
}
 800bed8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800beda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3738      	adds	r7, #56	; 0x38
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bef0:	2300      	movs	r3, #0
 800bef2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10d      	bne.n	800bf1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d14d      	bne.n	800bfa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 ff92 	bl	800ce38 <xTaskPriorityDisinherit>
 800bf14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	609a      	str	r2, [r3, #8]
 800bf1c:	e043      	b.n	800bfa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d119      	bne.n	800bf58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6858      	ldr	r0, [r3, #4]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	68b9      	ldr	r1, [r7, #8]
 800bf30:	f002 fb08 	bl	800e544 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3c:	441a      	add	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	685a      	ldr	r2, [r3, #4]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d32b      	bcc.n	800bfa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	605a      	str	r2, [r3, #4]
 800bf56:	e026      	b.n	800bfa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	68d8      	ldr	r0, [r3, #12]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf60:	461a      	mov	r2, r3
 800bf62:	68b9      	ldr	r1, [r7, #8]
 800bf64:	f002 faee 	bl	800e544 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	68da      	ldr	r2, [r3, #12]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf70:	425b      	negs	r3, r3
 800bf72:	441a      	add	r2, r3
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	68da      	ldr	r2, [r3, #12]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d207      	bcs.n	800bf94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	689a      	ldr	r2, [r3, #8]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8c:	425b      	negs	r3, r3
 800bf8e:	441a      	add	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d105      	bne.n	800bfa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	1c5a      	adds	r2, r3, #1
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfae:	697b      	ldr	r3, [r7, #20]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d018      	beq.n	800bffc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	68da      	ldr	r2, [r3, #12]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd2:	441a      	add	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	68da      	ldr	r2, [r3, #12]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d303      	bcc.n	800bfec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68d9      	ldr	r1, [r3, #12]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff4:	461a      	mov	r2, r3
 800bff6:	6838      	ldr	r0, [r7, #0]
 800bff8:	f002 faa4 	bl	800e544 <memcpy>
	}
}
 800bffc:	bf00      	nop
 800bffe:	3708      	adds	r7, #8
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c00c:	f001 fc52 	bl	800d8b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c016:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c018:	e011      	b.n	800c03e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d012      	beq.n	800c048 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3324      	adds	r3, #36	; 0x24
 800c026:	4618      	mov	r0, r3
 800c028:	f000 fd2a 	bl	800ca80 <xTaskRemoveFromEventList>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d001      	beq.n	800c036 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c032:	f000 fe01 	bl	800cc38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c036:	7bfb      	ldrb	r3, [r7, #15]
 800c038:	3b01      	subs	r3, #1
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c042:	2b00      	cmp	r3, #0
 800c044:	dce9      	bgt.n	800c01a <prvUnlockQueue+0x16>
 800c046:	e000      	b.n	800c04a <prvUnlockQueue+0x46>
					break;
 800c048:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	22ff      	movs	r2, #255	; 0xff
 800c04e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c052:	f001 fc5f 	bl	800d914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c056:	f001 fc2d 	bl	800d8b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c060:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c062:	e011      	b.n	800c088 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d012      	beq.n	800c092 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	3310      	adds	r3, #16
 800c070:	4618      	mov	r0, r3
 800c072:	f000 fd05 	bl	800ca80 <xTaskRemoveFromEventList>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d001      	beq.n	800c080 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c07c:	f000 fddc 	bl	800cc38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	3b01      	subs	r3, #1
 800c084:	b2db      	uxtb	r3, r3
 800c086:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dce9      	bgt.n	800c064 <prvUnlockQueue+0x60>
 800c090:	e000      	b.n	800c094 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c092:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	22ff      	movs	r2, #255	; 0xff
 800c098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c09c:	f001 fc3a 	bl	800d914 <vPortExitCritical>
}
 800c0a0:	bf00      	nop
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0b0:	f001 fc00 	bl	800d8b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d102      	bne.n	800c0c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	e001      	b.n	800c0c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0c6:	f001 fc25 	bl	800d914 <vPortExitCritical>

	return xReturn;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0dc:	f001 fbea 	bl	800d8b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d102      	bne.n	800c0f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	60fb      	str	r3, [r7, #12]
 800c0f0:	e001      	b.n	800c0f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0f6:	f001 fc0d 	bl	800d914 <vPortExitCritical>

	return xReturn;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c10e:	2300      	movs	r3, #0
 800c110:	60fb      	str	r3, [r7, #12]
 800c112:	e014      	b.n	800c13e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c114:	4a0f      	ldr	r2, [pc, #60]	; (800c154 <vQueueAddToRegistry+0x50>)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10b      	bne.n	800c138 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c120:	490c      	ldr	r1, [pc, #48]	; (800c154 <vQueueAddToRegistry+0x50>)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	683a      	ldr	r2, [r7, #0]
 800c126:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c12a:	4a0a      	ldr	r2, [pc, #40]	; (800c154 <vQueueAddToRegistry+0x50>)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	00db      	lsls	r3, r3, #3
 800c130:	4413      	add	r3, r2
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c136:	e006      	b.n	800c146 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	3301      	adds	r3, #1
 800c13c:	60fb      	str	r3, [r7, #12]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2b07      	cmp	r3, #7
 800c142:	d9e7      	bls.n	800c114 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c144:	bf00      	nop
 800c146:	bf00      	nop
 800c148:	3714      	adds	r7, #20
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
 800c154:	20004fe0 	.word	0x20004fe0

0800c158 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c168:	f001 fba4 	bl	800d8b4 <vPortEnterCritical>
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c172:	b25b      	sxtb	r3, r3
 800c174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c178:	d103      	bne.n	800c182 <vQueueWaitForMessageRestricted+0x2a>
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c188:	b25b      	sxtb	r3, r3
 800c18a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c18e:	d103      	bne.n	800c198 <vQueueWaitForMessageRestricted+0x40>
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	2200      	movs	r2, #0
 800c194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c198:	f001 fbbc 	bl	800d914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d106      	bne.n	800c1b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	3324      	adds	r3, #36	; 0x24
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	68b9      	ldr	r1, [r7, #8]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f000 fc3b 	bl	800ca28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c1b2:	6978      	ldr	r0, [r7, #20]
 800c1b4:	f7ff ff26 	bl	800c004 <prvUnlockQueue>
	}
 800c1b8:	bf00      	nop
 800c1ba:	3718      	adds	r7, #24
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b08e      	sub	sp, #56	; 0x38
 800c1c4:	af04      	add	r7, sp, #16
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
 800c1cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d10a      	bne.n	800c1ea <xTaskCreateStatic+0x2a>
	__asm volatile
 800c1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d8:	f383 8811 	msr	BASEPRI, r3
 800c1dc:	f3bf 8f6f 	isb	sy
 800c1e0:	f3bf 8f4f 	dsb	sy
 800c1e4:	623b      	str	r3, [r7, #32]
}
 800c1e6:	bf00      	nop
 800c1e8:	e7fe      	b.n	800c1e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10a      	bne.n	800c206 <xTaskCreateStatic+0x46>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	61fb      	str	r3, [r7, #28]
}
 800c202:	bf00      	nop
 800c204:	e7fe      	b.n	800c204 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c206:	235c      	movs	r3, #92	; 0x5c
 800c208:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	2b5c      	cmp	r3, #92	; 0x5c
 800c20e:	d00a      	beq.n	800c226 <xTaskCreateStatic+0x66>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	61bb      	str	r3, [r7, #24]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c226:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d01e      	beq.n	800c26c <xTaskCreateStatic+0xac>
 800c22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c230:	2b00      	cmp	r3, #0
 800c232:	d01b      	beq.n	800c26c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c236:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c23c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c240:	2202      	movs	r2, #2
 800c242:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c246:	2300      	movs	r3, #0
 800c248:	9303      	str	r3, [sp, #12]
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	9302      	str	r3, [sp, #8]
 800c24e:	f107 0314 	add.w	r3, r7, #20
 800c252:	9301      	str	r3, [sp, #4]
 800c254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	68b9      	ldr	r1, [r7, #8]
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f000 f850 	bl	800c304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c266:	f000 f8dd 	bl	800c424 <prvAddNewTaskToReadyList>
 800c26a:	e001      	b.n	800c270 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c26c:	2300      	movs	r3, #0
 800c26e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c270:	697b      	ldr	r3, [r7, #20]
	}
 800c272:	4618      	mov	r0, r3
 800c274:	3728      	adds	r7, #40	; 0x28
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b08c      	sub	sp, #48	; 0x30
 800c27e:	af04      	add	r7, sp, #16
 800c280:	60f8      	str	r0, [r7, #12]
 800c282:	60b9      	str	r1, [r7, #8]
 800c284:	603b      	str	r3, [r7, #0]
 800c286:	4613      	mov	r3, r2
 800c288:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c28a:	88fb      	ldrh	r3, [r7, #6]
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	4618      	mov	r0, r3
 800c290:	f001 fc32 	bl	800daf8 <pvPortMalloc>
 800c294:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00e      	beq.n	800c2ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c29c:	205c      	movs	r0, #92	; 0x5c
 800c29e:	f001 fc2b 	bl	800daf8 <pvPortMalloc>
 800c2a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d003      	beq.n	800c2b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	697a      	ldr	r2, [r7, #20]
 800c2ae:	631a      	str	r2, [r3, #48]	; 0x30
 800c2b0:	e005      	b.n	800c2be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c2b2:	6978      	ldr	r0, [r7, #20]
 800c2b4:	f001 fcec 	bl	800dc90 <vPortFree>
 800c2b8:	e001      	b.n	800c2be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d017      	beq.n	800c2f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c2cc:	88fa      	ldrh	r2, [r7, #6]
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	9303      	str	r3, [sp, #12]
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	9302      	str	r3, [sp, #8]
 800c2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	68b9      	ldr	r1, [r7, #8]
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f000 f80e 	bl	800c304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2e8:	69f8      	ldr	r0, [r7, #28]
 800c2ea:	f000 f89b 	bl	800c424 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	61bb      	str	r3, [r7, #24]
 800c2f2:	e002      	b.n	800c2fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c2f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c2fa:	69bb      	ldr	r3, [r7, #24]
	}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3720      	adds	r7, #32
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b088      	sub	sp, #32
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
 800c310:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	461a      	mov	r2, r3
 800c31c:	21a5      	movs	r1, #165	; 0xa5
 800c31e:	f002 f91f 	bl	800e560 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c32c:	3b01      	subs	r3, #1
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4413      	add	r3, r2
 800c332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	f023 0307 	bic.w	r3, r3, #7
 800c33a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	f003 0307 	and.w	r3, r3, #7
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00a      	beq.n	800c35c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	617b      	str	r3, [r7, #20]
}
 800c358:	bf00      	nop
 800c35a:	e7fe      	b.n	800c35a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d01f      	beq.n	800c3a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c362:	2300      	movs	r3, #0
 800c364:	61fb      	str	r3, [r7, #28]
 800c366:	e012      	b.n	800c38e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	4413      	add	r3, r2
 800c36e:	7819      	ldrb	r1, [r3, #0]
 800c370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	4413      	add	r3, r2
 800c376:	3334      	adds	r3, #52	; 0x34
 800c378:	460a      	mov	r2, r1
 800c37a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	4413      	add	r3, r2
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d006      	beq.n	800c396 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	3301      	adds	r3, #1
 800c38c:	61fb      	str	r3, [r7, #28]
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	2b0f      	cmp	r3, #15
 800c392:	d9e9      	bls.n	800c368 <prvInitialiseNewTask+0x64>
 800c394:	e000      	b.n	800c398 <prvInitialiseNewTask+0x94>
			{
				break;
 800c396:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3a0:	e003      	b.n	800c3aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ac:	2b37      	cmp	r3, #55	; 0x37
 800c3ae:	d901      	bls.n	800c3b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c3b0:	2337      	movs	r3, #55	; 0x37
 800c3b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	3304      	adds	r3, #4
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7ff f8be 	bl	800b54c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	3318      	adds	r3, #24
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7ff f8b9 	bl	800b54c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c3fe:	683a      	ldr	r2, [r7, #0]
 800c400:	68f9      	ldr	r1, [r7, #12]
 800c402:	69b8      	ldr	r0, [r7, #24]
 800c404:	f001 f928 	bl	800d658 <pxPortInitialiseStack>
 800c408:	4602      	mov	r2, r0
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c410:	2b00      	cmp	r3, #0
 800c412:	d002      	beq.n	800c41a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c418:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c41a:	bf00      	nop
 800c41c:	3720      	adds	r7, #32
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
	...

0800c424 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c42c:	f001 fa42 	bl	800d8b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c430:	4b2d      	ldr	r3, [pc, #180]	; (800c4e8 <prvAddNewTaskToReadyList+0xc4>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	3301      	adds	r3, #1
 800c436:	4a2c      	ldr	r2, [pc, #176]	; (800c4e8 <prvAddNewTaskToReadyList+0xc4>)
 800c438:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c43a:	4b2c      	ldr	r3, [pc, #176]	; (800c4ec <prvAddNewTaskToReadyList+0xc8>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d109      	bne.n	800c456 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c442:	4a2a      	ldr	r2, [pc, #168]	; (800c4ec <prvAddNewTaskToReadyList+0xc8>)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c448:	4b27      	ldr	r3, [pc, #156]	; (800c4e8 <prvAddNewTaskToReadyList+0xc4>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d110      	bne.n	800c472 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c450:	f000 fc16 	bl	800cc80 <prvInitialiseTaskLists>
 800c454:	e00d      	b.n	800c472 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c456:	4b26      	ldr	r3, [pc, #152]	; (800c4f0 <prvAddNewTaskToReadyList+0xcc>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d109      	bne.n	800c472 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c45e:	4b23      	ldr	r3, [pc, #140]	; (800c4ec <prvAddNewTaskToReadyList+0xc8>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c468:	429a      	cmp	r2, r3
 800c46a:	d802      	bhi.n	800c472 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c46c:	4a1f      	ldr	r2, [pc, #124]	; (800c4ec <prvAddNewTaskToReadyList+0xc8>)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c472:	4b20      	ldr	r3, [pc, #128]	; (800c4f4 <prvAddNewTaskToReadyList+0xd0>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3301      	adds	r3, #1
 800c478:	4a1e      	ldr	r2, [pc, #120]	; (800c4f4 <prvAddNewTaskToReadyList+0xd0>)
 800c47a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c47c:	4b1d      	ldr	r3, [pc, #116]	; (800c4f4 <prvAddNewTaskToReadyList+0xd0>)
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c488:	4b1b      	ldr	r3, [pc, #108]	; (800c4f8 <prvAddNewTaskToReadyList+0xd4>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d903      	bls.n	800c498 <prvAddNewTaskToReadyList+0x74>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c494:	4a18      	ldr	r2, [pc, #96]	; (800c4f8 <prvAddNewTaskToReadyList+0xd4>)
 800c496:	6013      	str	r3, [r2, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c49c:	4613      	mov	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4a15      	ldr	r2, [pc, #84]	; (800c4fc <prvAddNewTaskToReadyList+0xd8>)
 800c4a6:	441a      	add	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	f7ff f859 	bl	800b566 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4b4:	f001 fa2e 	bl	800d914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c4b8:	4b0d      	ldr	r3, [pc, #52]	; (800c4f0 <prvAddNewTaskToReadyList+0xcc>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00e      	beq.n	800c4de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4c0:	4b0a      	ldr	r3, [pc, #40]	; (800c4ec <prvAddNewTaskToReadyList+0xc8>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d207      	bcs.n	800c4de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4ce:	4b0c      	ldr	r3, [pc, #48]	; (800c500 <prvAddNewTaskToReadyList+0xdc>)
 800c4d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d4:	601a      	str	r2, [r3, #0]
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4de:	bf00      	nop
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	2000104c 	.word	0x2000104c
 800c4ec:	20000b78 	.word	0x20000b78
 800c4f0:	20001058 	.word	0x20001058
 800c4f4:	20001068 	.word	0x20001068
 800c4f8:	20001054 	.word	0x20001054
 800c4fc:	20000b7c 	.word	0x20000b7c
 800c500:	e000ed04 	.word	0xe000ed04

0800c504 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c50c:	2300      	movs	r3, #0
 800c50e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d017      	beq.n	800c546 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c516:	4b13      	ldr	r3, [pc, #76]	; (800c564 <vTaskDelay+0x60>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00a      	beq.n	800c534 <vTaskDelay+0x30>
	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	60bb      	str	r3, [r7, #8]
}
 800c530:	bf00      	nop
 800c532:	e7fe      	b.n	800c532 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c534:	f000 f880 	bl	800c638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c538:	2100      	movs	r1, #0
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fcea 	bl	800cf14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c540:	f000 f888 	bl	800c654 <xTaskResumeAll>
 800c544:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d107      	bne.n	800c55c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c54c:	4b06      	ldr	r3, [pc, #24]	; (800c568 <vTaskDelay+0x64>)
 800c54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c55c:	bf00      	nop
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	20001074 	.word	0x20001074
 800c568:	e000ed04 	.word	0xe000ed04

0800c56c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b08a      	sub	sp, #40	; 0x28
 800c570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c572:	2300      	movs	r3, #0
 800c574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c576:	2300      	movs	r3, #0
 800c578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c57a:	463a      	mov	r2, r7
 800c57c:	1d39      	adds	r1, r7, #4
 800c57e:	f107 0308 	add.w	r3, r7, #8
 800c582:	4618      	mov	r0, r3
 800c584:	f7fe ff8e 	bl	800b4a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	9202      	str	r2, [sp, #8]
 800c590:	9301      	str	r3, [sp, #4]
 800c592:	2300      	movs	r3, #0
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	2300      	movs	r3, #0
 800c598:	460a      	mov	r2, r1
 800c59a:	4921      	ldr	r1, [pc, #132]	; (800c620 <vTaskStartScheduler+0xb4>)
 800c59c:	4821      	ldr	r0, [pc, #132]	; (800c624 <vTaskStartScheduler+0xb8>)
 800c59e:	f7ff fe0f 	bl	800c1c0 <xTaskCreateStatic>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	4a20      	ldr	r2, [pc, #128]	; (800c628 <vTaskStartScheduler+0xbc>)
 800c5a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c5a8:	4b1f      	ldr	r3, [pc, #124]	; (800c628 <vTaskStartScheduler+0xbc>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d002      	beq.n	800c5b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	617b      	str	r3, [r7, #20]
 800c5b4:	e001      	b.n	800c5ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d102      	bne.n	800c5c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c5c0:	f000 fcfc 	bl	800cfbc <xTimerCreateTimerTask>
 800c5c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d116      	bne.n	800c5fa <vTaskStartScheduler+0x8e>
	__asm volatile
 800c5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	613b      	str	r3, [r7, #16]
}
 800c5de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c5e0:	4b12      	ldr	r3, [pc, #72]	; (800c62c <vTaskStartScheduler+0xc0>)
 800c5e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c5e8:	4b11      	ldr	r3, [pc, #68]	; (800c630 <vTaskStartScheduler+0xc4>)
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c5ee:	4b11      	ldr	r3, [pc, #68]	; (800c634 <vTaskStartScheduler+0xc8>)
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c5f4:	f001 f8bc 	bl	800d770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c5f8:	e00e      	b.n	800c618 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c600:	d10a      	bne.n	800c618 <vTaskStartScheduler+0xac>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	60fb      	str	r3, [r7, #12]
}
 800c614:	bf00      	nop
 800c616:	e7fe      	b.n	800c616 <vTaskStartScheduler+0xaa>
}
 800c618:	bf00      	nop
 800c61a:	3718      	adds	r7, #24
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	0800e854 	.word	0x0800e854
 800c624:	0800cc51 	.word	0x0800cc51
 800c628:	20001070 	.word	0x20001070
 800c62c:	2000106c 	.word	0x2000106c
 800c630:	20001058 	.word	0x20001058
 800c634:	20001050 	.word	0x20001050

0800c638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c638:	b480      	push	{r7}
 800c63a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c63c:	4b04      	ldr	r3, [pc, #16]	; (800c650 <vTaskSuspendAll+0x18>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	3301      	adds	r3, #1
 800c642:	4a03      	ldr	r2, [pc, #12]	; (800c650 <vTaskSuspendAll+0x18>)
 800c644:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c646:	bf00      	nop
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr
 800c650:	20001074 	.word	0x20001074

0800c654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c65a:	2300      	movs	r3, #0
 800c65c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c65e:	2300      	movs	r3, #0
 800c660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c662:	4b42      	ldr	r3, [pc, #264]	; (800c76c <xTaskResumeAll+0x118>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10a      	bne.n	800c680 <xTaskResumeAll+0x2c>
	__asm volatile
 800c66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66e:	f383 8811 	msr	BASEPRI, r3
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	f3bf 8f4f 	dsb	sy
 800c67a:	603b      	str	r3, [r7, #0]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c680:	f001 f918 	bl	800d8b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c684:	4b39      	ldr	r3, [pc, #228]	; (800c76c <xTaskResumeAll+0x118>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	3b01      	subs	r3, #1
 800c68a:	4a38      	ldr	r2, [pc, #224]	; (800c76c <xTaskResumeAll+0x118>)
 800c68c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c68e:	4b37      	ldr	r3, [pc, #220]	; (800c76c <xTaskResumeAll+0x118>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d162      	bne.n	800c75c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c696:	4b36      	ldr	r3, [pc, #216]	; (800c770 <xTaskResumeAll+0x11c>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d05e      	beq.n	800c75c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c69e:	e02f      	b.n	800c700 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6a0:	4b34      	ldr	r3, [pc, #208]	; (800c774 <xTaskResumeAll+0x120>)
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	3318      	adds	r3, #24
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fe ffb7 	bl	800b620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fe ffb2 	bl	800b620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c0:	4b2d      	ldr	r3, [pc, #180]	; (800c778 <xTaskResumeAll+0x124>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d903      	bls.n	800c6d0 <xTaskResumeAll+0x7c>
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6cc:	4a2a      	ldr	r2, [pc, #168]	; (800c778 <xTaskResumeAll+0x124>)
 800c6ce:	6013      	str	r3, [r2, #0]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	4413      	add	r3, r2
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	4a27      	ldr	r2, [pc, #156]	; (800c77c <xTaskResumeAll+0x128>)
 800c6de:	441a      	add	r2, r3
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	3304      	adds	r3, #4
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	4610      	mov	r0, r2
 800c6e8:	f7fe ff3d 	bl	800b566 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f0:	4b23      	ldr	r3, [pc, #140]	; (800c780 <xTaskResumeAll+0x12c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d302      	bcc.n	800c700 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c6fa:	4b22      	ldr	r3, [pc, #136]	; (800c784 <xTaskResumeAll+0x130>)
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c700:	4b1c      	ldr	r3, [pc, #112]	; (800c774 <xTaskResumeAll+0x120>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d1cb      	bne.n	800c6a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d001      	beq.n	800c712 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c70e:	f000 fb55 	bl	800cdbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c712:	4b1d      	ldr	r3, [pc, #116]	; (800c788 <xTaskResumeAll+0x134>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d010      	beq.n	800c740 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c71e:	f000 f847 	bl	800c7b0 <xTaskIncrementTick>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c728:	4b16      	ldr	r3, [pc, #88]	; (800c784 <xTaskResumeAll+0x130>)
 800c72a:	2201      	movs	r2, #1
 800c72c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	3b01      	subs	r3, #1
 800c732:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1f1      	bne.n	800c71e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c73a:	4b13      	ldr	r3, [pc, #76]	; (800c788 <xTaskResumeAll+0x134>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c740:	4b10      	ldr	r3, [pc, #64]	; (800c784 <xTaskResumeAll+0x130>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d009      	beq.n	800c75c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c748:	2301      	movs	r3, #1
 800c74a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c74c:	4b0f      	ldr	r3, [pc, #60]	; (800c78c <xTaskResumeAll+0x138>)
 800c74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c752:	601a      	str	r2, [r3, #0]
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c75c:	f001 f8da 	bl	800d914 <vPortExitCritical>

	return xAlreadyYielded;
 800c760:	68bb      	ldr	r3, [r7, #8]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	20001074 	.word	0x20001074
 800c770:	2000104c 	.word	0x2000104c
 800c774:	2000100c 	.word	0x2000100c
 800c778:	20001054 	.word	0x20001054
 800c77c:	20000b7c 	.word	0x20000b7c
 800c780:	20000b78 	.word	0x20000b78
 800c784:	20001060 	.word	0x20001060
 800c788:	2000105c 	.word	0x2000105c
 800c78c:	e000ed04 	.word	0xe000ed04

0800c790 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c796:	4b05      	ldr	r3, [pc, #20]	; (800c7ac <xTaskGetTickCount+0x1c>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c79c:	687b      	ldr	r3, [r7, #4]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	20001050 	.word	0x20001050

0800c7b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7ba:	4b4f      	ldr	r3, [pc, #316]	; (800c8f8 <xTaskIncrementTick+0x148>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f040 808f 	bne.w	800c8e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c7c4:	4b4d      	ldr	r3, [pc, #308]	; (800c8fc <xTaskIncrementTick+0x14c>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c7cc:	4a4b      	ldr	r2, [pc, #300]	; (800c8fc <xTaskIncrementTick+0x14c>)
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d120      	bne.n	800c81a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c7d8:	4b49      	ldr	r3, [pc, #292]	; (800c900 <xTaskIncrementTick+0x150>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d00a      	beq.n	800c7f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	603b      	str	r3, [r7, #0]
}
 800c7f4:	bf00      	nop
 800c7f6:	e7fe      	b.n	800c7f6 <xTaskIncrementTick+0x46>
 800c7f8:	4b41      	ldr	r3, [pc, #260]	; (800c900 <xTaskIncrementTick+0x150>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	60fb      	str	r3, [r7, #12]
 800c7fe:	4b41      	ldr	r3, [pc, #260]	; (800c904 <xTaskIncrementTick+0x154>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a3f      	ldr	r2, [pc, #252]	; (800c900 <xTaskIncrementTick+0x150>)
 800c804:	6013      	str	r3, [r2, #0]
 800c806:	4a3f      	ldr	r2, [pc, #252]	; (800c904 <xTaskIncrementTick+0x154>)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6013      	str	r3, [r2, #0]
 800c80c:	4b3e      	ldr	r3, [pc, #248]	; (800c908 <xTaskIncrementTick+0x158>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	3301      	adds	r3, #1
 800c812:	4a3d      	ldr	r2, [pc, #244]	; (800c908 <xTaskIncrementTick+0x158>)
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	f000 fad1 	bl	800cdbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c81a:	4b3c      	ldr	r3, [pc, #240]	; (800c90c <xTaskIncrementTick+0x15c>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	693a      	ldr	r2, [r7, #16]
 800c820:	429a      	cmp	r2, r3
 800c822:	d349      	bcc.n	800c8b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c824:	4b36      	ldr	r3, [pc, #216]	; (800c900 <xTaskIncrementTick+0x150>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d104      	bne.n	800c838 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c82e:	4b37      	ldr	r3, [pc, #220]	; (800c90c <xTaskIncrementTick+0x15c>)
 800c830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c834:	601a      	str	r2, [r3, #0]
					break;
 800c836:	e03f      	b.n	800c8b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c838:	4b31      	ldr	r3, [pc, #196]	; (800c900 <xTaskIncrementTick+0x150>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c848:	693a      	ldr	r2, [r7, #16]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d203      	bcs.n	800c858 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c850:	4a2e      	ldr	r2, [pc, #184]	; (800c90c <xTaskIncrementTick+0x15c>)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c856:	e02f      	b.n	800c8b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	3304      	adds	r3, #4
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7fe fedf 	bl	800b620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c866:	2b00      	cmp	r3, #0
 800c868:	d004      	beq.n	800c874 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	3318      	adds	r3, #24
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fe fed6 	bl	800b620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c878:	4b25      	ldr	r3, [pc, #148]	; (800c910 <xTaskIncrementTick+0x160>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d903      	bls.n	800c888 <xTaskIncrementTick+0xd8>
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c884:	4a22      	ldr	r2, [pc, #136]	; (800c910 <xTaskIncrementTick+0x160>)
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88c:	4613      	mov	r3, r2
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	4a1f      	ldr	r2, [pc, #124]	; (800c914 <xTaskIncrementTick+0x164>)
 800c896:	441a      	add	r2, r3
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	3304      	adds	r3, #4
 800c89c:	4619      	mov	r1, r3
 800c89e:	4610      	mov	r0, r2
 800c8a0:	f7fe fe61 	bl	800b566 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a8:	4b1b      	ldr	r3, [pc, #108]	; (800c918 <xTaskIncrementTick+0x168>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d3b8      	bcc.n	800c824 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8b6:	e7b5      	b.n	800c824 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c8b8:	4b17      	ldr	r3, [pc, #92]	; (800c918 <xTaskIncrementTick+0x168>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8be:	4915      	ldr	r1, [pc, #84]	; (800c914 <xTaskIncrementTick+0x164>)
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	440b      	add	r3, r1
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d901      	bls.n	800c8d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c8d4:	4b11      	ldr	r3, [pc, #68]	; (800c91c <xTaskIncrementTick+0x16c>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d007      	beq.n	800c8ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	617b      	str	r3, [r7, #20]
 800c8e0:	e004      	b.n	800c8ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c8e2:	4b0f      	ldr	r3, [pc, #60]	; (800c920 <xTaskIncrementTick+0x170>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	4a0d      	ldr	r2, [pc, #52]	; (800c920 <xTaskIncrementTick+0x170>)
 800c8ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c8ec:	697b      	ldr	r3, [r7, #20]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3718      	adds	r7, #24
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20001074 	.word	0x20001074
 800c8fc:	20001050 	.word	0x20001050
 800c900:	20001004 	.word	0x20001004
 800c904:	20001008 	.word	0x20001008
 800c908:	20001064 	.word	0x20001064
 800c90c:	2000106c 	.word	0x2000106c
 800c910:	20001054 	.word	0x20001054
 800c914:	20000b7c 	.word	0x20000b7c
 800c918:	20000b78 	.word	0x20000b78
 800c91c:	20001060 	.word	0x20001060
 800c920:	2000105c 	.word	0x2000105c

0800c924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c92a:	4b28      	ldr	r3, [pc, #160]	; (800c9cc <vTaskSwitchContext+0xa8>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c932:	4b27      	ldr	r3, [pc, #156]	; (800c9d0 <vTaskSwitchContext+0xac>)
 800c934:	2201      	movs	r2, #1
 800c936:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c938:	e041      	b.n	800c9be <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c93a:	4b25      	ldr	r3, [pc, #148]	; (800c9d0 <vTaskSwitchContext+0xac>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c940:	4b24      	ldr	r3, [pc, #144]	; (800c9d4 <vTaskSwitchContext+0xb0>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	60fb      	str	r3, [r7, #12]
 800c946:	e010      	b.n	800c96a <vTaskSwitchContext+0x46>
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10a      	bne.n	800c964 <vTaskSwitchContext+0x40>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	607b      	str	r3, [r7, #4]
}
 800c960:	bf00      	nop
 800c962:	e7fe      	b.n	800c962 <vTaskSwitchContext+0x3e>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	3b01      	subs	r3, #1
 800c968:	60fb      	str	r3, [r7, #12]
 800c96a:	491b      	ldr	r1, [pc, #108]	; (800c9d8 <vTaskSwitchContext+0xb4>)
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	4613      	mov	r3, r2
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	4413      	add	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	440b      	add	r3, r1
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d0e4      	beq.n	800c948 <vTaskSwitchContext+0x24>
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	4613      	mov	r3, r2
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	4413      	add	r3, r2
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	4a13      	ldr	r2, [pc, #76]	; (800c9d8 <vTaskSwitchContext+0xb4>)
 800c98a:	4413      	add	r3, r2
 800c98c:	60bb      	str	r3, [r7, #8]
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	605a      	str	r2, [r3, #4]
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	685a      	ldr	r2, [r3, #4]
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	3308      	adds	r3, #8
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d104      	bne.n	800c9ae <vTaskSwitchContext+0x8a>
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	685a      	ldr	r2, [r3, #4]
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	605a      	str	r2, [r3, #4]
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	4a09      	ldr	r2, [pc, #36]	; (800c9dc <vTaskSwitchContext+0xb8>)
 800c9b6:	6013      	str	r3, [r2, #0]
 800c9b8:	4a06      	ldr	r2, [pc, #24]	; (800c9d4 <vTaskSwitchContext+0xb0>)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6013      	str	r3, [r2, #0]
}
 800c9be:	bf00      	nop
 800c9c0:	3714      	adds	r7, #20
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	20001074 	.word	0x20001074
 800c9d0:	20001060 	.word	0x20001060
 800c9d4:	20001054 	.word	0x20001054
 800c9d8:	20000b7c 	.word	0x20000b7c
 800c9dc:	20000b78 	.word	0x20000b78

0800c9e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10a      	bne.n	800ca06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	60fb      	str	r3, [r7, #12]
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca06:	4b07      	ldr	r3, [pc, #28]	; (800ca24 <vTaskPlaceOnEventList+0x44>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3318      	adds	r3, #24
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7fe fdcd 	bl	800b5ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca14:	2101      	movs	r1, #1
 800ca16:	6838      	ldr	r0, [r7, #0]
 800ca18:	f000 fa7c 	bl	800cf14 <prvAddCurrentTaskToDelayedList>
}
 800ca1c:	bf00      	nop
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	20000b78 	.word	0x20000b78

0800ca28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10a      	bne.n	800ca50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	617b      	str	r3, [r7, #20]
}
 800ca4c:	bf00      	nop
 800ca4e:	e7fe      	b.n	800ca4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca50:	4b0a      	ldr	r3, [pc, #40]	; (800ca7c <vTaskPlaceOnEventListRestricted+0x54>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3318      	adds	r3, #24
 800ca56:	4619      	mov	r1, r3
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f7fe fd84 	bl	800b566 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d002      	beq.n	800ca6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ca64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ca6a:	6879      	ldr	r1, [r7, #4]
 800ca6c:	68b8      	ldr	r0, [r7, #8]
 800ca6e:	f000 fa51 	bl	800cf14 <prvAddCurrentTaskToDelayedList>
	}
 800ca72:	bf00      	nop
 800ca74:	3718      	adds	r7, #24
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	20000b78 	.word	0x20000b78

0800ca80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d10a      	bne.n	800caac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ca96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	60fb      	str	r3, [r7, #12]
}
 800caa8:	bf00      	nop
 800caaa:	e7fe      	b.n	800caaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	3318      	adds	r3, #24
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7fe fdb5 	bl	800b620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cab6:	4b1e      	ldr	r3, [pc, #120]	; (800cb30 <xTaskRemoveFromEventList+0xb0>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d11d      	bne.n	800cafa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	3304      	adds	r3, #4
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fe fdac 	bl	800b620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cacc:	4b19      	ldr	r3, [pc, #100]	; (800cb34 <xTaskRemoveFromEventList+0xb4>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d903      	bls.n	800cadc <xTaskRemoveFromEventList+0x5c>
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad8:	4a16      	ldr	r2, [pc, #88]	; (800cb34 <xTaskRemoveFromEventList+0xb4>)
 800cada:	6013      	str	r3, [r2, #0]
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae0:	4613      	mov	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4413      	add	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	4a13      	ldr	r2, [pc, #76]	; (800cb38 <xTaskRemoveFromEventList+0xb8>)
 800caea:	441a      	add	r2, r3
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	3304      	adds	r3, #4
 800caf0:	4619      	mov	r1, r3
 800caf2:	4610      	mov	r0, r2
 800caf4:	f7fe fd37 	bl	800b566 <vListInsertEnd>
 800caf8:	e005      	b.n	800cb06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	3318      	adds	r3, #24
 800cafe:	4619      	mov	r1, r3
 800cb00:	480e      	ldr	r0, [pc, #56]	; (800cb3c <xTaskRemoveFromEventList+0xbc>)
 800cb02:	f7fe fd30 	bl	800b566 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb0a:	4b0d      	ldr	r3, [pc, #52]	; (800cb40 <xTaskRemoveFromEventList+0xc0>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d905      	bls.n	800cb20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cb14:	2301      	movs	r3, #1
 800cb16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cb18:	4b0a      	ldr	r3, [pc, #40]	; (800cb44 <xTaskRemoveFromEventList+0xc4>)
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	e001      	b.n	800cb24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cb20:	2300      	movs	r3, #0
 800cb22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cb24:	697b      	ldr	r3, [r7, #20]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3718      	adds	r7, #24
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	20001074 	.word	0x20001074
 800cb34:	20001054 	.word	0x20001054
 800cb38:	20000b7c 	.word	0x20000b7c
 800cb3c:	2000100c 	.word	0x2000100c
 800cb40:	20000b78 	.word	0x20000b78
 800cb44:	20001060 	.word	0x20001060

0800cb48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb50:	4b06      	ldr	r3, [pc, #24]	; (800cb6c <vTaskInternalSetTimeOutState+0x24>)
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cb58:	4b05      	ldr	r3, [pc, #20]	; (800cb70 <vTaskInternalSetTimeOutState+0x28>)
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	605a      	str	r2, [r3, #4]
}
 800cb60:	bf00      	nop
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr
 800cb6c:	20001064 	.word	0x20001064
 800cb70:	20001050 	.word	0x20001050

0800cb74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b088      	sub	sp, #32
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10a      	bne.n	800cb9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	613b      	str	r3, [r7, #16]
}
 800cb96:	bf00      	nop
 800cb98:	e7fe      	b.n	800cb98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10a      	bne.n	800cbb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	60fb      	str	r3, [r7, #12]
}
 800cbb2:	bf00      	nop
 800cbb4:	e7fe      	b.n	800cbb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cbb6:	f000 fe7d 	bl	800d8b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cbba:	4b1d      	ldr	r3, [pc, #116]	; (800cc30 <xTaskCheckForTimeOut+0xbc>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	69ba      	ldr	r2, [r7, #24]
 800cbc6:	1ad3      	subs	r3, r2, r3
 800cbc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbd2:	d102      	bne.n	800cbda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	61fb      	str	r3, [r7, #28]
 800cbd8:	e023      	b.n	800cc22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	4b15      	ldr	r3, [pc, #84]	; (800cc34 <xTaskCheckForTimeOut+0xc0>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d007      	beq.n	800cbf6 <xTaskCheckForTimeOut+0x82>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	69ba      	ldr	r2, [r7, #24]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d302      	bcc.n	800cbf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	61fb      	str	r3, [r7, #28]
 800cbf4:	e015      	b.n	800cc22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d20b      	bcs.n	800cc18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	1ad2      	subs	r2, r2, r3
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7ff ff9b 	bl	800cb48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc12:	2300      	movs	r3, #0
 800cc14:	61fb      	str	r3, [r7, #28]
 800cc16:	e004      	b.n	800cc22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc22:	f000 fe77 	bl	800d914 <vPortExitCritical>

	return xReturn;
 800cc26:	69fb      	ldr	r3, [r7, #28]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3720      	adds	r7, #32
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	20001050 	.word	0x20001050
 800cc34:	20001064 	.word	0x20001064

0800cc38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc38:	b480      	push	{r7}
 800cc3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc3c:	4b03      	ldr	r3, [pc, #12]	; (800cc4c <vTaskMissedYield+0x14>)
 800cc3e:	2201      	movs	r2, #1
 800cc40:	601a      	str	r2, [r3, #0]
}
 800cc42:	bf00      	nop
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	20001060 	.word	0x20001060

0800cc50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cc58:	f000 f852 	bl	800cd00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cc5c:	4b06      	ldr	r3, [pc, #24]	; (800cc78 <prvIdleTask+0x28>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d9f9      	bls.n	800cc58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cc64:	4b05      	ldr	r3, [pc, #20]	; (800cc7c <prvIdleTask+0x2c>)
 800cc66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc6a:	601a      	str	r2, [r3, #0]
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cc74:	e7f0      	b.n	800cc58 <prvIdleTask+0x8>
 800cc76:	bf00      	nop
 800cc78:	20000b7c 	.word	0x20000b7c
 800cc7c:	e000ed04 	.word	0xe000ed04

0800cc80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc86:	2300      	movs	r3, #0
 800cc88:	607b      	str	r3, [r7, #4]
 800cc8a:	e00c      	b.n	800cca6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4413      	add	r3, r2
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4a12      	ldr	r2, [pc, #72]	; (800cce0 <prvInitialiseTaskLists+0x60>)
 800cc98:	4413      	add	r3, r2
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fe fc36 	bl	800b50c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3301      	adds	r3, #1
 800cca4:	607b      	str	r3, [r7, #4]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2b37      	cmp	r3, #55	; 0x37
 800ccaa:	d9ef      	bls.n	800cc8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ccac:	480d      	ldr	r0, [pc, #52]	; (800cce4 <prvInitialiseTaskLists+0x64>)
 800ccae:	f7fe fc2d 	bl	800b50c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ccb2:	480d      	ldr	r0, [pc, #52]	; (800cce8 <prvInitialiseTaskLists+0x68>)
 800ccb4:	f7fe fc2a 	bl	800b50c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ccb8:	480c      	ldr	r0, [pc, #48]	; (800ccec <prvInitialiseTaskLists+0x6c>)
 800ccba:	f7fe fc27 	bl	800b50c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ccbe:	480c      	ldr	r0, [pc, #48]	; (800ccf0 <prvInitialiseTaskLists+0x70>)
 800ccc0:	f7fe fc24 	bl	800b50c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ccc4:	480b      	ldr	r0, [pc, #44]	; (800ccf4 <prvInitialiseTaskLists+0x74>)
 800ccc6:	f7fe fc21 	bl	800b50c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ccca:	4b0b      	ldr	r3, [pc, #44]	; (800ccf8 <prvInitialiseTaskLists+0x78>)
 800cccc:	4a05      	ldr	r2, [pc, #20]	; (800cce4 <prvInitialiseTaskLists+0x64>)
 800ccce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ccd0:	4b0a      	ldr	r3, [pc, #40]	; (800ccfc <prvInitialiseTaskLists+0x7c>)
 800ccd2:	4a05      	ldr	r2, [pc, #20]	; (800cce8 <prvInitialiseTaskLists+0x68>)
 800ccd4:	601a      	str	r2, [r3, #0]
}
 800ccd6:	bf00      	nop
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	20000b7c 	.word	0x20000b7c
 800cce4:	20000fdc 	.word	0x20000fdc
 800cce8:	20000ff0 	.word	0x20000ff0
 800ccec:	2000100c 	.word	0x2000100c
 800ccf0:	20001020 	.word	0x20001020
 800ccf4:	20001038 	.word	0x20001038
 800ccf8:	20001004 	.word	0x20001004
 800ccfc:	20001008 	.word	0x20001008

0800cd00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd06:	e019      	b.n	800cd3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd08:	f000 fdd4 	bl	800d8b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd0c:	4b10      	ldr	r3, [pc, #64]	; (800cd50 <prvCheckTasksWaitingTermination+0x50>)
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	3304      	adds	r3, #4
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fe fc81 	bl	800b620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd1e:	4b0d      	ldr	r3, [pc, #52]	; (800cd54 <prvCheckTasksWaitingTermination+0x54>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	3b01      	subs	r3, #1
 800cd24:	4a0b      	ldr	r2, [pc, #44]	; (800cd54 <prvCheckTasksWaitingTermination+0x54>)
 800cd26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd28:	4b0b      	ldr	r3, [pc, #44]	; (800cd58 <prvCheckTasksWaitingTermination+0x58>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	4a0a      	ldr	r2, [pc, #40]	; (800cd58 <prvCheckTasksWaitingTermination+0x58>)
 800cd30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd32:	f000 fdef 	bl	800d914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 f810 	bl	800cd5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd3c:	4b06      	ldr	r3, [pc, #24]	; (800cd58 <prvCheckTasksWaitingTermination+0x58>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d1e1      	bne.n	800cd08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd44:	bf00      	nop
 800cd46:	bf00      	nop
 800cd48:	3708      	adds	r7, #8
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	20001020 	.word	0x20001020
 800cd54:	2000104c 	.word	0x2000104c
 800cd58:	20001034 	.word	0x20001034

0800cd5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d108      	bne.n	800cd80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 ff8c 	bl	800dc90 <vPortFree>
				vPortFree( pxTCB );
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 ff89 	bl	800dc90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cd7e:	e018      	b.n	800cdb2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d103      	bne.n	800cd92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 ff80 	bl	800dc90 <vPortFree>
	}
 800cd90:	e00f      	b.n	800cdb2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	d00a      	beq.n	800cdb2 <prvDeleteTCB+0x56>
	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	60fb      	str	r3, [r7, #12]
}
 800cdae:	bf00      	nop
 800cdb0:	e7fe      	b.n	800cdb0 <prvDeleteTCB+0x54>
	}
 800cdb2:	bf00      	nop
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdc2:	4b0c      	ldr	r3, [pc, #48]	; (800cdf4 <prvResetNextTaskUnblockTime+0x38>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d104      	bne.n	800cdd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	; (800cdf8 <prvResetNextTaskUnblockTime+0x3c>)
 800cdce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cdd4:	e008      	b.n	800cde8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdd6:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <prvResetNextTaskUnblockTime+0x38>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	4a04      	ldr	r2, [pc, #16]	; (800cdf8 <prvResetNextTaskUnblockTime+0x3c>)
 800cde6:	6013      	str	r3, [r2, #0]
}
 800cde8:	bf00      	nop
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	20001004 	.word	0x20001004
 800cdf8:	2000106c 	.word	0x2000106c

0800cdfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce02:	4b0b      	ldr	r3, [pc, #44]	; (800ce30 <xTaskGetSchedulerState+0x34>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d102      	bne.n	800ce10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	607b      	str	r3, [r7, #4]
 800ce0e:	e008      	b.n	800ce22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce10:	4b08      	ldr	r3, [pc, #32]	; (800ce34 <xTaskGetSchedulerState+0x38>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d102      	bne.n	800ce1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce18:	2302      	movs	r3, #2
 800ce1a:	607b      	str	r3, [r7, #4]
 800ce1c:	e001      	b.n	800ce22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce22:	687b      	ldr	r3, [r7, #4]
	}
 800ce24:	4618      	mov	r0, r3
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr
 800ce30:	20001058 	.word	0x20001058
 800ce34:	20001074 	.word	0x20001074

0800ce38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ce44:	2300      	movs	r3, #0
 800ce46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d056      	beq.n	800cefc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ce4e:	4b2e      	ldr	r3, [pc, #184]	; (800cf08 <xTaskPriorityDisinherit+0xd0>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	693a      	ldr	r2, [r7, #16]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d00a      	beq.n	800ce6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ce58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	60fb      	str	r3, [r7, #12]
}
 800ce6a:	bf00      	nop
 800ce6c:	e7fe      	b.n	800ce6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d10a      	bne.n	800ce8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ce76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	60bb      	str	r3, [r7, #8]
}
 800ce88:	bf00      	nop
 800ce8a:	e7fe      	b.n	800ce8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce90:	1e5a      	subs	r2, r3, #1
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d02c      	beq.n	800cefc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d128      	bne.n	800cefc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	3304      	adds	r3, #4
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fe fbb6 	bl	800b620 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cecc:	4b0f      	ldr	r3, [pc, #60]	; (800cf0c <xTaskPriorityDisinherit+0xd4>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d903      	bls.n	800cedc <xTaskPriorityDisinherit+0xa4>
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced8:	4a0c      	ldr	r2, [pc, #48]	; (800cf0c <xTaskPriorityDisinherit+0xd4>)
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee0:	4613      	mov	r3, r2
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	4413      	add	r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	4a09      	ldr	r2, [pc, #36]	; (800cf10 <xTaskPriorityDisinherit+0xd8>)
 800ceea:	441a      	add	r2, r3
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	3304      	adds	r3, #4
 800cef0:	4619      	mov	r1, r3
 800cef2:	4610      	mov	r0, r2
 800cef4:	f7fe fb37 	bl	800b566 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cef8:	2301      	movs	r3, #1
 800cefa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cefc:	697b      	ldr	r3, [r7, #20]
	}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3718      	adds	r7, #24
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	20000b78 	.word	0x20000b78
 800cf0c:	20001054 	.word	0x20001054
 800cf10:	20000b7c 	.word	0x20000b7c

0800cf14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf1e:	4b21      	ldr	r3, [pc, #132]	; (800cfa4 <prvAddCurrentTaskToDelayedList+0x90>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf24:	4b20      	ldr	r3, [pc, #128]	; (800cfa8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	3304      	adds	r3, #4
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fe fb78 	bl	800b620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf36:	d10a      	bne.n	800cf4e <prvAddCurrentTaskToDelayedList+0x3a>
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d007      	beq.n	800cf4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf3e:	4b1a      	ldr	r3, [pc, #104]	; (800cfa8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	3304      	adds	r3, #4
 800cf44:	4619      	mov	r1, r3
 800cf46:	4819      	ldr	r0, [pc, #100]	; (800cfac <prvAddCurrentTaskToDelayedList+0x98>)
 800cf48:	f7fe fb0d 	bl	800b566 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cf4c:	e026      	b.n	800cf9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4413      	add	r3, r2
 800cf54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cf56:	4b14      	ldr	r3, [pc, #80]	; (800cfa8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cf5e:	68ba      	ldr	r2, [r7, #8]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d209      	bcs.n	800cf7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf66:	4b12      	ldr	r3, [pc, #72]	; (800cfb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	4b0f      	ldr	r3, [pc, #60]	; (800cfa8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	3304      	adds	r3, #4
 800cf70:	4619      	mov	r1, r3
 800cf72:	4610      	mov	r0, r2
 800cf74:	f7fe fb1b 	bl	800b5ae <vListInsert>
}
 800cf78:	e010      	b.n	800cf9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf7a:	4b0e      	ldr	r3, [pc, #56]	; (800cfb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	4b0a      	ldr	r3, [pc, #40]	; (800cfa8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3304      	adds	r3, #4
 800cf84:	4619      	mov	r1, r3
 800cf86:	4610      	mov	r0, r2
 800cf88:	f7fe fb11 	bl	800b5ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cf8c:	4b0a      	ldr	r3, [pc, #40]	; (800cfb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d202      	bcs.n	800cf9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cf96:	4a08      	ldr	r2, [pc, #32]	; (800cfb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	6013      	str	r3, [r2, #0]
}
 800cf9c:	bf00      	nop
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	20001050 	.word	0x20001050
 800cfa8:	20000b78 	.word	0x20000b78
 800cfac:	20001038 	.word	0x20001038
 800cfb0:	20001008 	.word	0x20001008
 800cfb4:	20001004 	.word	0x20001004
 800cfb8:	2000106c 	.word	0x2000106c

0800cfbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08a      	sub	sp, #40	; 0x28
 800cfc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cfc6:	f000 fb07 	bl	800d5d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cfca:	4b1c      	ldr	r3, [pc, #112]	; (800d03c <xTimerCreateTimerTask+0x80>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d021      	beq.n	800d016 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cfda:	1d3a      	adds	r2, r7, #4
 800cfdc:	f107 0108 	add.w	r1, r7, #8
 800cfe0:	f107 030c 	add.w	r3, r7, #12
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fe fa77 	bl	800b4d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cfea:	6879      	ldr	r1, [r7, #4]
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	9202      	str	r2, [sp, #8]
 800cff2:	9301      	str	r3, [sp, #4]
 800cff4:	2302      	movs	r3, #2
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	2300      	movs	r3, #0
 800cffa:	460a      	mov	r2, r1
 800cffc:	4910      	ldr	r1, [pc, #64]	; (800d040 <xTimerCreateTimerTask+0x84>)
 800cffe:	4811      	ldr	r0, [pc, #68]	; (800d044 <xTimerCreateTimerTask+0x88>)
 800d000:	f7ff f8de 	bl	800c1c0 <xTaskCreateStatic>
 800d004:	4603      	mov	r3, r0
 800d006:	4a10      	ldr	r2, [pc, #64]	; (800d048 <xTimerCreateTimerTask+0x8c>)
 800d008:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d00a:	4b0f      	ldr	r3, [pc, #60]	; (800d048 <xTimerCreateTimerTask+0x8c>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d001      	beq.n	800d016 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d012:	2301      	movs	r3, #1
 800d014:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d10a      	bne.n	800d032 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d020:	f383 8811 	msr	BASEPRI, r3
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	613b      	str	r3, [r7, #16]
}
 800d02e:	bf00      	nop
 800d030:	e7fe      	b.n	800d030 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d032:	697b      	ldr	r3, [r7, #20]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	200010a8 	.word	0x200010a8
 800d040:	0800e85c 	.word	0x0800e85c
 800d044:	0800d181 	.word	0x0800d181
 800d048:	200010ac 	.word	0x200010ac

0800d04c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08a      	sub	sp, #40	; 0x28
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
 800d058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d05a:	2300      	movs	r3, #0
 800d05c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d10a      	bne.n	800d07a <xTimerGenericCommand+0x2e>
	__asm volatile
 800d064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d068:	f383 8811 	msr	BASEPRI, r3
 800d06c:	f3bf 8f6f 	isb	sy
 800d070:	f3bf 8f4f 	dsb	sy
 800d074:	623b      	str	r3, [r7, #32]
}
 800d076:	bf00      	nop
 800d078:	e7fe      	b.n	800d078 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d07a:	4b1a      	ldr	r3, [pc, #104]	; (800d0e4 <xTimerGenericCommand+0x98>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d02a      	beq.n	800d0d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	2b05      	cmp	r3, #5
 800d092:	dc18      	bgt.n	800d0c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d094:	f7ff feb2 	bl	800cdfc <xTaskGetSchedulerState>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d109      	bne.n	800d0b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d09e:	4b11      	ldr	r3, [pc, #68]	; (800d0e4 <xTimerGenericCommand+0x98>)
 800d0a0:	6818      	ldr	r0, [r3, #0]
 800d0a2:	f107 0110 	add.w	r1, r7, #16
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0aa:	f7fe fc21 	bl	800b8f0 <xQueueGenericSend>
 800d0ae:	6278      	str	r0, [r7, #36]	; 0x24
 800d0b0:	e012      	b.n	800d0d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d0b2:	4b0c      	ldr	r3, [pc, #48]	; (800d0e4 <xTimerGenericCommand+0x98>)
 800d0b4:	6818      	ldr	r0, [r3, #0]
 800d0b6:	f107 0110 	add.w	r1, r7, #16
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f7fe fc17 	bl	800b8f0 <xQueueGenericSend>
 800d0c2:	6278      	str	r0, [r7, #36]	; 0x24
 800d0c4:	e008      	b.n	800d0d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d0c6:	4b07      	ldr	r3, [pc, #28]	; (800d0e4 <xTimerGenericCommand+0x98>)
 800d0c8:	6818      	ldr	r0, [r3, #0]
 800d0ca:	f107 0110 	add.w	r1, r7, #16
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	683a      	ldr	r2, [r7, #0]
 800d0d2:	f7fe fd0b 	bl	800baec <xQueueGenericSendFromISR>
 800d0d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3728      	adds	r7, #40	; 0x28
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	200010a8 	.word	0x200010a8

0800d0e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b088      	sub	sp, #32
 800d0ec:	af02      	add	r7, sp, #8
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0f2:	4b22      	ldr	r3, [pc, #136]	; (800d17c <prvProcessExpiredTimer+0x94>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	3304      	adds	r3, #4
 800d100:	4618      	mov	r0, r3
 800d102:	f7fe fa8d 	bl	800b620 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d10c:	f003 0304 	and.w	r3, r3, #4
 800d110:	2b00      	cmp	r3, #0
 800d112:	d022      	beq.n	800d15a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	699a      	ldr	r2, [r3, #24]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	18d1      	adds	r1, r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	683a      	ldr	r2, [r7, #0]
 800d120:	6978      	ldr	r0, [r7, #20]
 800d122:	f000 f8d1 	bl	800d2c8 <prvInsertTimerInActiveList>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d01f      	beq.n	800d16c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d12c:	2300      	movs	r3, #0
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	2300      	movs	r3, #0
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	2100      	movs	r1, #0
 800d136:	6978      	ldr	r0, [r7, #20]
 800d138:	f7ff ff88 	bl	800d04c <xTimerGenericCommand>
 800d13c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d113      	bne.n	800d16c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d148:	f383 8811 	msr	BASEPRI, r3
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	60fb      	str	r3, [r7, #12]
}
 800d156:	bf00      	nop
 800d158:	e7fe      	b.n	800d158 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d160:	f023 0301 	bic.w	r3, r3, #1
 800d164:	b2da      	uxtb	r2, r3
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	6a1b      	ldr	r3, [r3, #32]
 800d170:	6978      	ldr	r0, [r7, #20]
 800d172:	4798      	blx	r3
}
 800d174:	bf00      	nop
 800d176:	3718      	adds	r7, #24
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	200010a0 	.word	0x200010a0

0800d180 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d188:	f107 0308 	add.w	r3, r7, #8
 800d18c:	4618      	mov	r0, r3
 800d18e:	f000 f857 	bl	800d240 <prvGetNextExpireTime>
 800d192:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	4619      	mov	r1, r3
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	f000 f803 	bl	800d1a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d19e:	f000 f8d5 	bl	800d34c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d1a2:	e7f1      	b.n	800d188 <prvTimerTask+0x8>

0800d1a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d1ae:	f7ff fa43 	bl	800c638 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1b2:	f107 0308 	add.w	r3, r7, #8
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 f866 	bl	800d288 <prvSampleTimeNow>
 800d1bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d130      	bne.n	800d226 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d10a      	bne.n	800d1e0 <prvProcessTimerOrBlockTask+0x3c>
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d806      	bhi.n	800d1e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d1d2:	f7ff fa3f 	bl	800c654 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d1d6:	68f9      	ldr	r1, [r7, #12]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7ff ff85 	bl	800d0e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d1de:	e024      	b.n	800d22a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d008      	beq.n	800d1f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d1e6:	4b13      	ldr	r3, [pc, #76]	; (800d234 <prvProcessTimerOrBlockTask+0x90>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d101      	bne.n	800d1f4 <prvProcessTimerOrBlockTask+0x50>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e000      	b.n	800d1f6 <prvProcessTimerOrBlockTask+0x52>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d1f8:	4b0f      	ldr	r3, [pc, #60]	; (800d238 <prvProcessTimerOrBlockTask+0x94>)
 800d1fa:	6818      	ldr	r0, [r3, #0]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	1ad3      	subs	r3, r2, r3
 800d202:	683a      	ldr	r2, [r7, #0]
 800d204:	4619      	mov	r1, r3
 800d206:	f7fe ffa7 	bl	800c158 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d20a:	f7ff fa23 	bl	800c654 <xTaskResumeAll>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10a      	bne.n	800d22a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d214:	4b09      	ldr	r3, [pc, #36]	; (800d23c <prvProcessTimerOrBlockTask+0x98>)
 800d216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d21a:	601a      	str	r2, [r3, #0]
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	f3bf 8f6f 	isb	sy
}
 800d224:	e001      	b.n	800d22a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d226:	f7ff fa15 	bl	800c654 <xTaskResumeAll>
}
 800d22a:	bf00      	nop
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	200010a4 	.word	0x200010a4
 800d238:	200010a8 	.word	0x200010a8
 800d23c:	e000ed04 	.word	0xe000ed04

0800d240 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d240:	b480      	push	{r7}
 800d242:	b085      	sub	sp, #20
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d248:	4b0e      	ldr	r3, [pc, #56]	; (800d284 <prvGetNextExpireTime+0x44>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d101      	bne.n	800d256 <prvGetNextExpireTime+0x16>
 800d252:	2201      	movs	r2, #1
 800d254:	e000      	b.n	800d258 <prvGetNextExpireTime+0x18>
 800d256:	2200      	movs	r2, #0
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d105      	bne.n	800d270 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d264:	4b07      	ldr	r3, [pc, #28]	; (800d284 <prvGetNextExpireTime+0x44>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	60fb      	str	r3, [r7, #12]
 800d26e:	e001      	b.n	800d274 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d270:	2300      	movs	r3, #0
 800d272:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d274:	68fb      	ldr	r3, [r7, #12]
}
 800d276:	4618      	mov	r0, r3
 800d278:	3714      	adds	r7, #20
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	200010a0 	.word	0x200010a0

0800d288 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d290:	f7ff fa7e 	bl	800c790 <xTaskGetTickCount>
 800d294:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d296:	4b0b      	ldr	r3, [pc, #44]	; (800d2c4 <prvSampleTimeNow+0x3c>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68fa      	ldr	r2, [r7, #12]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d205      	bcs.n	800d2ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d2a0:	f000 f936 	bl	800d510 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	601a      	str	r2, [r3, #0]
 800d2aa:	e002      	b.n	800d2b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d2b2:	4a04      	ldr	r2, [pc, #16]	; (800d2c4 <prvSampleTimeNow+0x3c>)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3710      	adds	r7, #16
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	200010b0 	.word	0x200010b0

0800d2c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	607a      	str	r2, [r7, #4]
 800d2d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	68fa      	ldr	r2, [r7, #12]
 800d2e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d812      	bhi.n	800d314 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	1ad2      	subs	r2, r2, r3
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	699b      	ldr	r3, [r3, #24]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d302      	bcc.n	800d302 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	617b      	str	r3, [r7, #20]
 800d300:	e01b      	b.n	800d33a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d302:	4b10      	ldr	r3, [pc, #64]	; (800d344 <prvInsertTimerInActiveList+0x7c>)
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3304      	adds	r3, #4
 800d30a:	4619      	mov	r1, r3
 800d30c:	4610      	mov	r0, r2
 800d30e:	f7fe f94e 	bl	800b5ae <vListInsert>
 800d312:	e012      	b.n	800d33a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d206      	bcs.n	800d32a <prvInsertTimerInActiveList+0x62>
 800d31c:	68ba      	ldr	r2, [r7, #8]
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	429a      	cmp	r2, r3
 800d322:	d302      	bcc.n	800d32a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d324:	2301      	movs	r3, #1
 800d326:	617b      	str	r3, [r7, #20]
 800d328:	e007      	b.n	800d33a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d32a:	4b07      	ldr	r3, [pc, #28]	; (800d348 <prvInsertTimerInActiveList+0x80>)
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	3304      	adds	r3, #4
 800d332:	4619      	mov	r1, r3
 800d334:	4610      	mov	r0, r2
 800d336:	f7fe f93a 	bl	800b5ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d33a:	697b      	ldr	r3, [r7, #20]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3718      	adds	r7, #24
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	200010a4 	.word	0x200010a4
 800d348:	200010a0 	.word	0x200010a0

0800d34c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b08e      	sub	sp, #56	; 0x38
 800d350:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d352:	e0ca      	b.n	800d4ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	da18      	bge.n	800d38c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d35a:	1d3b      	adds	r3, r7, #4
 800d35c:	3304      	adds	r3, #4
 800d35e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d362:	2b00      	cmp	r3, #0
 800d364:	d10a      	bne.n	800d37c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36a:	f383 8811 	msr	BASEPRI, r3
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	f3bf 8f4f 	dsb	sy
 800d376:	61fb      	str	r3, [r7, #28]
}
 800d378:	bf00      	nop
 800d37a:	e7fe      	b.n	800d37a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d382:	6850      	ldr	r0, [r2, #4]
 800d384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d386:	6892      	ldr	r2, [r2, #8]
 800d388:	4611      	mov	r1, r2
 800d38a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f2c0 80aa 	blt.w	800d4e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	695b      	ldr	r3, [r3, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d004      	beq.n	800d3aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a2:	3304      	adds	r3, #4
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fe f93b 	bl	800b620 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d3aa:	463b      	mov	r3, r7
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7ff ff6b 	bl	800d288 <prvSampleTimeNow>
 800d3b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2b09      	cmp	r3, #9
 800d3b8:	f200 8097 	bhi.w	800d4ea <prvProcessReceivedCommands+0x19e>
 800d3bc:	a201      	add	r2, pc, #4	; (adr r2, 800d3c4 <prvProcessReceivedCommands+0x78>)
 800d3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c2:	bf00      	nop
 800d3c4:	0800d3ed 	.word	0x0800d3ed
 800d3c8:	0800d3ed 	.word	0x0800d3ed
 800d3cc:	0800d3ed 	.word	0x0800d3ed
 800d3d0:	0800d461 	.word	0x0800d461
 800d3d4:	0800d475 	.word	0x0800d475
 800d3d8:	0800d4bf 	.word	0x0800d4bf
 800d3dc:	0800d3ed 	.word	0x0800d3ed
 800d3e0:	0800d3ed 	.word	0x0800d3ed
 800d3e4:	0800d461 	.word	0x0800d461
 800d3e8:	0800d475 	.word	0x0800d475
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3f2:	f043 0301 	orr.w	r3, r3, #1
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	18d1      	adds	r1, r2, r3
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d40c:	f7ff ff5c 	bl	800d2c8 <prvInsertTimerInActiveList>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d069      	beq.n	800d4ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d418:	6a1b      	ldr	r3, [r3, #32]
 800d41a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d41c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d424:	f003 0304 	and.w	r3, r3, #4
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d05e      	beq.n	800d4ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	699b      	ldr	r3, [r3, #24]
 800d432:	441a      	add	r2, r3
 800d434:	2300      	movs	r3, #0
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	2300      	movs	r3, #0
 800d43a:	2100      	movs	r1, #0
 800d43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d43e:	f7ff fe05 	bl	800d04c <xTimerGenericCommand>
 800d442:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d444:	6a3b      	ldr	r3, [r7, #32]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d14f      	bne.n	800d4ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44e:	f383 8811 	msr	BASEPRI, r3
 800d452:	f3bf 8f6f 	isb	sy
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	61bb      	str	r3, [r7, #24]
}
 800d45c:	bf00      	nop
 800d45e:	e7fe      	b.n	800d45e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d466:	f023 0301 	bic.w	r3, r3, #1
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d472:	e03a      	b.n	800d4ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d47a:	f043 0301 	orr.w	r3, r3, #1
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	699b      	ldr	r3, [r3, #24]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10a      	bne.n	800d4aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	617b      	str	r3, [r7, #20]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ac:	699a      	ldr	r2, [r3, #24]
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b0:	18d1      	adds	r1, r2, r3
 800d4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4b8:	f7ff ff06 	bl	800d2c8 <prvInsertTimerInActiveList>
					break;
 800d4bc:	e015      	b.n	800d4ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4c4:	f003 0302 	and.w	r3, r3, #2
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d103      	bne.n	800d4d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4ce:	f000 fbdf 	bl	800dc90 <vPortFree>
 800d4d2:	e00a      	b.n	800d4ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4da:	f023 0301 	bic.w	r3, r3, #1
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d4e6:	e000      	b.n	800d4ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d4e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d4ea:	4b08      	ldr	r3, [pc, #32]	; (800d50c <prvProcessReceivedCommands+0x1c0>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	1d39      	adds	r1, r7, #4
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe fb96 	bl	800bc24 <xQueueReceive>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	f47f af2a 	bne.w	800d354 <prvProcessReceivedCommands+0x8>
	}
}
 800d500:	bf00      	nop
 800d502:	bf00      	nop
 800d504:	3730      	adds	r7, #48	; 0x30
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	200010a8 	.word	0x200010a8

0800d510 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b088      	sub	sp, #32
 800d514:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d516:	e048      	b.n	800d5aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d518:	4b2d      	ldr	r3, [pc, #180]	; (800d5d0 <prvSwitchTimerLists+0xc0>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d522:	4b2b      	ldr	r3, [pc, #172]	; (800d5d0 <prvSwitchTimerLists+0xc0>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	3304      	adds	r3, #4
 800d530:	4618      	mov	r0, r3
 800d532:	f7fe f875 	bl	800b620 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6a1b      	ldr	r3, [r3, #32]
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d544:	f003 0304 	and.w	r3, r3, #4
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d02e      	beq.n	800d5aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	699b      	ldr	r3, [r3, #24]
 800d550:	693a      	ldr	r2, [r7, #16]
 800d552:	4413      	add	r3, r2
 800d554:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d556:	68ba      	ldr	r2, [r7, #8]
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d90e      	bls.n	800d57c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	68ba      	ldr	r2, [r7, #8]
 800d562:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	68fa      	ldr	r2, [r7, #12]
 800d568:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d56a:	4b19      	ldr	r3, [pc, #100]	; (800d5d0 <prvSwitchTimerLists+0xc0>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	3304      	adds	r3, #4
 800d572:	4619      	mov	r1, r3
 800d574:	4610      	mov	r0, r2
 800d576:	f7fe f81a 	bl	800b5ae <vListInsert>
 800d57a:	e016      	b.n	800d5aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d57c:	2300      	movs	r3, #0
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	2300      	movs	r3, #0
 800d582:	693a      	ldr	r2, [r7, #16]
 800d584:	2100      	movs	r1, #0
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f7ff fd60 	bl	800d04c <xTimerGenericCommand>
 800d58c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d10a      	bne.n	800d5aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d598:	f383 8811 	msr	BASEPRI, r3
 800d59c:	f3bf 8f6f 	isb	sy
 800d5a0:	f3bf 8f4f 	dsb	sy
 800d5a4:	603b      	str	r3, [r7, #0]
}
 800d5a6:	bf00      	nop
 800d5a8:	e7fe      	b.n	800d5a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5aa:	4b09      	ldr	r3, [pc, #36]	; (800d5d0 <prvSwitchTimerLists+0xc0>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1b1      	bne.n	800d518 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d5b4:	4b06      	ldr	r3, [pc, #24]	; (800d5d0 <prvSwitchTimerLists+0xc0>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d5ba:	4b06      	ldr	r3, [pc, #24]	; (800d5d4 <prvSwitchTimerLists+0xc4>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a04      	ldr	r2, [pc, #16]	; (800d5d0 <prvSwitchTimerLists+0xc0>)
 800d5c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d5c2:	4a04      	ldr	r2, [pc, #16]	; (800d5d4 <prvSwitchTimerLists+0xc4>)
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	6013      	str	r3, [r2, #0]
}
 800d5c8:	bf00      	nop
 800d5ca:	3718      	adds	r7, #24
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	200010a0 	.word	0x200010a0
 800d5d4:	200010a4 	.word	0x200010a4

0800d5d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d5de:	f000 f969 	bl	800d8b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d5e2:	4b15      	ldr	r3, [pc, #84]	; (800d638 <prvCheckForValidListAndQueue+0x60>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d120      	bne.n	800d62c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d5ea:	4814      	ldr	r0, [pc, #80]	; (800d63c <prvCheckForValidListAndQueue+0x64>)
 800d5ec:	f7fd ff8e 	bl	800b50c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d5f0:	4813      	ldr	r0, [pc, #76]	; (800d640 <prvCheckForValidListAndQueue+0x68>)
 800d5f2:	f7fd ff8b 	bl	800b50c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d5f6:	4b13      	ldr	r3, [pc, #76]	; (800d644 <prvCheckForValidListAndQueue+0x6c>)
 800d5f8:	4a10      	ldr	r2, [pc, #64]	; (800d63c <prvCheckForValidListAndQueue+0x64>)
 800d5fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d5fc:	4b12      	ldr	r3, [pc, #72]	; (800d648 <prvCheckForValidListAndQueue+0x70>)
 800d5fe:	4a10      	ldr	r2, [pc, #64]	; (800d640 <prvCheckForValidListAndQueue+0x68>)
 800d600:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d602:	2300      	movs	r3, #0
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	4b11      	ldr	r3, [pc, #68]	; (800d64c <prvCheckForValidListAndQueue+0x74>)
 800d608:	4a11      	ldr	r2, [pc, #68]	; (800d650 <prvCheckForValidListAndQueue+0x78>)
 800d60a:	2110      	movs	r1, #16
 800d60c:	200a      	movs	r0, #10
 800d60e:	f7fe f899 	bl	800b744 <xQueueGenericCreateStatic>
 800d612:	4603      	mov	r3, r0
 800d614:	4a08      	ldr	r2, [pc, #32]	; (800d638 <prvCheckForValidListAndQueue+0x60>)
 800d616:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d618:	4b07      	ldr	r3, [pc, #28]	; (800d638 <prvCheckForValidListAndQueue+0x60>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d005      	beq.n	800d62c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d620:	4b05      	ldr	r3, [pc, #20]	; (800d638 <prvCheckForValidListAndQueue+0x60>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	490b      	ldr	r1, [pc, #44]	; (800d654 <prvCheckForValidListAndQueue+0x7c>)
 800d626:	4618      	mov	r0, r3
 800d628:	f7fe fd6c 	bl	800c104 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d62c:	f000 f972 	bl	800d914 <vPortExitCritical>
}
 800d630:	bf00      	nop
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	200010a8 	.word	0x200010a8
 800d63c:	20001078 	.word	0x20001078
 800d640:	2000108c 	.word	0x2000108c
 800d644:	200010a0 	.word	0x200010a0
 800d648:	200010a4 	.word	0x200010a4
 800d64c:	20001154 	.word	0x20001154
 800d650:	200010b4 	.word	0x200010b4
 800d654:	0800e864 	.word	0x0800e864

0800d658 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3b04      	subs	r3, #4
 800d668:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	3b04      	subs	r3, #4
 800d676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	f023 0201 	bic.w	r2, r3, #1
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	3b04      	subs	r3, #4
 800d686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d688:	4a0c      	ldr	r2, [pc, #48]	; (800d6bc <pxPortInitialiseStack+0x64>)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	3b14      	subs	r3, #20
 800d692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	3b04      	subs	r3, #4
 800d69e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f06f 0202 	mvn.w	r2, #2
 800d6a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	3b20      	subs	r3, #32
 800d6ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3714      	adds	r7, #20
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	0800d6c1 	.word	0x0800d6c1

0800d6c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d6ca:	4b12      	ldr	r3, [pc, #72]	; (800d714 <prvTaskExitError+0x54>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6d2:	d00a      	beq.n	800d6ea <prvTaskExitError+0x2a>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	60fb      	str	r3, [r7, #12]
}
 800d6e6:	bf00      	nop
 800d6e8:	e7fe      	b.n	800d6e8 <prvTaskExitError+0x28>
	__asm volatile
 800d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	60bb      	str	r3, [r7, #8]
}
 800d6fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d6fe:	bf00      	nop
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d0fc      	beq.n	800d700 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d706:	bf00      	nop
 800d708:	bf00      	nop
 800d70a:	3714      	adds	r7, #20
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr
 800d714:	2000002c 	.word	0x2000002c
	...

0800d720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d720:	4b07      	ldr	r3, [pc, #28]	; (800d740 <pxCurrentTCBConst2>)
 800d722:	6819      	ldr	r1, [r3, #0]
 800d724:	6808      	ldr	r0, [r1, #0]
 800d726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72a:	f380 8809 	msr	PSP, r0
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f04f 0000 	mov.w	r0, #0
 800d736:	f380 8811 	msr	BASEPRI, r0
 800d73a:	4770      	bx	lr
 800d73c:	f3af 8000 	nop.w

0800d740 <pxCurrentTCBConst2>:
 800d740:	20000b78 	.word	0x20000b78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d744:	bf00      	nop
 800d746:	bf00      	nop

0800d748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d748:	4808      	ldr	r0, [pc, #32]	; (800d76c <prvPortStartFirstTask+0x24>)
 800d74a:	6800      	ldr	r0, [r0, #0]
 800d74c:	6800      	ldr	r0, [r0, #0]
 800d74e:	f380 8808 	msr	MSP, r0
 800d752:	f04f 0000 	mov.w	r0, #0
 800d756:	f380 8814 	msr	CONTROL, r0
 800d75a:	b662      	cpsie	i
 800d75c:	b661      	cpsie	f
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	f3bf 8f6f 	isb	sy
 800d766:	df00      	svc	0
 800d768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d76a:	bf00      	nop
 800d76c:	e000ed08 	.word	0xe000ed08

0800d770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d776:	4b46      	ldr	r3, [pc, #280]	; (800d890 <xPortStartScheduler+0x120>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a46      	ldr	r2, [pc, #280]	; (800d894 <xPortStartScheduler+0x124>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d10a      	bne.n	800d796 <xPortStartScheduler+0x26>
	__asm volatile
 800d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	613b      	str	r3, [r7, #16]
}
 800d792:	bf00      	nop
 800d794:	e7fe      	b.n	800d794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d796:	4b3e      	ldr	r3, [pc, #248]	; (800d890 <xPortStartScheduler+0x120>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4a3f      	ldr	r2, [pc, #252]	; (800d898 <xPortStartScheduler+0x128>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d10a      	bne.n	800d7b6 <xPortStartScheduler+0x46>
	__asm volatile
 800d7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	60fb      	str	r3, [r7, #12]
}
 800d7b2:	bf00      	nop
 800d7b4:	e7fe      	b.n	800d7b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d7b6:	4b39      	ldr	r3, [pc, #228]	; (800d89c <xPortStartScheduler+0x12c>)
 800d7b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	22ff      	movs	r2, #255	; 0xff
 800d7c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d7d0:	78fb      	ldrb	r3, [r7, #3]
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	4b31      	ldr	r3, [pc, #196]	; (800d8a0 <xPortStartScheduler+0x130>)
 800d7dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d7de:	4b31      	ldr	r3, [pc, #196]	; (800d8a4 <xPortStartScheduler+0x134>)
 800d7e0:	2207      	movs	r2, #7
 800d7e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7e4:	e009      	b.n	800d7fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d7e6:	4b2f      	ldr	r3, [pc, #188]	; (800d8a4 <xPortStartScheduler+0x134>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	4a2d      	ldr	r2, [pc, #180]	; (800d8a4 <xPortStartScheduler+0x134>)
 800d7ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d7f0:	78fb      	ldrb	r3, [r7, #3]
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	005b      	lsls	r3, r3, #1
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7fa:	78fb      	ldrb	r3, [r7, #3]
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d802:	2b80      	cmp	r3, #128	; 0x80
 800d804:	d0ef      	beq.n	800d7e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d806:	4b27      	ldr	r3, [pc, #156]	; (800d8a4 <xPortStartScheduler+0x134>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f1c3 0307 	rsb	r3, r3, #7
 800d80e:	2b04      	cmp	r3, #4
 800d810:	d00a      	beq.n	800d828 <xPortStartScheduler+0xb8>
	__asm volatile
 800d812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	60bb      	str	r3, [r7, #8]
}
 800d824:	bf00      	nop
 800d826:	e7fe      	b.n	800d826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d828:	4b1e      	ldr	r3, [pc, #120]	; (800d8a4 <xPortStartScheduler+0x134>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	021b      	lsls	r3, r3, #8
 800d82e:	4a1d      	ldr	r2, [pc, #116]	; (800d8a4 <xPortStartScheduler+0x134>)
 800d830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d832:	4b1c      	ldr	r3, [pc, #112]	; (800d8a4 <xPortStartScheduler+0x134>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d83a:	4a1a      	ldr	r2, [pc, #104]	; (800d8a4 <xPortStartScheduler+0x134>)
 800d83c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	b2da      	uxtb	r2, r3
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d846:	4b18      	ldr	r3, [pc, #96]	; (800d8a8 <xPortStartScheduler+0x138>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4a17      	ldr	r2, [pc, #92]	; (800d8a8 <xPortStartScheduler+0x138>)
 800d84c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d852:	4b15      	ldr	r3, [pc, #84]	; (800d8a8 <xPortStartScheduler+0x138>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a14      	ldr	r2, [pc, #80]	; (800d8a8 <xPortStartScheduler+0x138>)
 800d858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d85c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d85e:	f000 f8dd 	bl	800da1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d862:	4b12      	ldr	r3, [pc, #72]	; (800d8ac <xPortStartScheduler+0x13c>)
 800d864:	2200      	movs	r2, #0
 800d866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d868:	f000 f8fc 	bl	800da64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d86c:	4b10      	ldr	r3, [pc, #64]	; (800d8b0 <xPortStartScheduler+0x140>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4a0f      	ldr	r2, [pc, #60]	; (800d8b0 <xPortStartScheduler+0x140>)
 800d872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d878:	f7ff ff66 	bl	800d748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d87c:	f7ff f852 	bl	800c924 <vTaskSwitchContext>
	prvTaskExitError();
 800d880:	f7ff ff1e 	bl	800d6c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d884:	2300      	movs	r3, #0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3718      	adds	r7, #24
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	e000ed00 	.word	0xe000ed00
 800d894:	410fc271 	.word	0x410fc271
 800d898:	410fc270 	.word	0x410fc270
 800d89c:	e000e400 	.word	0xe000e400
 800d8a0:	200011a4 	.word	0x200011a4
 800d8a4:	200011a8 	.word	0x200011a8
 800d8a8:	e000ed20 	.word	0xe000ed20
 800d8ac:	2000002c 	.word	0x2000002c
 800d8b0:	e000ef34 	.word	0xe000ef34

0800d8b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
	__asm volatile
 800d8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8be:	f383 8811 	msr	BASEPRI, r3
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	607b      	str	r3, [r7, #4]
}
 800d8cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d8ce:	4b0f      	ldr	r3, [pc, #60]	; (800d90c <vPortEnterCritical+0x58>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	4a0d      	ldr	r2, [pc, #52]	; (800d90c <vPortEnterCritical+0x58>)
 800d8d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d8d8:	4b0c      	ldr	r3, [pc, #48]	; (800d90c <vPortEnterCritical+0x58>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d10f      	bne.n	800d900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d8e0:	4b0b      	ldr	r3, [pc, #44]	; (800d910 <vPortEnterCritical+0x5c>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d00a      	beq.n	800d900 <vPortEnterCritical+0x4c>
	__asm volatile
 800d8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ee:	f383 8811 	msr	BASEPRI, r3
 800d8f2:	f3bf 8f6f 	isb	sy
 800d8f6:	f3bf 8f4f 	dsb	sy
 800d8fa:	603b      	str	r3, [r7, #0]
}
 800d8fc:	bf00      	nop
 800d8fe:	e7fe      	b.n	800d8fe <vPortEnterCritical+0x4a>
	}
}
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr
 800d90c:	2000002c 	.word	0x2000002c
 800d910:	e000ed04 	.word	0xe000ed04

0800d914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d91a:	4b12      	ldr	r3, [pc, #72]	; (800d964 <vPortExitCritical+0x50>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d10a      	bne.n	800d938 <vPortExitCritical+0x24>
	__asm volatile
 800d922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d926:	f383 8811 	msr	BASEPRI, r3
 800d92a:	f3bf 8f6f 	isb	sy
 800d92e:	f3bf 8f4f 	dsb	sy
 800d932:	607b      	str	r3, [r7, #4]
}
 800d934:	bf00      	nop
 800d936:	e7fe      	b.n	800d936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d938:	4b0a      	ldr	r3, [pc, #40]	; (800d964 <vPortExitCritical+0x50>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	3b01      	subs	r3, #1
 800d93e:	4a09      	ldr	r2, [pc, #36]	; (800d964 <vPortExitCritical+0x50>)
 800d940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d942:	4b08      	ldr	r3, [pc, #32]	; (800d964 <vPortExitCritical+0x50>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d105      	bne.n	800d956 <vPortExitCritical+0x42>
 800d94a:	2300      	movs	r3, #0
 800d94c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	f383 8811 	msr	BASEPRI, r3
}
 800d954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d956:	bf00      	nop
 800d958:	370c      	adds	r7, #12
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	2000002c 	.word	0x2000002c
	...

0800d970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d970:	f3ef 8009 	mrs	r0, PSP
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	4b15      	ldr	r3, [pc, #84]	; (800d9d0 <pxCurrentTCBConst>)
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	f01e 0f10 	tst.w	lr, #16
 800d980:	bf08      	it	eq
 800d982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98a:	6010      	str	r0, [r2, #0]
 800d98c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d990:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d994:	f380 8811 	msr	BASEPRI, r0
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	f3bf 8f6f 	isb	sy
 800d9a0:	f7fe ffc0 	bl	800c924 <vTaskSwitchContext>
 800d9a4:	f04f 0000 	mov.w	r0, #0
 800d9a8:	f380 8811 	msr	BASEPRI, r0
 800d9ac:	bc09      	pop	{r0, r3}
 800d9ae:	6819      	ldr	r1, [r3, #0]
 800d9b0:	6808      	ldr	r0, [r1, #0]
 800d9b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b6:	f01e 0f10 	tst.w	lr, #16
 800d9ba:	bf08      	it	eq
 800d9bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d9c0:	f380 8809 	msr	PSP, r0
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	f3af 8000 	nop.w

0800d9d0 <pxCurrentTCBConst>:
 800d9d0:	20000b78 	.word	0x20000b78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d9d4:	bf00      	nop
 800d9d6:	bf00      	nop

0800d9d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	607b      	str	r3, [r7, #4]
}
 800d9f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d9f2:	f7fe fedd 	bl	800c7b0 <xTaskIncrementTick>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d003      	beq.n	800da04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d9fc:	4b06      	ldr	r3, [pc, #24]	; (800da18 <xPortSysTickHandler+0x40>)
 800d9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da02:	601a      	str	r2, [r3, #0]
 800da04:	2300      	movs	r3, #0
 800da06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	f383 8811 	msr	BASEPRI, r3
}
 800da0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800da10:	bf00      	nop
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	e000ed04 	.word	0xe000ed04

0800da1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da1c:	b480      	push	{r7}
 800da1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da20:	4b0b      	ldr	r3, [pc, #44]	; (800da50 <vPortSetupTimerInterrupt+0x34>)
 800da22:	2200      	movs	r2, #0
 800da24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da26:	4b0b      	ldr	r3, [pc, #44]	; (800da54 <vPortSetupTimerInterrupt+0x38>)
 800da28:	2200      	movs	r2, #0
 800da2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da2c:	4b0a      	ldr	r3, [pc, #40]	; (800da58 <vPortSetupTimerInterrupt+0x3c>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a0a      	ldr	r2, [pc, #40]	; (800da5c <vPortSetupTimerInterrupt+0x40>)
 800da32:	fba2 2303 	umull	r2, r3, r2, r3
 800da36:	099b      	lsrs	r3, r3, #6
 800da38:	4a09      	ldr	r2, [pc, #36]	; (800da60 <vPortSetupTimerInterrupt+0x44>)
 800da3a:	3b01      	subs	r3, #1
 800da3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da3e:	4b04      	ldr	r3, [pc, #16]	; (800da50 <vPortSetupTimerInterrupt+0x34>)
 800da40:	2207      	movs	r2, #7
 800da42:	601a      	str	r2, [r3, #0]
}
 800da44:	bf00      	nop
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	e000e010 	.word	0xe000e010
 800da54:	e000e018 	.word	0xe000e018
 800da58:	20000000 	.word	0x20000000
 800da5c:	10624dd3 	.word	0x10624dd3
 800da60:	e000e014 	.word	0xe000e014

0800da64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800da64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800da74 <vPortEnableVFP+0x10>
 800da68:	6801      	ldr	r1, [r0, #0]
 800da6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800da6e:	6001      	str	r1, [r0, #0]
 800da70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800da72:	bf00      	nop
 800da74:	e000ed88 	.word	0xe000ed88

0800da78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800da7e:	f3ef 8305 	mrs	r3, IPSR
 800da82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2b0f      	cmp	r3, #15
 800da88:	d914      	bls.n	800dab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800da8a:	4a17      	ldr	r2, [pc, #92]	; (800dae8 <vPortValidateInterruptPriority+0x70>)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	4413      	add	r3, r2
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800da94:	4b15      	ldr	r3, [pc, #84]	; (800daec <vPortValidateInterruptPriority+0x74>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	7afa      	ldrb	r2, [r7, #11]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d20a      	bcs.n	800dab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800da9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa2:	f383 8811 	msr	BASEPRI, r3
 800daa6:	f3bf 8f6f 	isb	sy
 800daaa:	f3bf 8f4f 	dsb	sy
 800daae:	607b      	str	r3, [r7, #4]
}
 800dab0:	bf00      	nop
 800dab2:	e7fe      	b.n	800dab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dab4:	4b0e      	ldr	r3, [pc, #56]	; (800daf0 <vPortValidateInterruptPriority+0x78>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dabc:	4b0d      	ldr	r3, [pc, #52]	; (800daf4 <vPortValidateInterruptPriority+0x7c>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d90a      	bls.n	800dada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac8:	f383 8811 	msr	BASEPRI, r3
 800dacc:	f3bf 8f6f 	isb	sy
 800dad0:	f3bf 8f4f 	dsb	sy
 800dad4:	603b      	str	r3, [r7, #0]
}
 800dad6:	bf00      	nop
 800dad8:	e7fe      	b.n	800dad8 <vPortValidateInterruptPriority+0x60>
	}
 800dada:	bf00      	nop
 800dadc:	3714      	adds	r7, #20
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	e000e3f0 	.word	0xe000e3f0
 800daec:	200011a4 	.word	0x200011a4
 800daf0:	e000ed0c 	.word	0xe000ed0c
 800daf4:	200011a8 	.word	0x200011a8

0800daf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b08a      	sub	sp, #40	; 0x28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800db00:	2300      	movs	r3, #0
 800db02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800db04:	f7fe fd98 	bl	800c638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800db08:	4b5b      	ldr	r3, [pc, #364]	; (800dc78 <pvPortMalloc+0x180>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d101      	bne.n	800db14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db10:	f000 f920 	bl	800dd54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db14:	4b59      	ldr	r3, [pc, #356]	; (800dc7c <pvPortMalloc+0x184>)
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4013      	ands	r3, r2
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f040 8093 	bne.w	800dc48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d01d      	beq.n	800db64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800db28:	2208      	movs	r2, #8
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4413      	add	r3, r2
 800db2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f003 0307 	and.w	r3, r3, #7
 800db36:	2b00      	cmp	r3, #0
 800db38:	d014      	beq.n	800db64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f023 0307 	bic.w	r3, r3, #7
 800db40:	3308      	adds	r3, #8
 800db42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f003 0307 	and.w	r3, r3, #7
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d00a      	beq.n	800db64 <pvPortMalloc+0x6c>
	__asm volatile
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	617b      	str	r3, [r7, #20]
}
 800db60:	bf00      	nop
 800db62:	e7fe      	b.n	800db62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d06e      	beq.n	800dc48 <pvPortMalloc+0x150>
 800db6a:	4b45      	ldr	r3, [pc, #276]	; (800dc80 <pvPortMalloc+0x188>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	429a      	cmp	r2, r3
 800db72:	d869      	bhi.n	800dc48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800db74:	4b43      	ldr	r3, [pc, #268]	; (800dc84 <pvPortMalloc+0x18c>)
 800db76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800db78:	4b42      	ldr	r3, [pc, #264]	; (800dc84 <pvPortMalloc+0x18c>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db7e:	e004      	b.n	800db8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800db80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	429a      	cmp	r2, r3
 800db92:	d903      	bls.n	800db9c <pvPortMalloc+0xa4>
 800db94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1f1      	bne.n	800db80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800db9c:	4b36      	ldr	r3, [pc, #216]	; (800dc78 <pvPortMalloc+0x180>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d050      	beq.n	800dc48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dba6:	6a3b      	ldr	r3, [r7, #32]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2208      	movs	r2, #8
 800dbac:	4413      	add	r3, r2
 800dbae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	6a3b      	ldr	r3, [r7, #32]
 800dbb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbba:	685a      	ldr	r2, [r3, #4]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	1ad2      	subs	r2, r2, r3
 800dbc0:	2308      	movs	r3, #8
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d91f      	bls.n	800dc08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dbc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	4413      	add	r3, r2
 800dbce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	f003 0307 	and.w	r3, r3, #7
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00a      	beq.n	800dbf0 <pvPortMalloc+0xf8>
	__asm volatile
 800dbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbde:	f383 8811 	msr	BASEPRI, r3
 800dbe2:	f3bf 8f6f 	isb	sy
 800dbe6:	f3bf 8f4f 	dsb	sy
 800dbea:	613b      	str	r3, [r7, #16]
}
 800dbec:	bf00      	nop
 800dbee:	e7fe      	b.n	800dbee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf2:	685a      	ldr	r2, [r3, #4]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	1ad2      	subs	r2, r2, r3
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dc02:	69b8      	ldr	r0, [r7, #24]
 800dc04:	f000 f908 	bl	800de18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc08:	4b1d      	ldr	r3, [pc, #116]	; (800dc80 <pvPortMalloc+0x188>)
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	1ad3      	subs	r3, r2, r3
 800dc12:	4a1b      	ldr	r2, [pc, #108]	; (800dc80 <pvPortMalloc+0x188>)
 800dc14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc16:	4b1a      	ldr	r3, [pc, #104]	; (800dc80 <pvPortMalloc+0x188>)
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	4b1b      	ldr	r3, [pc, #108]	; (800dc88 <pvPortMalloc+0x190>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d203      	bcs.n	800dc2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc22:	4b17      	ldr	r3, [pc, #92]	; (800dc80 <pvPortMalloc+0x188>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a18      	ldr	r2, [pc, #96]	; (800dc88 <pvPortMalloc+0x190>)
 800dc28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2c:	685a      	ldr	r2, [r3, #4]
 800dc2e:	4b13      	ldr	r3, [pc, #76]	; (800dc7c <pvPortMalloc+0x184>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	431a      	orrs	r2, r3
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dc3e:	4b13      	ldr	r3, [pc, #76]	; (800dc8c <pvPortMalloc+0x194>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	3301      	adds	r3, #1
 800dc44:	4a11      	ldr	r2, [pc, #68]	; (800dc8c <pvPortMalloc+0x194>)
 800dc46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dc48:	f7fe fd04 	bl	800c654 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	f003 0307 	and.w	r3, r3, #7
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00a      	beq.n	800dc6c <pvPortMalloc+0x174>
	__asm volatile
 800dc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5a:	f383 8811 	msr	BASEPRI, r3
 800dc5e:	f3bf 8f6f 	isb	sy
 800dc62:	f3bf 8f4f 	dsb	sy
 800dc66:	60fb      	str	r3, [r7, #12]
}
 800dc68:	bf00      	nop
 800dc6a:	e7fe      	b.n	800dc6a <pvPortMalloc+0x172>
	return pvReturn;
 800dc6c:	69fb      	ldr	r3, [r7, #28]
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3728      	adds	r7, #40	; 0x28
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	20004db4 	.word	0x20004db4
 800dc7c:	20004dc8 	.word	0x20004dc8
 800dc80:	20004db8 	.word	0x20004db8
 800dc84:	20004dac 	.word	0x20004dac
 800dc88:	20004dbc 	.word	0x20004dbc
 800dc8c:	20004dc0 	.word	0x20004dc0

0800dc90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d04d      	beq.n	800dd3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dca2:	2308      	movs	r3, #8
 800dca4:	425b      	negs	r3, r3
 800dca6:	697a      	ldr	r2, [r7, #20]
 800dca8:	4413      	add	r3, r2
 800dcaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	685a      	ldr	r2, [r3, #4]
 800dcb4:	4b24      	ldr	r3, [pc, #144]	; (800dd48 <vPortFree+0xb8>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4013      	ands	r3, r2
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d10a      	bne.n	800dcd4 <vPortFree+0x44>
	__asm volatile
 800dcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc2:	f383 8811 	msr	BASEPRI, r3
 800dcc6:	f3bf 8f6f 	isb	sy
 800dcca:	f3bf 8f4f 	dsb	sy
 800dcce:	60fb      	str	r3, [r7, #12]
}
 800dcd0:	bf00      	nop
 800dcd2:	e7fe      	b.n	800dcd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d00a      	beq.n	800dcf2 <vPortFree+0x62>
	__asm volatile
 800dcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce0:	f383 8811 	msr	BASEPRI, r3
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	f3bf 8f4f 	dsb	sy
 800dcec:	60bb      	str	r3, [r7, #8]
}
 800dcee:	bf00      	nop
 800dcf0:	e7fe      	b.n	800dcf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	685a      	ldr	r2, [r3, #4]
 800dcf6:	4b14      	ldr	r3, [pc, #80]	; (800dd48 <vPortFree+0xb8>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4013      	ands	r3, r2
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d01e      	beq.n	800dd3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d11a      	bne.n	800dd3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	685a      	ldr	r2, [r3, #4]
 800dd0c:	4b0e      	ldr	r3, [pc, #56]	; (800dd48 <vPortFree+0xb8>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	43db      	mvns	r3, r3
 800dd12:	401a      	ands	r2, r3
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dd18:	f7fe fc8e 	bl	800c638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	685a      	ldr	r2, [r3, #4]
 800dd20:	4b0a      	ldr	r3, [pc, #40]	; (800dd4c <vPortFree+0xbc>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4413      	add	r3, r2
 800dd26:	4a09      	ldr	r2, [pc, #36]	; (800dd4c <vPortFree+0xbc>)
 800dd28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd2a:	6938      	ldr	r0, [r7, #16]
 800dd2c:	f000 f874 	bl	800de18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dd30:	4b07      	ldr	r3, [pc, #28]	; (800dd50 <vPortFree+0xc0>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	3301      	adds	r3, #1
 800dd36:	4a06      	ldr	r2, [pc, #24]	; (800dd50 <vPortFree+0xc0>)
 800dd38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dd3a:	f7fe fc8b 	bl	800c654 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dd3e:	bf00      	nop
 800dd40:	3718      	adds	r7, #24
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	20004dc8 	.word	0x20004dc8
 800dd4c:	20004db8 	.word	0x20004db8
 800dd50:	20004dc4 	.word	0x20004dc4

0800dd54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dd54:	b480      	push	{r7}
 800dd56:	b085      	sub	sp, #20
 800dd58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dd5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dd5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dd60:	4b27      	ldr	r3, [pc, #156]	; (800de00 <prvHeapInit+0xac>)
 800dd62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f003 0307 	and.w	r3, r3, #7
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00c      	beq.n	800dd88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	3307      	adds	r3, #7
 800dd72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f023 0307 	bic.w	r3, r3, #7
 800dd7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dd7c:	68ba      	ldr	r2, [r7, #8]
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	4a1f      	ldr	r2, [pc, #124]	; (800de00 <prvHeapInit+0xac>)
 800dd84:	4413      	add	r3, r2
 800dd86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dd8c:	4a1d      	ldr	r2, [pc, #116]	; (800de04 <prvHeapInit+0xb0>)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dd92:	4b1c      	ldr	r3, [pc, #112]	; (800de04 <prvHeapInit+0xb0>)
 800dd94:	2200      	movs	r2, #0
 800dd96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dda0:	2208      	movs	r2, #8
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	1a9b      	subs	r3, r3, r2
 800dda6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f023 0307 	bic.w	r3, r3, #7
 800ddae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	4a15      	ldr	r2, [pc, #84]	; (800de08 <prvHeapInit+0xb4>)
 800ddb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ddb6:	4b14      	ldr	r3, [pc, #80]	; (800de08 <prvHeapInit+0xb4>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ddbe:	4b12      	ldr	r3, [pc, #72]	; (800de08 <prvHeapInit+0xb4>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	1ad2      	subs	r2, r2, r3
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ddd4:	4b0c      	ldr	r3, [pc, #48]	; (800de08 <prvHeapInit+0xb4>)
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	4a0a      	ldr	r2, [pc, #40]	; (800de0c <prvHeapInit+0xb8>)
 800dde2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	4a09      	ldr	r2, [pc, #36]	; (800de10 <prvHeapInit+0xbc>)
 800ddea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ddec:	4b09      	ldr	r3, [pc, #36]	; (800de14 <prvHeapInit+0xc0>)
 800ddee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ddf2:	601a      	str	r2, [r3, #0]
}
 800ddf4:	bf00      	nop
 800ddf6:	3714      	adds	r7, #20
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr
 800de00:	200011ac 	.word	0x200011ac
 800de04:	20004dac 	.word	0x20004dac
 800de08:	20004db4 	.word	0x20004db4
 800de0c:	20004dbc 	.word	0x20004dbc
 800de10:	20004db8 	.word	0x20004db8
 800de14:	20004dc8 	.word	0x20004dc8

0800de18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800de18:	b480      	push	{r7}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800de20:	4b28      	ldr	r3, [pc, #160]	; (800dec4 <prvInsertBlockIntoFreeList+0xac>)
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	e002      	b.n	800de2c <prvInsertBlockIntoFreeList+0x14>
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	60fb      	str	r3, [r7, #12]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	429a      	cmp	r2, r3
 800de34:	d8f7      	bhi.n	800de26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	68ba      	ldr	r2, [r7, #8]
 800de40:	4413      	add	r3, r2
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	429a      	cmp	r2, r3
 800de46:	d108      	bne.n	800de5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	441a      	add	r2, r3
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	441a      	add	r2, r3
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d118      	bne.n	800dea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	4b15      	ldr	r3, [pc, #84]	; (800dec8 <prvInsertBlockIntoFreeList+0xb0>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	429a      	cmp	r2, r3
 800de78:	d00d      	beq.n	800de96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	685a      	ldr	r2, [r3, #4]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	441a      	add	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	601a      	str	r2, [r3, #0]
 800de94:	e008      	b.n	800dea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800de96:	4b0c      	ldr	r3, [pc, #48]	; (800dec8 <prvInsertBlockIntoFreeList+0xb0>)
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	601a      	str	r2, [r3, #0]
 800de9e:	e003      	b.n	800dea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	429a      	cmp	r2, r3
 800deae:	d002      	beq.n	800deb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800deb6:	bf00      	nop
 800deb8:	3714      	adds	r7, #20
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop
 800dec4:	20004dac 	.word	0x20004dac
 800dec8:	20004db4 	.word	0x20004db4

0800decc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ded0:	2201      	movs	r2, #1
 800ded2:	490e      	ldr	r1, [pc, #56]	; (800df0c <MX_USB_HOST_Init+0x40>)
 800ded4:	480e      	ldr	r0, [pc, #56]	; (800df10 <MX_USB_HOST_Init+0x44>)
 800ded6:	f7fb faf1 	bl	80094bc <USBH_Init>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d001      	beq.n	800dee4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dee0:	f7f3 fafe 	bl	80014e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800dee4:	490b      	ldr	r1, [pc, #44]	; (800df14 <MX_USB_HOST_Init+0x48>)
 800dee6:	480a      	ldr	r0, [pc, #40]	; (800df10 <MX_USB_HOST_Init+0x44>)
 800dee8:	f7fb fb98 	bl	800961c <USBH_RegisterClass>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d001      	beq.n	800def6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800def2:	f7f3 faf5 	bl	80014e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800def6:	4806      	ldr	r0, [pc, #24]	; (800df10 <MX_USB_HOST_Init+0x44>)
 800def8:	f7fb fc1c 	bl	8009734 <USBH_Start>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d001      	beq.n	800df06 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800df02:	f7f3 faed 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800df06:	bf00      	nop
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	0800df19 	.word	0x0800df19
 800df10:	20005020 	.word	0x20005020
 800df14:	2000000c 	.word	0x2000000c

0800df18 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	460b      	mov	r3, r1
 800df22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800df24:	78fb      	ldrb	r3, [r7, #3]
 800df26:	3b01      	subs	r3, #1
 800df28:	2b04      	cmp	r3, #4
 800df2a:	d819      	bhi.n	800df60 <USBH_UserProcess+0x48>
 800df2c:	a201      	add	r2, pc, #4	; (adr r2, 800df34 <USBH_UserProcess+0x1c>)
 800df2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df32:	bf00      	nop
 800df34:	0800df61 	.word	0x0800df61
 800df38:	0800df51 	.word	0x0800df51
 800df3c:	0800df61 	.word	0x0800df61
 800df40:	0800df59 	.word	0x0800df59
 800df44:	0800df49 	.word	0x0800df49
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800df48:	4b09      	ldr	r3, [pc, #36]	; (800df70 <USBH_UserProcess+0x58>)
 800df4a:	2203      	movs	r2, #3
 800df4c:	701a      	strb	r2, [r3, #0]
  break;
 800df4e:	e008      	b.n	800df62 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800df50:	4b07      	ldr	r3, [pc, #28]	; (800df70 <USBH_UserProcess+0x58>)
 800df52:	2202      	movs	r2, #2
 800df54:	701a      	strb	r2, [r3, #0]
  break;
 800df56:	e004      	b.n	800df62 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800df58:	4b05      	ldr	r3, [pc, #20]	; (800df70 <USBH_UserProcess+0x58>)
 800df5a:	2201      	movs	r2, #1
 800df5c:	701a      	strb	r2, [r3, #0]
  break;
 800df5e:	e000      	b.n	800df62 <USBH_UserProcess+0x4a>

  default:
  break;
 800df60:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800df62:	bf00      	nop
 800df64:	370c      	adds	r7, #12
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	20004dcc 	.word	0x20004dcc

0800df74 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b08a      	sub	sp, #40	; 0x28
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df7c:	f107 0314 	add.w	r3, r7, #20
 800df80:	2200      	movs	r2, #0
 800df82:	601a      	str	r2, [r3, #0]
 800df84:	605a      	str	r2, [r3, #4]
 800df86:	609a      	str	r2, [r3, #8]
 800df88:	60da      	str	r2, [r3, #12]
 800df8a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800df94:	d147      	bne.n	800e026 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df96:	2300      	movs	r3, #0
 800df98:	613b      	str	r3, [r7, #16]
 800df9a:	4b25      	ldr	r3, [pc, #148]	; (800e030 <HAL_HCD_MspInit+0xbc>)
 800df9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df9e:	4a24      	ldr	r2, [pc, #144]	; (800e030 <HAL_HCD_MspInit+0xbc>)
 800dfa0:	f043 0301 	orr.w	r3, r3, #1
 800dfa4:	6313      	str	r3, [r2, #48]	; 0x30
 800dfa6:	4b22      	ldr	r3, [pc, #136]	; (800e030 <HAL_HCD_MspInit+0xbc>)
 800dfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfaa:	f003 0301 	and.w	r3, r3, #1
 800dfae:	613b      	str	r3, [r7, #16]
 800dfb0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800dfb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800dfc0:	f107 0314 	add.w	r3, r7, #20
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	481b      	ldr	r0, [pc, #108]	; (800e034 <HAL_HCD_MspInit+0xc0>)
 800dfc8:	f7f4 fad6 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800dfcc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800dfd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfd2:	2302      	movs	r3, #2
 800dfd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dfde:	230a      	movs	r3, #10
 800dfe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfe2:	f107 0314 	add.w	r3, r7, #20
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	4812      	ldr	r0, [pc, #72]	; (800e034 <HAL_HCD_MspInit+0xc0>)
 800dfea:	f7f4 fac5 	bl	8002578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dfee:	4b10      	ldr	r3, [pc, #64]	; (800e030 <HAL_HCD_MspInit+0xbc>)
 800dff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dff2:	4a0f      	ldr	r2, [pc, #60]	; (800e030 <HAL_HCD_MspInit+0xbc>)
 800dff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dff8:	6353      	str	r3, [r2, #52]	; 0x34
 800dffa:	2300      	movs	r3, #0
 800dffc:	60fb      	str	r3, [r7, #12]
 800dffe:	4b0c      	ldr	r3, [pc, #48]	; (800e030 <HAL_HCD_MspInit+0xbc>)
 800e000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e002:	4a0b      	ldr	r2, [pc, #44]	; (800e030 <HAL_HCD_MspInit+0xbc>)
 800e004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e008:	6453      	str	r3, [r2, #68]	; 0x44
 800e00a:	4b09      	ldr	r3, [pc, #36]	; (800e030 <HAL_HCD_MspInit+0xbc>)
 800e00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e00e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e012:	60fb      	str	r3, [r7, #12]
 800e014:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e016:	2200      	movs	r2, #0
 800e018:	2105      	movs	r1, #5
 800e01a:	2043      	movs	r0, #67	; 0x43
 800e01c:	f7f4 f9f0 	bl	8002400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e020:	2043      	movs	r0, #67	; 0x43
 800e022:	f7f4 fa09 	bl	8002438 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e026:	bf00      	nop
 800e028:	3728      	adds	r7, #40	; 0x28
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	40023800 	.word	0x40023800
 800e034:	40020000 	.word	0x40020000

0800e038 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e046:	4618      	mov	r0, r3
 800e048:	f7fc f821 	bl	800a08e <USBH_LL_IncTimer>
}
 800e04c:	bf00      	nop
 800e04e:	3708      	adds	r7, #8
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e062:	4618      	mov	r0, r3
 800e064:	f7fc f865 	bl	800a132 <USBH_LL_Connect>
}
 800e068:	bf00      	nop
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fc f87a 	bl	800a178 <USBH_LL_Disconnect>
}
 800e084:	bf00      	nop
 800e086:	3708      	adds	r7, #8
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	460b      	mov	r3, r1
 800e096:	70fb      	strb	r3, [r7, #3]
 800e098:	4613      	mov	r3, r2
 800e09a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fc f8b1 	bl	800a20a <USBH_LL_NotifyURBChange>
#endif
}
 800e0a8:	bf00      	nop
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7fc f80f 	bl	800a0e2 <USBH_LL_PortEnabled>
}
 800e0c4:	bf00      	nop
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fc f81b 	bl	800a116 <USBH_LL_PortDisabled>
}
 800e0e0:	bf00      	nop
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d12a      	bne.n	800e150 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e0fa:	4a18      	ldr	r2, [pc, #96]	; (800e15c <USBH_LL_Init+0x74>)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	4a15      	ldr	r2, [pc, #84]	; (800e15c <USBH_LL_Init+0x74>)
 800e106:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e10a:	4b14      	ldr	r3, [pc, #80]	; (800e15c <USBH_LL_Init+0x74>)
 800e10c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e110:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e112:	4b12      	ldr	r3, [pc, #72]	; (800e15c <USBH_LL_Init+0x74>)
 800e114:	2208      	movs	r2, #8
 800e116:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e118:	4b10      	ldr	r3, [pc, #64]	; (800e15c <USBH_LL_Init+0x74>)
 800e11a:	2201      	movs	r2, #1
 800e11c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e11e:	4b0f      	ldr	r3, [pc, #60]	; (800e15c <USBH_LL_Init+0x74>)
 800e120:	2200      	movs	r2, #0
 800e122:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e124:	4b0d      	ldr	r3, [pc, #52]	; (800e15c <USBH_LL_Init+0x74>)
 800e126:	2202      	movs	r2, #2
 800e128:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e12a:	4b0c      	ldr	r3, [pc, #48]	; (800e15c <USBH_LL_Init+0x74>)
 800e12c:	2200      	movs	r2, #0
 800e12e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e130:	480a      	ldr	r0, [pc, #40]	; (800e15c <USBH_LL_Init+0x74>)
 800e132:	f7f4 fbd6 	bl	80028e2 <HAL_HCD_Init>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d001      	beq.n	800e140 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e13c:	f7f3 f9d0 	bl	80014e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e140:	4806      	ldr	r0, [pc, #24]	; (800e15c <USBH_LL_Init+0x74>)
 800e142:	f7f4 ffb3 	bl	80030ac <HAL_HCD_GetCurrentFrame>
 800e146:	4603      	mov	r3, r0
 800e148:	4619      	mov	r1, r3
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f7fb ff90 	bl	800a070 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3708      	adds	r7, #8
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	20005404 	.word	0x20005404

0800e160 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e168:	2300      	movs	r3, #0
 800e16a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e16c:	2300      	movs	r3, #0
 800e16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e176:	4618      	mov	r0, r3
 800e178:	f7f4 ff22 	bl	8002fc0 <HAL_HCD_Start>
 800e17c:	4603      	mov	r3, r0
 800e17e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e180:	7bfb      	ldrb	r3, [r7, #15]
 800e182:	4618      	mov	r0, r3
 800e184:	f000 f95c 	bl	800e440 <USBH_Get_USB_Status>
 800e188:	4603      	mov	r3, r0
 800e18a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e18c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b084      	sub	sp, #16
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7f4 ff2a 	bl	8003006 <HAL_HCD_Stop>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e1b6:	7bfb      	ldrb	r3, [r7, #15]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f000 f941 	bl	800e440 <USBH_Get_USB_Status>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3710      	adds	r7, #16
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7f4 ff72 	bl	80030c8 <HAL_HCD_GetCurrentSpeed>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	d00c      	beq.n	800e204 <USBH_LL_GetSpeed+0x38>
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	d80d      	bhi.n	800e20a <USBH_LL_GetSpeed+0x3e>
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d002      	beq.n	800e1f8 <USBH_LL_GetSpeed+0x2c>
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d003      	beq.n	800e1fe <USBH_LL_GetSpeed+0x32>
 800e1f6:	e008      	b.n	800e20a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e1fc:	e008      	b.n	800e210 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e1fe:	2301      	movs	r3, #1
 800e200:	73fb      	strb	r3, [r7, #15]
    break;
 800e202:	e005      	b.n	800e210 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e204:	2302      	movs	r3, #2
 800e206:	73fb      	strb	r3, [r7, #15]
    break;
 800e208:	e002      	b.n	800e210 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e20a:	2301      	movs	r3, #1
 800e20c:	73fb      	strb	r3, [r7, #15]
    break;
 800e20e:	bf00      	nop
  }
  return  speed;
 800e210:	7bfb      	ldrb	r3, [r7, #15]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e21a:	b580      	push	{r7, lr}
 800e21c:	b084      	sub	sp, #16
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e222:	2300      	movs	r3, #0
 800e224:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e226:	2300      	movs	r3, #0
 800e228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e230:	4618      	mov	r0, r3
 800e232:	f7f4 ff05 	bl	8003040 <HAL_HCD_ResetPort>
 800e236:	4603      	mov	r3, r0
 800e238:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e23a:	7bfb      	ldrb	r3, [r7, #15]
 800e23c:	4618      	mov	r0, r3
 800e23e:	f000 f8ff 	bl	800e440 <USBH_Get_USB_Status>
 800e242:	4603      	mov	r3, r0
 800e244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e246:	7bbb      	ldrb	r3, [r7, #14]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3710      	adds	r7, #16
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	460b      	mov	r3, r1
 800e25a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e262:	78fa      	ldrb	r2, [r7, #3]
 800e264:	4611      	mov	r1, r2
 800e266:	4618      	mov	r0, r3
 800e268:	f7f4 ff0c 	bl	8003084 <HAL_HCD_HC_GetXferCount>
 800e26c:	4603      	mov	r3, r0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e276:	b590      	push	{r4, r7, lr}
 800e278:	b089      	sub	sp, #36	; 0x24
 800e27a:	af04      	add	r7, sp, #16
 800e27c:	6078      	str	r0, [r7, #4]
 800e27e:	4608      	mov	r0, r1
 800e280:	4611      	mov	r1, r2
 800e282:	461a      	mov	r2, r3
 800e284:	4603      	mov	r3, r0
 800e286:	70fb      	strb	r3, [r7, #3]
 800e288:	460b      	mov	r3, r1
 800e28a:	70bb      	strb	r3, [r7, #2]
 800e28c:	4613      	mov	r3, r2
 800e28e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e290:	2300      	movs	r3, #0
 800e292:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e294:	2300      	movs	r3, #0
 800e296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e29e:	787c      	ldrb	r4, [r7, #1]
 800e2a0:	78ba      	ldrb	r2, [r7, #2]
 800e2a2:	78f9      	ldrb	r1, [r7, #3]
 800e2a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e2a6:	9302      	str	r3, [sp, #8]
 800e2a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e2ac:	9301      	str	r3, [sp, #4]
 800e2ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	4623      	mov	r3, r4
 800e2b6:	f7f4 fb76 	bl	80029a6 <HAL_HCD_HC_Init>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e2be:	7bfb      	ldrb	r3, [r7, #15]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f000 f8bd 	bl	800e440 <USBH_Get_USB_Status>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3714      	adds	r7, #20
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd90      	pop	{r4, r7, pc}

0800e2d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2ee:	78fa      	ldrb	r2, [r7, #3]
 800e2f0:	4611      	mov	r1, r2
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7f4 fbe6 	bl	8002ac4 <HAL_HCD_HC_Halt>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e2fc:	7bfb      	ldrb	r3, [r7, #15]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f000 f89e 	bl	800e440 <USBH_Get_USB_Status>
 800e304:	4603      	mov	r3, r0
 800e306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e308:	7bbb      	ldrb	r3, [r7, #14]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e312:	b590      	push	{r4, r7, lr}
 800e314:	b089      	sub	sp, #36	; 0x24
 800e316:	af04      	add	r7, sp, #16
 800e318:	6078      	str	r0, [r7, #4]
 800e31a:	4608      	mov	r0, r1
 800e31c:	4611      	mov	r1, r2
 800e31e:	461a      	mov	r2, r3
 800e320:	4603      	mov	r3, r0
 800e322:	70fb      	strb	r3, [r7, #3]
 800e324:	460b      	mov	r3, r1
 800e326:	70bb      	strb	r3, [r7, #2]
 800e328:	4613      	mov	r3, r2
 800e32a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e32c:	2300      	movs	r3, #0
 800e32e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e330:	2300      	movs	r3, #0
 800e332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e33a:	787c      	ldrb	r4, [r7, #1]
 800e33c:	78ba      	ldrb	r2, [r7, #2]
 800e33e:	78f9      	ldrb	r1, [r7, #3]
 800e340:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e344:	9303      	str	r3, [sp, #12]
 800e346:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e348:	9302      	str	r3, [sp, #8]
 800e34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34c:	9301      	str	r3, [sp, #4]
 800e34e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	4623      	mov	r3, r4
 800e356:	f7f4 fbd9 	bl	8002b0c <HAL_HCD_HC_SubmitRequest>
 800e35a:	4603      	mov	r3, r0
 800e35c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e35e:	7bfb      	ldrb	r3, [r7, #15]
 800e360:	4618      	mov	r0, r3
 800e362:	f000 f86d 	bl	800e440 <USBH_Get_USB_Status>
 800e366:	4603      	mov	r3, r0
 800e368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e36a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3714      	adds	r7, #20
 800e370:	46bd      	mov	sp, r7
 800e372:	bd90      	pop	{r4, r7, pc}

0800e374 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	460b      	mov	r3, r1
 800e37e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e386:	78fa      	ldrb	r2, [r7, #3]
 800e388:	4611      	mov	r1, r2
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7f4 fe66 	bl	800305c <HAL_HCD_HC_GetURBState>
 800e390:	4603      	mov	r3, r0
}
 800e392:	4618      	mov	r0, r3
 800e394:	3708      	adds	r7, #8
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b082      	sub	sp, #8
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	d103      	bne.n	800e3b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e3b0:	78fb      	ldrb	r3, [r7, #3]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f000 f870 	bl	800e498 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e3b8:	20c8      	movs	r0, #200	; 0xc8
 800e3ba:	f7f3 ff45 	bl	8002248 <HAL_Delay>
  return USBH_OK;
 800e3be:	2300      	movs	r3, #0
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	70fb      	strb	r3, [r7, #3]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e3de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e3e0:	78fb      	ldrb	r3, [r7, #3]
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	212c      	movs	r1, #44	; 0x2c
 800e3e6:	fb01 f303 	mul.w	r3, r1, r3
 800e3ea:	4413      	add	r3, r2
 800e3ec:	333b      	adds	r3, #59	; 0x3b
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d009      	beq.n	800e408 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e3f4:	78fb      	ldrb	r3, [r7, #3]
 800e3f6:	68fa      	ldr	r2, [r7, #12]
 800e3f8:	212c      	movs	r1, #44	; 0x2c
 800e3fa:	fb01 f303 	mul.w	r3, r1, r3
 800e3fe:	4413      	add	r3, r2
 800e400:	3354      	adds	r3, #84	; 0x54
 800e402:	78ba      	ldrb	r2, [r7, #2]
 800e404:	701a      	strb	r2, [r3, #0]
 800e406:	e008      	b.n	800e41a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e408:	78fb      	ldrb	r3, [r7, #3]
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	212c      	movs	r1, #44	; 0x2c
 800e40e:	fb01 f303 	mul.w	r3, r1, r3
 800e412:	4413      	add	r3, r2
 800e414:	3355      	adds	r3, #85	; 0x55
 800e416:	78ba      	ldrb	r2, [r7, #2]
 800e418:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e41a:	2300      	movs	r3, #0
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3714      	adds	r7, #20
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f7f3 ff09 	bl	8002248 <HAL_Delay>
}
 800e436:	bf00      	nop
 800e438:	3708      	adds	r7, #8
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
	...

0800e440 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e440:	b480      	push	{r7}
 800e442:	b085      	sub	sp, #20
 800e444:	af00      	add	r7, sp, #0
 800e446:	4603      	mov	r3, r0
 800e448:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e44a:	2300      	movs	r3, #0
 800e44c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e44e:	79fb      	ldrb	r3, [r7, #7]
 800e450:	2b03      	cmp	r3, #3
 800e452:	d817      	bhi.n	800e484 <USBH_Get_USB_Status+0x44>
 800e454:	a201      	add	r2, pc, #4	; (adr r2, 800e45c <USBH_Get_USB_Status+0x1c>)
 800e456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e45a:	bf00      	nop
 800e45c:	0800e46d 	.word	0x0800e46d
 800e460:	0800e473 	.word	0x0800e473
 800e464:	0800e479 	.word	0x0800e479
 800e468:	0800e47f 	.word	0x0800e47f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e46c:	2300      	movs	r3, #0
 800e46e:	73fb      	strb	r3, [r7, #15]
    break;
 800e470:	e00b      	b.n	800e48a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e472:	2302      	movs	r3, #2
 800e474:	73fb      	strb	r3, [r7, #15]
    break;
 800e476:	e008      	b.n	800e48a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e478:	2301      	movs	r3, #1
 800e47a:	73fb      	strb	r3, [r7, #15]
    break;
 800e47c:	e005      	b.n	800e48a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e47e:	2302      	movs	r3, #2
 800e480:	73fb      	strb	r3, [r7, #15]
    break;
 800e482:	e002      	b.n	800e48a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e484:	2302      	movs	r3, #2
 800e486:	73fb      	strb	r3, [r7, #15]
    break;
 800e488:	bf00      	nop
  }
  return usb_status;
 800e48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3714      	adds	r7, #20
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	4603      	mov	r3, r0
 800e4a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e4a2:	79fb      	ldrb	r3, [r7, #7]
 800e4a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e4a6:	79fb      	ldrb	r3, [r7, #7]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d102      	bne.n	800e4b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	73fb      	strb	r3, [r7, #15]
 800e4b0:	e001      	b.n	800e4b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e4b6:	7bfb      	ldrb	r3, [r7, #15]
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	2101      	movs	r1, #1
 800e4bc:	4803      	ldr	r0, [pc, #12]	; (800e4cc <MX_DriverVbusFS+0x34>)
 800e4be:	f7f4 f9f7 	bl	80028b0 <HAL_GPIO_WritePin>
}
 800e4c2:	bf00      	nop
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	40020800 	.word	0x40020800

0800e4d0 <__errno>:
 800e4d0:	4b01      	ldr	r3, [pc, #4]	; (800e4d8 <__errno+0x8>)
 800e4d2:	6818      	ldr	r0, [r3, #0]
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	20000030 	.word	0x20000030

0800e4dc <__libc_init_array>:
 800e4dc:	b570      	push	{r4, r5, r6, lr}
 800e4de:	4d0d      	ldr	r5, [pc, #52]	; (800e514 <__libc_init_array+0x38>)
 800e4e0:	4c0d      	ldr	r4, [pc, #52]	; (800e518 <__libc_init_array+0x3c>)
 800e4e2:	1b64      	subs	r4, r4, r5
 800e4e4:	10a4      	asrs	r4, r4, #2
 800e4e6:	2600      	movs	r6, #0
 800e4e8:	42a6      	cmp	r6, r4
 800e4ea:	d109      	bne.n	800e500 <__libc_init_array+0x24>
 800e4ec:	4d0b      	ldr	r5, [pc, #44]	; (800e51c <__libc_init_array+0x40>)
 800e4ee:	4c0c      	ldr	r4, [pc, #48]	; (800e520 <__libc_init_array+0x44>)
 800e4f0:	f000 f986 	bl	800e800 <_init>
 800e4f4:	1b64      	subs	r4, r4, r5
 800e4f6:	10a4      	asrs	r4, r4, #2
 800e4f8:	2600      	movs	r6, #0
 800e4fa:	42a6      	cmp	r6, r4
 800e4fc:	d105      	bne.n	800e50a <__libc_init_array+0x2e>
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
 800e500:	f855 3b04 	ldr.w	r3, [r5], #4
 800e504:	4798      	blx	r3
 800e506:	3601      	adds	r6, #1
 800e508:	e7ee      	b.n	800e4e8 <__libc_init_array+0xc>
 800e50a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e50e:	4798      	blx	r3
 800e510:	3601      	adds	r6, #1
 800e512:	e7f2      	b.n	800e4fa <__libc_init_array+0x1e>
 800e514:	080100b0 	.word	0x080100b0
 800e518:	080100b0 	.word	0x080100b0
 800e51c:	080100b0 	.word	0x080100b0
 800e520:	080100b4 	.word	0x080100b4

0800e524 <malloc>:
 800e524:	4b02      	ldr	r3, [pc, #8]	; (800e530 <malloc+0xc>)
 800e526:	4601      	mov	r1, r0
 800e528:	6818      	ldr	r0, [r3, #0]
 800e52a:	f000 b871 	b.w	800e610 <_malloc_r>
 800e52e:	bf00      	nop
 800e530:	20000030 	.word	0x20000030

0800e534 <free>:
 800e534:	4b02      	ldr	r3, [pc, #8]	; (800e540 <free+0xc>)
 800e536:	4601      	mov	r1, r0
 800e538:	6818      	ldr	r0, [r3, #0]
 800e53a:	f000 b819 	b.w	800e570 <_free_r>
 800e53e:	bf00      	nop
 800e540:	20000030 	.word	0x20000030

0800e544 <memcpy>:
 800e544:	440a      	add	r2, r1
 800e546:	4291      	cmp	r1, r2
 800e548:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e54c:	d100      	bne.n	800e550 <memcpy+0xc>
 800e54e:	4770      	bx	lr
 800e550:	b510      	push	{r4, lr}
 800e552:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e55a:	4291      	cmp	r1, r2
 800e55c:	d1f9      	bne.n	800e552 <memcpy+0xe>
 800e55e:	bd10      	pop	{r4, pc}

0800e560 <memset>:
 800e560:	4402      	add	r2, r0
 800e562:	4603      	mov	r3, r0
 800e564:	4293      	cmp	r3, r2
 800e566:	d100      	bne.n	800e56a <memset+0xa>
 800e568:	4770      	bx	lr
 800e56a:	f803 1b01 	strb.w	r1, [r3], #1
 800e56e:	e7f9      	b.n	800e564 <memset+0x4>

0800e570 <_free_r>:
 800e570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e572:	2900      	cmp	r1, #0
 800e574:	d048      	beq.n	800e608 <_free_r+0x98>
 800e576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e57a:	9001      	str	r0, [sp, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f1a1 0404 	sub.w	r4, r1, #4
 800e582:	bfb8      	it	lt
 800e584:	18e4      	addlt	r4, r4, r3
 800e586:	f000 f8ad 	bl	800e6e4 <__malloc_lock>
 800e58a:	4a20      	ldr	r2, [pc, #128]	; (800e60c <_free_r+0x9c>)
 800e58c:	9801      	ldr	r0, [sp, #4]
 800e58e:	6813      	ldr	r3, [r2, #0]
 800e590:	4615      	mov	r5, r2
 800e592:	b933      	cbnz	r3, 800e5a2 <_free_r+0x32>
 800e594:	6063      	str	r3, [r4, #4]
 800e596:	6014      	str	r4, [r2, #0]
 800e598:	b003      	add	sp, #12
 800e59a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e59e:	f000 b8a7 	b.w	800e6f0 <__malloc_unlock>
 800e5a2:	42a3      	cmp	r3, r4
 800e5a4:	d90b      	bls.n	800e5be <_free_r+0x4e>
 800e5a6:	6821      	ldr	r1, [r4, #0]
 800e5a8:	1862      	adds	r2, r4, r1
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	bf04      	itt	eq
 800e5ae:	681a      	ldreq	r2, [r3, #0]
 800e5b0:	685b      	ldreq	r3, [r3, #4]
 800e5b2:	6063      	str	r3, [r4, #4]
 800e5b4:	bf04      	itt	eq
 800e5b6:	1852      	addeq	r2, r2, r1
 800e5b8:	6022      	streq	r2, [r4, #0]
 800e5ba:	602c      	str	r4, [r5, #0]
 800e5bc:	e7ec      	b.n	800e598 <_free_r+0x28>
 800e5be:	461a      	mov	r2, r3
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	b10b      	cbz	r3, 800e5c8 <_free_r+0x58>
 800e5c4:	42a3      	cmp	r3, r4
 800e5c6:	d9fa      	bls.n	800e5be <_free_r+0x4e>
 800e5c8:	6811      	ldr	r1, [r2, #0]
 800e5ca:	1855      	adds	r5, r2, r1
 800e5cc:	42a5      	cmp	r5, r4
 800e5ce:	d10b      	bne.n	800e5e8 <_free_r+0x78>
 800e5d0:	6824      	ldr	r4, [r4, #0]
 800e5d2:	4421      	add	r1, r4
 800e5d4:	1854      	adds	r4, r2, r1
 800e5d6:	42a3      	cmp	r3, r4
 800e5d8:	6011      	str	r1, [r2, #0]
 800e5da:	d1dd      	bne.n	800e598 <_free_r+0x28>
 800e5dc:	681c      	ldr	r4, [r3, #0]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	6053      	str	r3, [r2, #4]
 800e5e2:	4421      	add	r1, r4
 800e5e4:	6011      	str	r1, [r2, #0]
 800e5e6:	e7d7      	b.n	800e598 <_free_r+0x28>
 800e5e8:	d902      	bls.n	800e5f0 <_free_r+0x80>
 800e5ea:	230c      	movs	r3, #12
 800e5ec:	6003      	str	r3, [r0, #0]
 800e5ee:	e7d3      	b.n	800e598 <_free_r+0x28>
 800e5f0:	6825      	ldr	r5, [r4, #0]
 800e5f2:	1961      	adds	r1, r4, r5
 800e5f4:	428b      	cmp	r3, r1
 800e5f6:	bf04      	itt	eq
 800e5f8:	6819      	ldreq	r1, [r3, #0]
 800e5fa:	685b      	ldreq	r3, [r3, #4]
 800e5fc:	6063      	str	r3, [r4, #4]
 800e5fe:	bf04      	itt	eq
 800e600:	1949      	addeq	r1, r1, r5
 800e602:	6021      	streq	r1, [r4, #0]
 800e604:	6054      	str	r4, [r2, #4]
 800e606:	e7c7      	b.n	800e598 <_free_r+0x28>
 800e608:	b003      	add	sp, #12
 800e60a:	bd30      	pop	{r4, r5, pc}
 800e60c:	20004dd0 	.word	0x20004dd0

0800e610 <_malloc_r>:
 800e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e612:	1ccd      	adds	r5, r1, #3
 800e614:	f025 0503 	bic.w	r5, r5, #3
 800e618:	3508      	adds	r5, #8
 800e61a:	2d0c      	cmp	r5, #12
 800e61c:	bf38      	it	cc
 800e61e:	250c      	movcc	r5, #12
 800e620:	2d00      	cmp	r5, #0
 800e622:	4606      	mov	r6, r0
 800e624:	db01      	blt.n	800e62a <_malloc_r+0x1a>
 800e626:	42a9      	cmp	r1, r5
 800e628:	d903      	bls.n	800e632 <_malloc_r+0x22>
 800e62a:	230c      	movs	r3, #12
 800e62c:	6033      	str	r3, [r6, #0]
 800e62e:	2000      	movs	r0, #0
 800e630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e632:	f000 f857 	bl	800e6e4 <__malloc_lock>
 800e636:	4921      	ldr	r1, [pc, #132]	; (800e6bc <_malloc_r+0xac>)
 800e638:	680a      	ldr	r2, [r1, #0]
 800e63a:	4614      	mov	r4, r2
 800e63c:	b99c      	cbnz	r4, 800e666 <_malloc_r+0x56>
 800e63e:	4f20      	ldr	r7, [pc, #128]	; (800e6c0 <_malloc_r+0xb0>)
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	b923      	cbnz	r3, 800e64e <_malloc_r+0x3e>
 800e644:	4621      	mov	r1, r4
 800e646:	4630      	mov	r0, r6
 800e648:	f000 f83c 	bl	800e6c4 <_sbrk_r>
 800e64c:	6038      	str	r0, [r7, #0]
 800e64e:	4629      	mov	r1, r5
 800e650:	4630      	mov	r0, r6
 800e652:	f000 f837 	bl	800e6c4 <_sbrk_r>
 800e656:	1c43      	adds	r3, r0, #1
 800e658:	d123      	bne.n	800e6a2 <_malloc_r+0x92>
 800e65a:	230c      	movs	r3, #12
 800e65c:	6033      	str	r3, [r6, #0]
 800e65e:	4630      	mov	r0, r6
 800e660:	f000 f846 	bl	800e6f0 <__malloc_unlock>
 800e664:	e7e3      	b.n	800e62e <_malloc_r+0x1e>
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	1b5b      	subs	r3, r3, r5
 800e66a:	d417      	bmi.n	800e69c <_malloc_r+0x8c>
 800e66c:	2b0b      	cmp	r3, #11
 800e66e:	d903      	bls.n	800e678 <_malloc_r+0x68>
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	441c      	add	r4, r3
 800e674:	6025      	str	r5, [r4, #0]
 800e676:	e004      	b.n	800e682 <_malloc_r+0x72>
 800e678:	6863      	ldr	r3, [r4, #4]
 800e67a:	42a2      	cmp	r2, r4
 800e67c:	bf0c      	ite	eq
 800e67e:	600b      	streq	r3, [r1, #0]
 800e680:	6053      	strne	r3, [r2, #4]
 800e682:	4630      	mov	r0, r6
 800e684:	f000 f834 	bl	800e6f0 <__malloc_unlock>
 800e688:	f104 000b 	add.w	r0, r4, #11
 800e68c:	1d23      	adds	r3, r4, #4
 800e68e:	f020 0007 	bic.w	r0, r0, #7
 800e692:	1ac2      	subs	r2, r0, r3
 800e694:	d0cc      	beq.n	800e630 <_malloc_r+0x20>
 800e696:	1a1b      	subs	r3, r3, r0
 800e698:	50a3      	str	r3, [r4, r2]
 800e69a:	e7c9      	b.n	800e630 <_malloc_r+0x20>
 800e69c:	4622      	mov	r2, r4
 800e69e:	6864      	ldr	r4, [r4, #4]
 800e6a0:	e7cc      	b.n	800e63c <_malloc_r+0x2c>
 800e6a2:	1cc4      	adds	r4, r0, #3
 800e6a4:	f024 0403 	bic.w	r4, r4, #3
 800e6a8:	42a0      	cmp	r0, r4
 800e6aa:	d0e3      	beq.n	800e674 <_malloc_r+0x64>
 800e6ac:	1a21      	subs	r1, r4, r0
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f000 f808 	bl	800e6c4 <_sbrk_r>
 800e6b4:	3001      	adds	r0, #1
 800e6b6:	d1dd      	bne.n	800e674 <_malloc_r+0x64>
 800e6b8:	e7cf      	b.n	800e65a <_malloc_r+0x4a>
 800e6ba:	bf00      	nop
 800e6bc:	20004dd0 	.word	0x20004dd0
 800e6c0:	20004dd4 	.word	0x20004dd4

0800e6c4 <_sbrk_r>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	4d06      	ldr	r5, [pc, #24]	; (800e6e0 <_sbrk_r+0x1c>)
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	4608      	mov	r0, r1
 800e6ce:	602b      	str	r3, [r5, #0]
 800e6d0:	f7f3 fd06 	bl	80020e0 <_sbrk>
 800e6d4:	1c43      	adds	r3, r0, #1
 800e6d6:	d102      	bne.n	800e6de <_sbrk_r+0x1a>
 800e6d8:	682b      	ldr	r3, [r5, #0]
 800e6da:	b103      	cbz	r3, 800e6de <_sbrk_r+0x1a>
 800e6dc:	6023      	str	r3, [r4, #0]
 800e6de:	bd38      	pop	{r3, r4, r5, pc}
 800e6e0:	20005708 	.word	0x20005708

0800e6e4 <__malloc_lock>:
 800e6e4:	4801      	ldr	r0, [pc, #4]	; (800e6ec <__malloc_lock+0x8>)
 800e6e6:	f000 b809 	b.w	800e6fc <__retarget_lock_acquire_recursive>
 800e6ea:	bf00      	nop
 800e6ec:	20005710 	.word	0x20005710

0800e6f0 <__malloc_unlock>:
 800e6f0:	4801      	ldr	r0, [pc, #4]	; (800e6f8 <__malloc_unlock+0x8>)
 800e6f2:	f000 b804 	b.w	800e6fe <__retarget_lock_release_recursive>
 800e6f6:	bf00      	nop
 800e6f8:	20005710 	.word	0x20005710

0800e6fc <__retarget_lock_acquire_recursive>:
 800e6fc:	4770      	bx	lr

0800e6fe <__retarget_lock_release_recursive>:
 800e6fe:	4770      	bx	lr

0800e700 <floor>:
 800e700:	ec51 0b10 	vmov	r0, r1, d0
 800e704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e708:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e70c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e710:	2e13      	cmp	r6, #19
 800e712:	ee10 5a10 	vmov	r5, s0
 800e716:	ee10 8a10 	vmov	r8, s0
 800e71a:	460c      	mov	r4, r1
 800e71c:	dc32      	bgt.n	800e784 <floor+0x84>
 800e71e:	2e00      	cmp	r6, #0
 800e720:	da14      	bge.n	800e74c <floor+0x4c>
 800e722:	a333      	add	r3, pc, #204	; (adr r3, 800e7f0 <floor+0xf0>)
 800e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e728:	f7f1 fd58 	bl	80001dc <__adddf3>
 800e72c:	2200      	movs	r2, #0
 800e72e:	2300      	movs	r3, #0
 800e730:	f7f2 f99a 	bl	8000a68 <__aeabi_dcmpgt>
 800e734:	b138      	cbz	r0, 800e746 <floor+0x46>
 800e736:	2c00      	cmp	r4, #0
 800e738:	da57      	bge.n	800e7ea <floor+0xea>
 800e73a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e73e:	431d      	orrs	r5, r3
 800e740:	d001      	beq.n	800e746 <floor+0x46>
 800e742:	4c2d      	ldr	r4, [pc, #180]	; (800e7f8 <floor+0xf8>)
 800e744:	2500      	movs	r5, #0
 800e746:	4621      	mov	r1, r4
 800e748:	4628      	mov	r0, r5
 800e74a:	e025      	b.n	800e798 <floor+0x98>
 800e74c:	4f2b      	ldr	r7, [pc, #172]	; (800e7fc <floor+0xfc>)
 800e74e:	4137      	asrs	r7, r6
 800e750:	ea01 0307 	and.w	r3, r1, r7
 800e754:	4303      	orrs	r3, r0
 800e756:	d01f      	beq.n	800e798 <floor+0x98>
 800e758:	a325      	add	r3, pc, #148	; (adr r3, 800e7f0 <floor+0xf0>)
 800e75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75e:	f7f1 fd3d 	bl	80001dc <__adddf3>
 800e762:	2200      	movs	r2, #0
 800e764:	2300      	movs	r3, #0
 800e766:	f7f2 f97f 	bl	8000a68 <__aeabi_dcmpgt>
 800e76a:	2800      	cmp	r0, #0
 800e76c:	d0eb      	beq.n	800e746 <floor+0x46>
 800e76e:	2c00      	cmp	r4, #0
 800e770:	bfbe      	ittt	lt
 800e772:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e776:	fa43 f606 	asrlt.w	r6, r3, r6
 800e77a:	19a4      	addlt	r4, r4, r6
 800e77c:	ea24 0407 	bic.w	r4, r4, r7
 800e780:	2500      	movs	r5, #0
 800e782:	e7e0      	b.n	800e746 <floor+0x46>
 800e784:	2e33      	cmp	r6, #51	; 0x33
 800e786:	dd0b      	ble.n	800e7a0 <floor+0xa0>
 800e788:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e78c:	d104      	bne.n	800e798 <floor+0x98>
 800e78e:	ee10 2a10 	vmov	r2, s0
 800e792:	460b      	mov	r3, r1
 800e794:	f7f1 fd22 	bl	80001dc <__adddf3>
 800e798:	ec41 0b10 	vmov	d0, r0, r1
 800e79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e7a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7a8:	fa23 f707 	lsr.w	r7, r3, r7
 800e7ac:	4207      	tst	r7, r0
 800e7ae:	d0f3      	beq.n	800e798 <floor+0x98>
 800e7b0:	a30f      	add	r3, pc, #60	; (adr r3, 800e7f0 <floor+0xf0>)
 800e7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b6:	f7f1 fd11 	bl	80001dc <__adddf3>
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	2300      	movs	r3, #0
 800e7be:	f7f2 f953 	bl	8000a68 <__aeabi_dcmpgt>
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	d0bf      	beq.n	800e746 <floor+0x46>
 800e7c6:	2c00      	cmp	r4, #0
 800e7c8:	da02      	bge.n	800e7d0 <floor+0xd0>
 800e7ca:	2e14      	cmp	r6, #20
 800e7cc:	d103      	bne.n	800e7d6 <floor+0xd6>
 800e7ce:	3401      	adds	r4, #1
 800e7d0:	ea25 0507 	bic.w	r5, r5, r7
 800e7d4:	e7b7      	b.n	800e746 <floor+0x46>
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e7dc:	fa03 f606 	lsl.w	r6, r3, r6
 800e7e0:	4435      	add	r5, r6
 800e7e2:	4545      	cmp	r5, r8
 800e7e4:	bf38      	it	cc
 800e7e6:	18e4      	addcc	r4, r4, r3
 800e7e8:	e7f2      	b.n	800e7d0 <floor+0xd0>
 800e7ea:	2500      	movs	r5, #0
 800e7ec:	462c      	mov	r4, r5
 800e7ee:	e7aa      	b.n	800e746 <floor+0x46>
 800e7f0:	8800759c 	.word	0x8800759c
 800e7f4:	7e37e43c 	.word	0x7e37e43c
 800e7f8:	bff00000 	.word	0xbff00000
 800e7fc:	000fffff 	.word	0x000fffff

0800e800 <_init>:
 800e800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e802:	bf00      	nop
 800e804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e806:	bc08      	pop	{r3}
 800e808:	469e      	mov	lr, r3
 800e80a:	4770      	bx	lr

0800e80c <_fini>:
 800e80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e80e:	bf00      	nop
 800e810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e812:	bc08      	pop	{r3}
 800e814:	469e      	mov	lr, r3
 800e816:	4770      	bx	lr
