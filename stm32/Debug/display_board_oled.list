
display_board_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001890  0800d018  0800d018  0001d018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8a8  0800e8a8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8a8  0800e8a8  0001e8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8b0  0800e8b0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8b0  0800e8b0  0001e8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8b4  0800e8b4  0001e8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800e8b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005628  20000094  0800e94c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200056bc  0800e94c  000256bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031040  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006028  00000000  00000000  00051104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002250  00000000  00000000  00057130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002050  00000000  00000000  00059380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007a40  00000000  00000000  0005b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000291aa  00000000  00000000  00062e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0b37  00000000  00000000  0008bfba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016caf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093f0  00000000  00000000  0016cb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d000 	.word	0x0800d000

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800d000 	.word	0x0800d000

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <faces>:
	  SSD1306_UpdateScreen();
	}
	vTaskDelete(NULL);
}

void faces(void *parameters){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
	int times = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  while(1){
	    SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 80004d4:	2301      	movs	r3, #1
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	2340      	movs	r3, #64	; 0x40
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	4a35      	ldr	r2, [pc, #212]	; (80005b4 <faces+0xec>)
 80004e0:	2100      	movs	r1, #0
 80004e2:	2000      	movs	r0, #0
 80004e4:	f000 fb05 	bl	8000af2 <SSD1306_DrawBitmap>
	    SSD1306_UpdateScreen();
 80004e8:	f000 fc30 	bl	8000d4c <SSD1306_UpdateScreen>
	    HAL_Delay(times+750);
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 f81c 	bl	8001530 <HAL_Delay>
	    SSD1306_Clear();
 80004f8:	f000 fcce 	bl	8000e98 <SSD1306_Clear>


	    SSD1306_DrawBitmap(0, 0, face2, 128, 64, 1);
 80004fc:	2301      	movs	r3, #1
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	2340      	movs	r3, #64	; 0x40
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	4a2c      	ldr	r2, [pc, #176]	; (80005b8 <faces+0xf0>)
 8000508:	2100      	movs	r1, #0
 800050a:	2000      	movs	r0, #0
 800050c:	f000 faf1 	bl	8000af2 <SSD1306_DrawBitmap>
	    SSD1306_UpdateScreen();
 8000510:	f000 fc1c 	bl	8000d4c <SSD1306_UpdateScreen>
	    HAL_Delay(times);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4618      	mov	r0, r3
 8000518:	f001 f80a 	bl	8001530 <HAL_Delay>
	    SSD1306_Clear();
 800051c:	f000 fcbc 	bl	8000e98 <SSD1306_Clear>

	    SSD1306_DrawBitmap(0, 0, face3, 128, 64, 1);
 8000520:	2301      	movs	r3, #1
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	2340      	movs	r3, #64	; 0x40
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	4a24      	ldr	r2, [pc, #144]	; (80005bc <faces+0xf4>)
 800052c:	2100      	movs	r1, #0
 800052e:	2000      	movs	r0, #0
 8000530:	f000 fadf 	bl	8000af2 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000534:	f000 fc0a 	bl	8000d4c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fff8 	bl	8001530 <HAL_Delay>
		SSD1306_Clear();
 8000540:	f000 fcaa 	bl	8000e98 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face4, 128, 64, 1);
 8000544:	2301      	movs	r3, #1
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	4a1c      	ldr	r2, [pc, #112]	; (80005c0 <faces+0xf8>)
 8000550:	2100      	movs	r1, #0
 8000552:	2000      	movs	r0, #0
 8000554:	f000 facd 	bl	8000af2 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000558:	f000 fbf8 	bl	8000d4c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 ffe6 	bl	8001530 <HAL_Delay>
		SSD1306_Clear();
 8000564:	f000 fc98 	bl	8000e98 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face5, 128, 64, 1);
 8000568:	2301      	movs	r3, #1
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2340      	movs	r3, #64	; 0x40
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <faces+0xfc>)
 8000574:	2100      	movs	r1, #0
 8000576:	2000      	movs	r0, #0
 8000578:	f000 fabb 	bl	8000af2 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 800057c:	f000 fbe6 	bl	8000d4c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4618      	mov	r0, r3
 8000584:	f000 ffd4 	bl	8001530 <HAL_Delay>
		SSD1306_Clear();
 8000588:	f000 fc86 	bl	8000e98 <SSD1306_Clear>

		SSD1306_DrawBitmap(0, 0, face6, 128, 64, 1);
 800058c:	2301      	movs	r3, #1
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2340      	movs	r3, #64	; 0x40
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <faces+0x100>)
 8000598:	2100      	movs	r1, #0
 800059a:	2000      	movs	r0, #0
 800059c:	f000 faa9 	bl	8000af2 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 80005a0:	f000 fbd4 	bl	8000d4c <SSD1306_UpdateScreen>
		HAL_Delay(times);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 ffc2 	bl	8001530 <HAL_Delay>
		SSD1306_Clear();
 80005ac:	f000 fc74 	bl	8000e98 <SSD1306_Clear>
	    SSD1306_DrawBitmap(0, 0, face1, 128, 64, 1);
 80005b0:	e790      	b.n	80004d4 <faces+0xc>
 80005b2:	bf00      	nop
 80005b4:	0800d06c 	.word	0x0800d06c
 80005b8:	0800d46c 	.word	0x0800d46c
 80005bc:	0800d86c 	.word	0x0800d86c
 80005c0:	0800dc6c 	.word	0x0800dc6c
 80005c4:	0800e06c 	.word	0x0800e06c
 80005c8:	0800e46c 	.word	0x0800e46c

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 ff6b 	bl	80014ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f82d 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f96b 	bl	80008b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005de:	f000 f8ab 	bl	8000738 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005e2:	f000 f8d7 	bl	8000794 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005e6:	f000 f905 	bl	80007f4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005ea:	f000 f939 	bl	8000860 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80005ee:	f000 fae9 	bl	8000bc4 <SSD1306_Init>
//  void (*func_ptr[6])(void) = {normal,annoy,angry_annoy,sad,happy,angry};

//
  xTaskHandle HT1,HT2;
  xTaskCreate(faces, "face_show", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT1);
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2300      	movs	r3, #0
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	4908      	ldr	r1, [pc, #32]	; (8000620 <main+0x54>)
 8000600:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0x58>)
 8000602:	f00a faba 	bl	800ab7a <xTaskCreate>
//  xTaskCreate(debugsy, "debugging", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, &HT2);
//  vTaskStartScheduler();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000606:	f009 f9a5 	bl	8009954 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <main+0x5c>)
 800060c:	2100      	movs	r1, #0
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <main+0x60>)
 8000610:	f009 f9ea 	bl	80099e8 <osThreadNew>
 8000614:	4603      	mov	r3, r0
 8000616:	4a06      	ldr	r2, [pc, #24]	; (8000630 <main+0x64>)
 8000618:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061a:	f009 f9bf 	bl	800999c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x52>
 8000620:	0800d038 	.word	0x0800d038
 8000624:	080004c9 	.word	0x080004c9
 8000628:	0800e86c 	.word	0x0800e86c
 800062c:	08000ab1 	.word	0x08000ab1
 8000630:	20004dd8 	.word	0x20004dd8

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b098      	sub	sp, #96	; 0x60
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f00c fc0c 	bl	800ce60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <SystemClock_Config+0xfc>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	4a30      	ldr	r2, [pc, #192]	; (8000730 <SystemClock_Config+0xfc>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	6413      	str	r3, [r2, #64]	; 0x40
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <SystemClock_Config+0xfc>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <SystemClock_Config+0x100>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a2a      	ldr	r2, [pc, #168]	; (8000734 <SystemClock_Config+0x100>)
 800068c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <SystemClock_Config+0x100>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069e:	2301      	movs	r3, #1
 80006a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b2:	2308      	movs	r3, #8
 80006b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 f9fd 	bl	8004ac8 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006d4:	f000 fa08 	bl	8000ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 fc5e 	bl	8004fb8 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000702:	f000 f9f1 	bl	8000ae8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000706:	2301      	movs	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800070a:	23c0      	movs	r3, #192	; 0xc0
 800070c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fe7c 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000722:	f000 f9e1 	bl	8000ae8 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3760      	adds	r7, #96	; 0x60
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2C1_Init+0x50>)
 800073e:	4a13      	ldr	r2, [pc, #76]	; (800078c <MX_I2C1_Init+0x54>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_I2C1_Init+0x50>)
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_I2C1_Init+0x58>)
 8000746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_I2C1_Init+0x50>)
 8000756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_I2C1_Init+0x50>)
 8000776:	f002 ff8d 	bl	8003694 <HAL_I2C_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000780:	f000 f9b2 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20004ddc 	.word	0x20004ddc
 800078c:	40005400 	.word	0x40005400
 8000790:	00061a80 	.word	0x00061a80

08000794 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_I2S3_Init+0x54>)
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <MX_I2S3_Init+0x58>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <MX_I2S3_Init+0x5c>)
 80007be:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_I2S3_Init+0x54>)
 80007d4:	f003 fcd8 	bl	8004188 <HAL_I2S_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007de:	f000 f983 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20004ecc 	.word	0x20004ecc
 80007ec:	40003c00 	.word	0x40003c00
 80007f0:	00017700 	.word	0x00017700

080007f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_SPI1_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_SPI1_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI1_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_SPI1_Init+0x64>)
 8000846:	f004 ff25 	bl	8005694 <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f94a 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20004e30 	.word	0x20004e30
 800085c:	40013000 	.word	0x40013000

08000860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_USART2_UART_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART2_UART_Init+0x4c>)
 8000898:	f005 fa32 	bl	8005d00 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008a2:	f000 f921 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20004e88 	.word	0x20004e88
 80008b0:	40004400 	.word	0x40004400

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	4b71      	ldr	r3, [pc, #452]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a70      	ldr	r2, [pc, #448]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 80008d4:	f043 0310 	orr.w	r3, r3, #16
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b6e      	ldr	r3, [pc, #440]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0310 	and.w	r3, r3, #16
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	4b6a      	ldr	r3, [pc, #424]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a69      	ldr	r2, [pc, #420]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b67      	ldr	r3, [pc, #412]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b63      	ldr	r3, [pc, #396]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a62      	ldr	r2, [pc, #392]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b60      	ldr	r3, [pc, #384]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b5c      	ldr	r3, [pc, #368]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a5b      	ldr	r2, [pc, #364]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b59      	ldr	r3, [pc, #356]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b55      	ldr	r3, [pc, #340]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a54      	ldr	r2, [pc, #336]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b52      	ldr	r3, [pc, #328]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b4e      	ldr	r3, [pc, #312]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a4d      	ldr	r2, [pc, #308]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b4b      	ldr	r3, [pc, #300]	; (8000a94 <MX_GPIO_Init+0x1e0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2108      	movs	r1, #8
 8000976:	4848      	ldr	r0, [pc, #288]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 8000978:	f001 f90e 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	2101      	movs	r1, #1
 8000980:	4846      	ldr	r0, [pc, #280]	; (8000a9c <MX_GPIO_Init+0x1e8>)
 8000982:	f001 f909 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000986:	2200      	movs	r2, #0
 8000988:	f24f 0110 	movw	r1, #61456	; 0xf010
 800098c:	4844      	ldr	r0, [pc, #272]	; (8000aa0 <MX_GPIO_Init+0x1ec>)
 800098e:	f001 f903 	bl	8001b98 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000992:	2308      	movs	r3, #8
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	483b      	ldr	r0, [pc, #236]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 80009aa:	f000 ff59 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4835      	ldr	r0, [pc, #212]	; (8000a9c <MX_GPIO_Init+0x1e8>)
 80009c6:	f000 ff4b 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009ca:	2308      	movs	r3, #8
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009da:	2305      	movs	r3, #5
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	482d      	ldr	r0, [pc, #180]	; (8000a9c <MX_GPIO_Init+0x1e8>)
 80009e6:	f000 ff3b 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <MX_GPIO_Init+0x1f0>)
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	482a      	ldr	r0, [pc, #168]	; (8000aa8 <MX_GPIO_Init+0x1f4>)
 80009fe:	f000 ff2f 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a02:	2304      	movs	r3, #4
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4825      	ldr	r0, [pc, #148]	; (8000aac <MX_GPIO_Init+0x1f8>)
 8000a16:	f000 ff23 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	481d      	ldr	r0, [pc, #116]	; (8000aac <MX_GPIO_Init+0x1f8>)
 8000a38:	f000 ff12 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a3c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a40:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <MX_GPIO_Init+0x1ec>)
 8000a56:	f000 ff03 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a5a:	2320      	movs	r3, #32
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <MX_GPIO_Init+0x1ec>)
 8000a6e:	f000 fef7 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_GPIO_Init+0x1f0>)
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_GPIO_Init+0x1e4>)
 8000a86:	f000 feeb 	bl	8001860 <HAL_GPIO_Init>

}
 8000a8a:	bf00      	nop
 8000a8c:	3730      	adds	r7, #48	; 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	10120000 	.word	0x10120000
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020400 	.word	0x40020400

08000ab0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000ab8:	f00b fe88 	bl	800c7cc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f009 f825 	bl	8009b0c <osDelay>
 8000ac2:	e7fb      	b.n	8000abc <StartDefaultTask+0xc>

08000ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d101      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad6:	f000 fd0b 	bl	80014f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40001000 	.word	0x40001000

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>

08000af2 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60ba      	str	r2, [r7, #8]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4603      	mov	r3, r0
 8000afe:	81fb      	strh	r3, [r7, #14]
 8000b00:	460b      	mov	r3, r1
 8000b02:	81bb      	strh	r3, [r7, #12]
 8000b04:	4613      	mov	r3, r2
 8000b06:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0c:	3307      	adds	r3, #7
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	da00      	bge.n	8000b14 <SSD1306_DrawBitmap+0x22>
 8000b12:	3307      	adds	r3, #7
 8000b14:	10db      	asrs	r3, r3, #3
 8000b16:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	82bb      	strh	r3, [r7, #20]
 8000b20:	e044      	b.n	8000bac <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	827b      	strh	r3, [r7, #18]
 8000b26:	e02f      	b.n	8000b88 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000b28:	8a7b      	ldrh	r3, [r7, #18]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000b32:	7dfb      	ldrb	r3, [r7, #23]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	75fb      	strb	r3, [r7, #23]
 8000b38:	e012      	b.n	8000b60 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000b3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b3e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b42:	fb02 f203 	mul.w	r2, r2, r3
 8000b46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	da00      	bge.n	8000b50 <SSD1306_DrawBitmap+0x5e>
 8000b4e:	3307      	adds	r3, #7
 8000b50:	10db      	asrs	r3, r3, #3
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	461a      	mov	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000b60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	da09      	bge.n	8000b7c <SSD1306_DrawBitmap+0x8a>
 8000b68:	89fa      	ldrh	r2, [r7, #14]
 8000b6a:	8a7b      	ldrh	r3, [r7, #18]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	89b9      	ldrh	r1, [r7, #12]
 8000b72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f92e 	bl	8000dd8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000b7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	3301      	adds	r3, #1
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	827b      	strh	r3, [r7, #18]
 8000b88:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbc9      	blt.n	8000b28 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000b94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	82bb      	strh	r3, [r7, #20]
 8000ba0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	81bb      	strh	r3, [r7, #12]
 8000bac:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000bb0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbb4      	blt.n	8000b22 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000bca:	f000 f96f 	bl	8000eac <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000bce:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2178      	movs	r1, #120	; 0x78
 8000bd6:	485b      	ldr	r0, [pc, #364]	; (8000d44 <SSD1306_Init+0x180>)
 8000bd8:	f002 ff9e 	bl	8003b18 <HAL_I2C_IsDeviceReady>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e0a9      	b.n	8000d3a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000be6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000bea:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bec:	e002      	b.n	8000bf4 <SSD1306_Init+0x30>
		p--;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f9      	bne.n	8000bee <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000bfa:	22ae      	movs	r2, #174	; 0xae
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2078      	movs	r0, #120	; 0x78
 8000c00:	f000 f9b2 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c04:	2220      	movs	r2, #32
 8000c06:	2100      	movs	r1, #0
 8000c08:	2078      	movs	r0, #120	; 0x78
 8000c0a:	f000 f9ad 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c0e:	2210      	movs	r2, #16
 8000c10:	2100      	movs	r1, #0
 8000c12:	2078      	movs	r0, #120	; 0x78
 8000c14:	f000 f9a8 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c18:	22b0      	movs	r2, #176	; 0xb0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2078      	movs	r0, #120	; 0x78
 8000c1e:	f000 f9a3 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c22:	22c8      	movs	r2, #200	; 0xc8
 8000c24:	2100      	movs	r1, #0
 8000c26:	2078      	movs	r0, #120	; 0x78
 8000c28:	f000 f99e 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2078      	movs	r0, #120	; 0x78
 8000c32:	f000 f999 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c36:	2210      	movs	r2, #16
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2078      	movs	r0, #120	; 0x78
 8000c3c:	f000 f994 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000c40:	2240      	movs	r2, #64	; 0x40
 8000c42:	2100      	movs	r1, #0
 8000c44:	2078      	movs	r0, #120	; 0x78
 8000c46:	f000 f98f 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c4a:	2281      	movs	r2, #129	; 0x81
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2078      	movs	r0, #120	; 0x78
 8000c50:	f000 f98a 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c54:	22ff      	movs	r2, #255	; 0xff
 8000c56:	2100      	movs	r1, #0
 8000c58:	2078      	movs	r0, #120	; 0x78
 8000c5a:	f000 f985 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c5e:	22a1      	movs	r2, #161	; 0xa1
 8000c60:	2100      	movs	r1, #0
 8000c62:	2078      	movs	r0, #120	; 0x78
 8000c64:	f000 f980 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c68:	22a6      	movs	r2, #166	; 0xa6
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2078      	movs	r0, #120	; 0x78
 8000c6e:	f000 f97b 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c72:	22a8      	movs	r2, #168	; 0xa8
 8000c74:	2100      	movs	r1, #0
 8000c76:	2078      	movs	r0, #120	; 0x78
 8000c78:	f000 f976 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c7c:	223f      	movs	r2, #63	; 0x3f
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2078      	movs	r0, #120	; 0x78
 8000c82:	f000 f971 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c86:	22a4      	movs	r2, #164	; 0xa4
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2078      	movs	r0, #120	; 0x78
 8000c8c:	f000 f96c 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c90:	22d3      	movs	r2, #211	; 0xd3
 8000c92:	2100      	movs	r1, #0
 8000c94:	2078      	movs	r0, #120	; 0x78
 8000c96:	f000 f967 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2078      	movs	r0, #120	; 0x78
 8000ca0:	f000 f962 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ca4:	22d5      	movs	r2, #213	; 0xd5
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2078      	movs	r0, #120	; 0x78
 8000caa:	f000 f95d 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000cae:	22f0      	movs	r2, #240	; 0xf0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2078      	movs	r0, #120	; 0x78
 8000cb4:	f000 f958 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000cb8:	22d9      	movs	r2, #217	; 0xd9
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2078      	movs	r0, #120	; 0x78
 8000cbe:	f000 f953 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000cc2:	2222      	movs	r2, #34	; 0x22
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2078      	movs	r0, #120	; 0x78
 8000cc8:	f000 f94e 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ccc:	22da      	movs	r2, #218	; 0xda
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2078      	movs	r0, #120	; 0x78
 8000cd2:	f000 f949 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000cd6:	2212      	movs	r2, #18
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2078      	movs	r0, #120	; 0x78
 8000cdc:	f000 f944 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000ce0:	22db      	movs	r2, #219	; 0xdb
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2078      	movs	r0, #120	; 0x78
 8000ce6:	f000 f93f 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000cea:	2220      	movs	r2, #32
 8000cec:	2100      	movs	r1, #0
 8000cee:	2078      	movs	r0, #120	; 0x78
 8000cf0:	f000 f93a 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000cf4:	228d      	movs	r2, #141	; 0x8d
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2078      	movs	r0, #120	; 0x78
 8000cfa:	f000 f935 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000cfe:	2214      	movs	r2, #20
 8000d00:	2100      	movs	r1, #0
 8000d02:	2078      	movs	r0, #120	; 0x78
 8000d04:	f000 f930 	bl	8000f68 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d08:	22af      	movs	r2, #175	; 0xaf
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2078      	movs	r0, #120	; 0x78
 8000d0e:	f000 f92b 	bl	8000f68 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000d12:	222e      	movs	r2, #46	; 0x2e
 8000d14:	2100      	movs	r1, #0
 8000d16:	2078      	movs	r0, #120	; 0x78
 8000d18:	f000 f926 	bl	8000f68 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 f843 	bl	8000da8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000d22:	f000 f813 	bl	8000d4c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <SSD1306_Init+0x184>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <SSD1306_Init+0x184>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SSD1306_Init+0x184>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000d38:	2301      	movs	r3, #1
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20004ddc 	.word	0x20004ddc
 8000d48:	200004b0 	.word	0x200004b0

08000d4c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	e01d      	b.n	8000d94 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	3b50      	subs	r3, #80	; 0x50
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2100      	movs	r1, #0
 8000d62:	2078      	movs	r0, #120	; 0x78
 8000d64:	f000 f900 	bl	8000f68 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2078      	movs	r0, #120	; 0x78
 8000d6e:	f000 f8fb 	bl	8000f68 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d72:	2210      	movs	r2, #16
 8000d74:	2100      	movs	r1, #0
 8000d76:	2078      	movs	r0, #120	; 0x78
 8000d78:	f000 f8f6 	bl	8000f68 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	01db      	lsls	r3, r3, #7
 8000d80:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <SSD1306_UpdateScreen+0x58>)
 8000d82:	441a      	add	r2, r3
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	2078      	movs	r0, #120	; 0x78
 8000d8a:	f000 f8a5 	bl	8000ed8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	3301      	adds	r3, #1
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	2b07      	cmp	r3, #7
 8000d98:	d9de      	bls.n	8000d58 <SSD1306_UpdateScreen+0xc>
	}
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200000b0 	.word	0x200000b0

08000da8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <SSD1306_Fill+0x14>
 8000db8:	2300      	movs	r3, #0
 8000dba:	e000      	b.n	8000dbe <SSD1306_Fill+0x16>
 8000dbc:	23ff      	movs	r3, #255	; 0xff
 8000dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <SSD1306_Fill+0x2c>)
 8000dc6:	f00c f84b 	bl	800ce60 <memset>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200000b0 	.word	0x200000b0

08000dd8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
 8000de2:	460b      	mov	r3, r1
 8000de4:	80bb      	strh	r3, [r7, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	70fb      	strb	r3, [r7, #3]
	if (
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	2b7f      	cmp	r3, #127	; 0x7f
 8000dee:	d848      	bhi.n	8000e82 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	2b3f      	cmp	r3, #63	; 0x3f
 8000df4:	d845      	bhi.n	8000e82 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <SSD1306_DrawPixel+0xb8>)
 8000df8:	791b      	ldrb	r3, [r3, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d006      	beq.n	8000e0c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf0c      	ite	eq
 8000e04:	2301      	moveq	r3, #1
 8000e06:	2300      	movne	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d11a      	bne.n	8000e48 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e12:	88fa      	ldrh	r2, [r7, #6]
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	08db      	lsrs	r3, r3, #3
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	01db      	lsls	r3, r3, #7
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <SSD1306_DrawPixel+0xbc>)
 8000e22:	5cd3      	ldrb	r3, [r2, r3]
 8000e24:	b25a      	sxtb	r2, r3
 8000e26:	88bb      	ldrh	r3, [r7, #4]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b259      	sxtb	r1, r3
 8000e38:	88fa      	ldrh	r2, [r7, #6]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	01db      	lsls	r3, r3, #7
 8000e3e:	4413      	add	r3, r2
 8000e40:	b2c9      	uxtb	r1, r1
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <SSD1306_DrawPixel+0xbc>)
 8000e44:	54d1      	strb	r1, [r2, r3]
 8000e46:	e01d      	b.n	8000e84 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e48:	88fa      	ldrh	r2, [r7, #6]
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	08db      	lsrs	r3, r3, #3
 8000e4e:	b298      	uxth	r0, r3
 8000e50:	4603      	mov	r3, r0
 8000e52:	01db      	lsls	r3, r3, #7
 8000e54:	4413      	add	r3, r2
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <SSD1306_DrawPixel+0xbc>)
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
 8000e5a:	b25a      	sxtb	r2, r3
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	2101      	movs	r1, #1
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	4013      	ands	r3, r2
 8000e70:	b259      	sxtb	r1, r3
 8000e72:	88fa      	ldrh	r2, [r7, #6]
 8000e74:	4603      	mov	r3, r0
 8000e76:	01db      	lsls	r3, r3, #7
 8000e78:	4413      	add	r3, r2
 8000e7a:	b2c9      	uxtb	r1, r1
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <SSD1306_DrawPixel+0xbc>)
 8000e7e:	54d1      	strb	r1, [r2, r3]
 8000e80:	e000      	b.n	8000e84 <SSD1306_DrawPixel+0xac>
		return;
 8000e82:	bf00      	nop
	}
}
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200004b0 	.word	0x200004b0
 8000e94:	200000b0 	.word	0x200000b0

08000e98 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff ff83 	bl	8000da8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000ea2:	f7ff ff53 	bl	8000d4c <SSD1306_UpdateScreen>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <ssd1306_I2C_Init+0x28>)
 8000eb4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000eb6:	e002      	b.n	8000ebe <ssd1306_I2C_Init+0x12>
		p--;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f9      	bne.n	8000eb8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	0003d090 	.word	0x0003d090

08000ed8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b0c7      	sub	sp, #284	; 0x11c
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	4604      	mov	r4, r0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	4639      	mov	r1, r7
 8000ee4:	600a      	str	r2, [r1, #0]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	4622      	mov	r2, r4
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	1dbb      	adds	r3, r7, #6
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	460a      	mov	r2, r1
 8000ef8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	1dba      	adds	r2, r7, #6
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f0a:	e010      	b.n	8000f2e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8000f0c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f10:	463a      	mov	r2, r7
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	441a      	add	r2, r3
 8000f16:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	7811      	ldrb	r1, [r2, #0]
 8000f1e:	f107 020c 	add.w	r2, r7, #12
 8000f22:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000f24:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f28:	3301      	adds	r3, #1
 8000f2a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f2e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	1d3a      	adds	r2, r7, #4
 8000f36:	8812      	ldrh	r2, [r2, #0]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8e7      	bhi.n	8000f0c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b299      	uxth	r1, r3
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f107 020c 	add.w	r2, r7, #12
 8000f4e:	200a      	movs	r0, #10
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	4804      	ldr	r0, [pc, #16]	; (8000f64 <ssd1306_I2C_WriteMulti+0x8c>)
 8000f54:	f002 fce2 	bl	800391c <HAL_I2C_Master_Transmit>
}
 8000f58:	bf00      	nop
 8000f5a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20004ddc 	.word	0x20004ddc

08000f68 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	460b      	mov	r3, r1
 8000f74:	71bb      	strb	r3, [r7, #6]
 8000f76:	4613      	mov	r3, r2
 8000f78:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	b299      	uxth	r1, r3
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2302      	movs	r3, #2
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <ssd1306_I2C_Write+0x38>)
 8000f92:	f002 fcc3 	bl	800391c <HAL_I2C_Master_Transmit>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20004ddc 	.word	0x20004ddc

08000fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_MspInit+0x64>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <HAL_MspInit+0x64>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_MspInit+0x64>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_MspInit+0x64>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <HAL_MspInit+0x64>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_MspInit+0x64>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	210f      	movs	r1, #15
 8000fe6:	f06f 0001 	mvn.w	r0, #1
 8000fea:	f000 fb7d 	bl	80016e8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	2005      	movs	r0, #5
 8000ff4:	f000 fb78 	bl	80016e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ff8:	2005      	movs	r0, #5
 8000ffa:	f000 fb91 	bl	8001720 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_I2C_MspInit+0x84>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d12b      	bne.n	8001086 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800104a:	23c0      	movs	r3, #192	; 0xc0
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104e:	2312      	movs	r3, #18
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001052:	2301      	movs	r3, #1
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800105a:	2304      	movs	r3, #4
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <HAL_I2C_MspInit+0x8c>)
 8001066:	f000 fbfb 	bl	8001860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_I2C_MspInit+0x88>)
 8001074:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_I2C_MspInit+0x88>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40005400 	.word	0x40005400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a28      	ldr	r2, [pc, #160]	; (800115c <HAL_I2S_MspInit+0xc0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d14a      	bne.n	8001154 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b27      	ldr	r3, [pc, #156]	; (8001160 <HAL_I2S_MspInit+0xc4>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a26      	ldr	r2, [pc, #152]	; (8001160 <HAL_I2S_MspInit+0xc4>)
 80010c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b24      	ldr	r3, [pc, #144]	; (8001160 <HAL_I2S_MspInit+0xc4>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <HAL_I2S_MspInit+0xc4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <HAL_I2S_MspInit+0xc4>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_I2S_MspInit+0xc4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_I2S_MspInit+0xc4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <HAL_I2S_MspInit+0xc4>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_I2S_MspInit+0xc4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001112:	2310      	movs	r3, #16
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001122:	2306      	movs	r3, #6
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <HAL_I2S_MspInit+0xc8>)
 800112e:	f000 fb97 	bl	8001860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001132:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001144:	2306      	movs	r3, #6
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <HAL_I2S_MspInit+0xcc>)
 8001150:	f000 fb86 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40003c00 	.word	0x40003c00
 8001160:	40023800 	.word	0x40023800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020800 	.word	0x40020800

0800116c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <HAL_SPI_MspInit+0x84>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d12b      	bne.n	80011e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 8001198:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_SPI_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011c6:	23e0      	movs	r3, #224	; 0xe0
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011d6:	2305      	movs	r3, #5
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <HAL_SPI_MspInit+0x8c>)
 80011e2:	f000 fb3d 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	; 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40013000 	.word	0x40013000
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <HAL_UART_MspInit+0x94>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d133      	bne.n	8001286 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_UART_MspInit+0x98>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001256:	230c      	movs	r3, #12
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001266:	2307      	movs	r3, #7
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <HAL_UART_MspInit+0x9c>)
 8001272:	f000 faf5 	bl	8001860 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2105      	movs	r1, #5
 800127a:	2026      	movs	r0, #38	; 0x26
 800127c:	f000 fa34 	bl	80016e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001280:	2026      	movs	r0, #38	; 0x26
 8001282:	f000 fa4d 	bl	8001720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40004400 	.word	0x40004400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000

0800129c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	2036      	movs	r0, #54	; 0x36
 80012b2:	f000 fa19 	bl	80016e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012b6:	2036      	movs	r0, #54	; 0x36
 80012b8:	f000 fa32 	bl	8001720 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <HAL_InitTick+0xa4>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <HAL_InitTick+0xa4>)
 80012c6:	f043 0310 	orr.w	r3, r3, #16
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_InitTick+0xa4>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012d8:	f107 0210 	add.w	r2, r7, #16
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 f864 	bl	80053b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80012e8:	f004 f83a 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80012ec:	4603      	mov	r3, r0
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <HAL_InitTick+0xa8>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0c9b      	lsrs	r3, r3, #18
 80012fc:	3b01      	subs	r3, #1
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_InitTick+0xac>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_InitTick+0xb0>)
 8001304:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_InitTick+0xac>)
 8001308:	f240 32e7 	movw	r2, #999	; 0x3e7
 800130c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_InitTick+0xac>)
 8001310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001312:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_InitTick+0xac>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_InitTick+0xac>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <HAL_InitTick+0xac>)
 8001322:	f004 fa40 	bl	80057a6 <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d104      	bne.n	8001336 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <HAL_InitTick+0xac>)
 800132e:	f004 fa93 	bl	8005858 <HAL_TIM_Base_Start_IT>
 8001332:	4603      	mov	r3, r0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3730      	adds	r7, #48	; 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	431bde83 	.word	0x431bde83
 8001348:	20004f14 	.word	0x20004f14
 800134c:	40001000 	.word	0x40001000

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler+0x4>

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <USART2_IRQHandler+0x10>)
 8001392:	f004 fd03 	bl	8005d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20004e88 	.word	0x20004e88

080013a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <TIM6_DAC_IRQHandler+0x10>)
 80013a6:	f004 fac7 	bl	8005938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20004f14 	.word	0x20004f14

080013b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <OTG_FS_IRQHandler+0x10>)
 80013ba:	f000 fe71 	bl	80020a0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200053a8 	.word	0x200053a8

080013c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f00b fcea 	bl	800cdd0 <__errno>
 80013fc:	4603      	mov	r3, r0
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20020000 	.word	0x20020000
 8001428:	00000400 	.word	0x00000400
 800142c:	200004b8 	.word	0x200004b8
 8001430:	200056c0 	.word	0x200056c0

08001434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <SystemInit+0x20>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <SystemInit+0x20>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001490 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800145e:	490e      	ldr	r1, [pc, #56]	; (8001498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001460:	4a0e      	ldr	r2, [pc, #56]	; (800149c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001474:	4c0b      	ldr	r4, [pc, #44]	; (80014a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001482:	f7ff ffd7 	bl	8001434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001486:	f00b fca9 	bl	800cddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148a:	f7ff f89f 	bl	80005cc <main>
  bx  lr    
 800148e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800149c:	0800e8b8 	.word	0x0800e8b8
  ldr r2, =_sbss
 80014a0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80014a4:	200056bc 	.word	0x200056bc

080014a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC_IRQHandler>
	...

080014ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_Init+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <HAL_Init+0x40>)
 80014b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_Init+0x40>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_Init+0x40>)
 80014c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_Init+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_Init+0x40>)
 80014ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 f8fc 	bl	80016d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fede 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff fd60 	bl	8000fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023c00 	.word	0x40023c00

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000008 	.word	0x20000008
 8001514:	20004f5c 	.word	0x20004f5c

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20004f5c 	.word	0x20004f5c

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff ffee 	bl	8001518 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_Delay+0x44>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffde 	bl	8001518 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008

08001578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <__NVIC_GetPriorityGrouping+0x18>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f003 0307 	and.w	r3, r3, #7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db0b      	blt.n	8001606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	4907      	ldr	r1, [pc, #28]	; (8001614 <__NVIC_EnableIRQ+0x38>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff4c 	bl	8001578 <__NVIC_SetPriorityGrouping>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fa:	f7ff ff61 	bl	80015c0 <__NVIC_GetPriorityGrouping>
 80016fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	68b9      	ldr	r1, [r7, #8]
 8001704:	6978      	ldr	r0, [r7, #20]
 8001706:	f7ff ffb1 	bl	800166c <NVIC_EncodePriority>
 800170a:	4602      	mov	r2, r0
 800170c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff80 	bl	8001618 <__NVIC_SetPriority>
}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff54 	bl	80015dc <__NVIC_EnableIRQ>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800174a:	f7ff fee5 	bl	8001518 <HAL_GetTick>
 800174e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d008      	beq.n	800176e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e052      	b.n	8001814 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0216 	bic.w	r2, r2, #22
 800177c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800178c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <HAL_DMA_Abort+0x62>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0208 	bic.w	r2, r2, #8
 80017ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0201 	bic.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017be:	e013      	b.n	80017e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017c0:	f7ff feaa 	bl	8001518 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b05      	cmp	r3, #5
 80017cc:	d90c      	bls.n	80017e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2220      	movs	r2, #32
 80017d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2203      	movs	r2, #3
 80017e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e015      	b.n	8001814 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1e4      	bne.n	80017c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fa:	223f      	movs	r2, #63	; 0x3f
 80017fc:	409a      	lsls	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d004      	beq.n	800183a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00c      	b.n	8001854 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2205      	movs	r2, #5
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0201 	bic.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e16b      	b.n	8001b54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	429a      	cmp	r2, r3
 8001896:	f040 815a 	bne.w	8001b4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d005      	beq.n	80018b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d130      	bne.n	8001914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e8:	2201      	movs	r2, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 0201 	and.w	r2, r3, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b03      	cmp	r3, #3
 800191e:	d017      	beq.n	8001950 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d123      	bne.n	80019a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3208      	adds	r2, #8
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80b4 	beq.w	8001b4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b60      	ldr	r3, [pc, #384]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a5f      	ldr	r2, [pc, #380]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b5d      	ldr	r3, [pc, #372]	; (8001b6c <HAL_GPIO_Init+0x30c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a02:	4a5b      	ldr	r2, [pc, #364]	; (8001b70 <HAL_GPIO_Init+0x310>)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	220f      	movs	r2, #15
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_GPIO_Init+0x314>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d02b      	beq.n	8001a86 <HAL_GPIO_Init+0x226>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a51      	ldr	r2, [pc, #324]	; (8001b78 <HAL_GPIO_Init+0x318>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d025      	beq.n	8001a82 <HAL_GPIO_Init+0x222>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a50      	ldr	r2, [pc, #320]	; (8001b7c <HAL_GPIO_Init+0x31c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01f      	beq.n	8001a7e <HAL_GPIO_Init+0x21e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4f      	ldr	r2, [pc, #316]	; (8001b80 <HAL_GPIO_Init+0x320>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d019      	beq.n	8001a7a <HAL_GPIO_Init+0x21a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4e      	ldr	r2, [pc, #312]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0x216>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4d      	ldr	r2, [pc, #308]	; (8001b88 <HAL_GPIO_Init+0x328>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_Init+0x212>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4c      	ldr	r2, [pc, #304]	; (8001b8c <HAL_GPIO_Init+0x32c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x20e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_Init+0x20a>
 8001a66:	2307      	movs	r3, #7
 8001a68:	e00e      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a6e:	2306      	movs	r3, #6
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x228>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a98:	4935      	ldr	r1, [pc, #212]	; (8001b70 <HAL_GPIO_Init+0x310>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa6:	4b3b      	ldr	r3, [pc, #236]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aca:	4a32      	ldr	r2, [pc, #200]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af4:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1e:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b48:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f ae90 	bls.w	800187c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40021400 	.word	0x40021400
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	40021c00 	.word	0x40021c00
 8001b94:	40013c00 	.word	0x40013c00

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb4:	e003      	b.n	8001bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	041a      	lsls	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	619a      	str	r2, [r3, #24]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001bca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bcc:	b08f      	sub	sp, #60	; 0x3c
 8001bce:	af0a      	add	r7, sp, #40	; 0x28
 8001bd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e054      	b.n	8001c86 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f00a fe3c 	bl	800c874 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2203      	movs	r2, #3
 8001c00:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 fe0e 	bl	800683c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	687e      	ldr	r6, [r7, #4]
 8001c28:	466d      	mov	r5, sp
 8001c2a:	f106 0410 	add.w	r4, r6, #16
 8001c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c3e:	1d33      	adds	r3, r6, #4
 8001c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c42:	6838      	ldr	r0, [r7, #0]
 8001c44:	f004 fd88 	bl	8006758 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 fe05 	bl	800685e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	687e      	ldr	r6, [r7, #4]
 8001c5c:	466d      	mov	r5, sp
 8001c5e:	f106 0410 	add.w	r4, r6, #16
 8001c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c72:	1d33      	adds	r3, r6, #4
 8001c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c76:	6838      	ldr	r0, [r7, #0]
 8001c78:	f004 ff18 	bl	8006aac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c8e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001c8e:	b590      	push	{r4, r7, lr}
 8001c90:	b089      	sub	sp, #36	; 0x24
 8001c92:	af04      	add	r7, sp, #16
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	4608      	mov	r0, r1
 8001c98:	4611      	mov	r1, r2
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	70fb      	strb	r3, [r7, #3]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70bb      	strb	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_HCD_HC_Init+0x28>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e076      	b.n	8001da4 <HAL_HCD_HC_Init+0x116>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	333d      	adds	r3, #61	; 0x3d
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3338      	adds	r3, #56	; 0x38
 8001cde:	787a      	ldrb	r2, [r7, #1]
 8001ce0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	3340      	adds	r3, #64	; 0x40
 8001cf0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001cf2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	212c      	movs	r1, #44	; 0x2c
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	3339      	adds	r3, #57	; 0x39
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	333f      	adds	r3, #63	; 0x3f
 8001d14:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	78ba      	ldrb	r2, [r7, #2]
 8001d1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d22:	b2d0      	uxtb	r0, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	212c      	movs	r1, #44	; 0x2c
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	333a      	adds	r3, #58	; 0x3a
 8001d30:	4602      	mov	r2, r0
 8001d32:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001d34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	da09      	bge.n	8001d50 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	333b      	adds	r3, #59	; 0x3b
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	e008      	b.n	8001d62 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	333b      	adds	r3, #59	; 0x3b
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	212c      	movs	r1, #44	; 0x2c
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	333c      	adds	r3, #60	; 0x3c
 8001d70:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d74:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	787c      	ldrb	r4, [r7, #1]
 8001d7c:	78ba      	ldrb	r2, [r7, #2]
 8001d7e:	78f9      	ldrb	r1, [r7, #3]
 8001d80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d82:	9302      	str	r3, [sp, #8]
 8001d84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	4623      	mov	r3, r4
 8001d92:	f005 f80d 	bl	8006db0 <USB_HC_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}

08001dac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_HCD_HC_Halt+0x1e>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e00f      	b.n	8001dea <HAL_HCD_HC_Halt+0x3e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f005 fa49 	bl	8007272 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	4608      	mov	r0, r1
 8001dfe:	4611      	mov	r1, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	70fb      	strb	r3, [r7, #3]
 8001e06:	460b      	mov	r3, r1
 8001e08:	70bb      	strb	r3, [r7, #2]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	212c      	movs	r1, #44	; 0x2c
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	4413      	add	r3, r2
 8001e1a:	333b      	adds	r3, #59	; 0x3b
 8001e1c:	78ba      	ldrb	r2, [r7, #2]
 8001e1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	212c      	movs	r1, #44	; 0x2c
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	333f      	adds	r3, #63	; 0x3f
 8001e2e:	787a      	ldrb	r2, [r7, #1]
 8001e30:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e32:	7c3b      	ldrb	r3, [r7, #16]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d112      	bne.n	8001e5e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	212c      	movs	r1, #44	; 0x2c
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3342      	adds	r3, #66	; 0x42
 8001e46:	2203      	movs	r2, #3
 8001e48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	212c      	movs	r1, #44	; 0x2c
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	333d      	adds	r3, #61	; 0x3d
 8001e58:	7f3a      	ldrb	r2, [r7, #28]
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	e008      	b.n	8001e70 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3342      	adds	r3, #66	; 0x42
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001e70:	787b      	ldrb	r3, [r7, #1]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	f200 80c6 	bhi.w	8002004 <HAL_HCD_HC_SubmitRequest+0x210>
 8001e78:	a201      	add	r2, pc, #4	; (adr r2, 8001e80 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7e:	bf00      	nop
 8001e80:	08001e91 	.word	0x08001e91
 8001e84:	08001ff1 	.word	0x08001ff1
 8001e88:	08001ef5 	.word	0x08001ef5
 8001e8c:	08001f73 	.word	0x08001f73
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001e90:	7c3b      	ldrb	r3, [r7, #16]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	f040 80b8 	bne.w	8002008 <HAL_HCD_HC_SubmitRequest+0x214>
 8001e98:	78bb      	ldrb	r3, [r7, #2]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 80b4 	bne.w	8002008 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001ea0:	8b3b      	ldrh	r3, [r7, #24]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d108      	bne.n	8001eb8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3355      	adds	r3, #85	; 0x55
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	212c      	movs	r1, #44	; 0x2c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3355      	adds	r3, #85	; 0x55
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	212c      	movs	r1, #44	; 0x2c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3342      	adds	r3, #66	; 0x42
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ede:	e093      	b.n	8002008 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	212c      	movs	r1, #44	; 0x2c
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	3342      	adds	r3, #66	; 0x42
 8001eee:	2202      	movs	r2, #2
 8001ef0:	701a      	strb	r2, [r3, #0]
      break;
 8001ef2:	e089      	b.n	8002008 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ef4:	78bb      	ldrb	r3, [r7, #2]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d11d      	bne.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3355      	adds	r3, #85	; 0x55
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3342      	adds	r3, #66	; 0x42
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f20:	e073      	b.n	800200a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3342      	adds	r3, #66	; 0x42
 8001f30:	2202      	movs	r2, #2
 8001f32:	701a      	strb	r2, [r3, #0]
      break;
 8001f34:	e069      	b.n	800200a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	212c      	movs	r1, #44	; 0x2c
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	3354      	adds	r3, #84	; 0x54
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	212c      	movs	r1, #44	; 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	3342      	adds	r3, #66	; 0x42
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
      break;
 8001f5c:	e055      	b.n	800200a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	212c      	movs	r1, #44	; 0x2c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	3342      	adds	r3, #66	; 0x42
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	701a      	strb	r2, [r3, #0]
      break;
 8001f70:	e04b      	b.n	800200a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f72:	78bb      	ldrb	r3, [r7, #2]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d11d      	bne.n	8001fb4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	212c      	movs	r1, #44	; 0x2c
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	3355      	adds	r3, #85	; 0x55
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	212c      	movs	r1, #44	; 0x2c
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	3342      	adds	r3, #66	; 0x42
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f9e:	e034      	b.n	800200a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	212c      	movs	r1, #44	; 0x2c
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	3342      	adds	r3, #66	; 0x42
 8001fae:	2202      	movs	r2, #2
 8001fb0:	701a      	strb	r2, [r3, #0]
      break;
 8001fb2:	e02a      	b.n	800200a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3354      	adds	r3, #84	; 0x54
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3342      	adds	r3, #66	; 0x42
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
      break;
 8001fda:	e016      	b.n	800200a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3342      	adds	r3, #66	; 0x42
 8001fea:	2202      	movs	r2, #2
 8001fec:	701a      	strb	r2, [r3, #0]
      break;
 8001fee:	e00c      	b.n	800200a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3342      	adds	r3, #66	; 0x42
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
      break;
 8002002:	e002      	b.n	800200a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002004:	bf00      	nop
 8002006:	e000      	b.n	800200a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002008:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	3344      	adds	r3, #68	; 0x44
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	8b3a      	ldrh	r2, [r7, #24]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	202c      	movs	r0, #44	; 0x2c
 8002024:	fb00 f303 	mul.w	r3, r0, r3
 8002028:	440b      	add	r3, r1
 800202a:	334c      	adds	r3, #76	; 0x4c
 800202c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3360      	adds	r3, #96	; 0x60
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3350      	adds	r3, #80	; 0x50
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3339      	adds	r3, #57	; 0x39
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	3361      	adds	r3, #97	; 0x61
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	222c      	movs	r2, #44	; 0x2c
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	3338      	adds	r3, #56	; 0x38
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	18d1      	adds	r1, r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	f004 ff9c 	bl	8006fcc <USB_HC_StartXfer>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop

080020a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 fcb5 	bl	8006a26 <USB_GetMode>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b01      	cmp	r3, #1
 80020c0:	f040 80ef 	bne.w	80022a2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 fc99 	bl	8006a00 <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80e5 	beq.w	80022a0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 fc90 	bl	8006a00 <USB_ReadInterrupts>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020ea:	d104      	bne.n	80020f6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80020f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 fc80 	bl	8006a00 <USB_ReadInterrupts>
 8002100:	4603      	mov	r3, r0
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800210a:	d104      	bne.n	8002116 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002114:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f004 fc70 	bl	8006a00 <USB_ReadInterrupts>
 8002120:	4603      	mov	r3, r0
 8002122:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002126:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800212a:	d104      	bne.n	8002136 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002134:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f004 fc60 	bl	8006a00 <USB_ReadInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b02      	cmp	r3, #2
 8002148:	d103      	bne.n	8002152 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2202      	movs	r2, #2
 8002150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f004 fc52 	bl	8006a00 <USB_ReadInterrupts>
 800215c:	4603      	mov	r3, r0
 800215e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002166:	d115      	bne.n	8002194 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002170:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d108      	bne.n	8002194 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f00a fbf4 	bl	800c970 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fd48 	bl	8006c24 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f004 fc31 	bl	8006a00 <USB_ReadInterrupts>
 800219e:	4603      	mov	r3, r0
 80021a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a8:	d102      	bne.n	80021b0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f001 f9ff 	bl	80035ae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f004 fc23 	bl	8006a00 <USB_ReadInterrupts>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d106      	bne.n	80021d2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f00a fbb7 	bl	800c938 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2208      	movs	r2, #8
 80021d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 fc12 	bl	8006a00 <USB_ReadInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d101      	bne.n	80021ea <HAL_HCD_IRQHandler+0x14a>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_HCD_IRQHandler+0x14c>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d012      	beq.n	8002216 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699a      	ldr	r2, [r3, #24]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0210 	bic.w	r2, r2, #16
 80021fe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f001 f902 	bl	800340a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0210 	orr.w	r2, r2, #16
 8002214:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f004 fbf0 	bl	8006a00 <USB_ReadInterrupts>
 8002220:	4603      	mov	r3, r0
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800222a:	d13a      	bne.n	80022a2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f005 f80d 	bl	8007250 <USB_HC_ReadInterrupt>
 8002236:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e025      	b.n	800228a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	fa22 f303 	lsr.w	r3, r2, r3
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d018      	beq.n	8002284 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002268:	d106      	bne.n	8002278 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	4619      	mov	r1, r3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f8ab 	bl	80023cc <HCD_HC_IN_IRQHandler>
 8002276:	e005      	b.n	8002284 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	4619      	mov	r1, r3
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fcc6 	bl	8002c10 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	d3d4      	bcc.n	800223e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800229c:	615a      	str	r2, [r3, #20]
 800229e:	e000      	b.n	80022a2 <HAL_HCD_IRQHandler+0x202>
      return;
 80022a0:	bf00      	nop
    }
  }
}
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_HCD_Start+0x16>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e013      	b.n	80022e6 <HAL_HCD_Start+0x3e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f004 faa5 	bl	800681a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2101      	movs	r1, #1
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 fd08 	bl	8006cec <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_HCD_Stop+0x16>
 8002300:	2302      	movs	r3, #2
 8002302:	e00d      	b.n	8002320 <HAL_HCD_Stop+0x32>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f005 f907 	bl	8007524 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f004 fcaf 	bl	8006c98 <USB_ResetPort>
 800233a:	4603      	mov	r3, r0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3360      	adds	r3, #96	; 0x60
 800235e:	781b      	ldrb	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	3350      	adds	r3, #80	; 0x50
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 fcf3 	bl	8006d8c <USB_GetCurrentFrame>
 80023a6:	4603      	mov	r3, r0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 fcce 	bl	8006d5e <USB_GetHostSpeed>
 80023c2:	4603      	mov	r3, r0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d119      	bne.n	8002430 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	461a      	mov	r2, r3
 800240a:	2304      	movs	r3, #4
 800240c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	0151      	lsls	r1, r2, #5
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	440a      	add	r2, r1
 8002424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	60d3      	str	r3, [r2, #12]
 800242e:	e101      	b.n	8002634 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002446:	d12b      	bne.n	80024a0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002454:	461a      	mov	r2, r3
 8002456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3361      	adds	r3, #97	; 0x61
 800246a:	2207      	movs	r2, #7
 800246c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	0151      	lsls	r1, r2, #5
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	440a      	add	r2, r1
 8002484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f004 feea 	bl	8007272 <USB_HC_Halt>
 800249e:	e0c9      	b.n	8002634 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d109      	bne.n	80024ca <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	461a      	mov	r2, r3
 80024c4:	2320      	movs	r3, #32
 80024c6:	6093      	str	r3, [r2, #8]
 80024c8:	e0b4      	b.n	8002634 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d133      	bne.n	8002548 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	0151      	lsls	r1, r2, #5
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	440a      	add	r2, r1
 80024f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	3361      	adds	r3, #97	; 0x61
 800250e:	2205      	movs	r2, #5
 8002510:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251e:	461a      	mov	r2, r3
 8002520:	2310      	movs	r3, #16
 8002522:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	461a      	mov	r2, r3
 8002532:	2308      	movs	r3, #8
 8002534:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f004 fe96 	bl	8007272 <USB_HC_Halt>
 8002546:	e075      	b.n	8002634 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255e:	d134      	bne.n	80025ca <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	0151      	lsls	r1, r2, #5
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	440a      	add	r2, r1
 8002576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3361      	adds	r3, #97	; 0x61
 800258e:	2208      	movs	r2, #8
 8002590:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	461a      	mov	r2, r3
 80025a0:	2310      	movs	r3, #16
 80025a2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b0:	461a      	mov	r2, r3
 80025b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 fe55 	bl	8007272 <USB_HC_Halt>
 80025c8:	e034      	b.n	8002634 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025dc:	2b80      	cmp	r3, #128	; 0x80
 80025de:	d129      	bne.n	8002634 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	0151      	lsls	r1, r2, #5
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	440a      	add	r2, r1
 80025f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4413      	add	r3, r2
 800260c:	3361      	adds	r3, #97	; 0x61
 800260e:	2206      	movs	r2, #6
 8002610:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f004 fe28 	bl	8007272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	461a      	mov	r2, r3
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800264a:	d122      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	0151      	lsls	r1, r2, #5
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	440a      	add	r2, r1
 8002662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f004 fdfb 	bl	8007272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	461a      	mov	r2, r3
 800268a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800268e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002690:	e2ba      	b.n	8002c08 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	f040 811b 	bne.w	80028e0 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d019      	beq.n	80026e6 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3348      	adds	r3, #72	; 0x48
 80026c0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	0159      	lsls	r1, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026d4:	1ad2      	subs	r2, r2, r3
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	202c      	movs	r0, #44	; 0x2c
 80026dc:	fb00 f303 	mul.w	r3, r0, r3
 80026e0:	440b      	add	r3, r1
 80026e2:	3350      	adds	r3, #80	; 0x50
 80026e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3361      	adds	r3, #97	; 0x61
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	335c      	adds	r3, #92	; 0x5c
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	461a      	mov	r2, r3
 8002718:	2301      	movs	r3, #1
 800271a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	333f      	adds	r3, #63	; 0x3f
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d009      	beq.n	8002744 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	333f      	adds	r3, #63	; 0x3f
 800273e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002740:	2b02      	cmp	r3, #2
 8002742:	d121      	bne.n	8002788 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	0151      	lsls	r1, r2, #5
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	440a      	add	r2, r1
 800275a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f004 fd7f 	bl	8007272 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	2310      	movs	r3, #16
 8002784:	6093      	str	r3, [r2, #8]
 8002786:	e066      	b.n	8002856 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	333f      	adds	r3, #63	; 0x3f
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d127      	bne.n	80027ec <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	0151      	lsls	r1, r2, #5
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	440a      	add	r2, r1
 80027b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027ba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3360      	adds	r3, #96	; 0x60
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	b2d9      	uxtb	r1, r3
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	202c      	movs	r0, #44	; 0x2c
 80027d8:	fb00 f303 	mul.w	r3, r0, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3360      	adds	r3, #96	; 0x60
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f00a f8d1 	bl	800c98c <HAL_HCD_HC_NotifyURBChange_Callback>
 80027ea:	e034      	b.n	8002856 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	333f      	adds	r3, #63	; 0x3f
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d12a      	bne.n	8002856 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	3360      	adds	r3, #96	; 0x60
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3354      	adds	r3, #84	; 0x54
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	f083 0301 	eor.w	r3, r3, #1
 8002826:	b2d8      	uxtb	r0, r3
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3354      	adds	r3, #84	; 0x54
 8002836:	4602      	mov	r2, r0
 8002838:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	b2d9      	uxtb	r1, r3
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	202c      	movs	r0, #44	; 0x2c
 8002844:	fb00 f303 	mul.w	r3, r0, r3
 8002848:	4413      	add	r3, r2
 800284a:	3360      	adds	r3, #96	; 0x60
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f00a f89b 	bl	800c98c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d12b      	bne.n	80028b6 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	3348      	adds	r3, #72	; 0x48
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	202c      	movs	r0, #44	; 0x2c
 8002874:	fb00 f202 	mul.w	r2, r0, r2
 8002878:	440a      	add	r2, r1
 800287a:	3240      	adds	r2, #64	; 0x40
 800287c:	8812      	ldrh	r2, [r2, #0]
 800287e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 81be 	beq.w	8002c08 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	3354      	adds	r3, #84	; 0x54
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	f083 0301 	eor.w	r3, r3, #1
 80028a0:	b2d8      	uxtb	r0, r3
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3354      	adds	r3, #84	; 0x54
 80028b0:	4602      	mov	r2, r0
 80028b2:	701a      	strb	r2, [r3, #0]
}
 80028b4:	e1a8      	b.n	8002c08 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	3354      	adds	r3, #84	; 0x54
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	f083 0301 	eor.w	r3, r3, #1
 80028ca:	b2d8      	uxtb	r0, r3
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	3354      	adds	r3, #84	; 0x54
 80028da:	4602      	mov	r2, r0
 80028dc:	701a      	strb	r2, [r3, #0]
}
 80028de:	e193      	b.n	8002c08 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	f040 8106 	bne.w	8002b04 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	0151      	lsls	r1, r2, #5
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	440a      	add	r2, r1
 800290e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002912:	f023 0302 	bic.w	r3, r3, #2
 8002916:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3361      	adds	r3, #97	; 0x61
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d109      	bne.n	8002940 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3360      	adds	r3, #96	; 0x60
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e0c9      	b.n	8002ad4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3361      	adds	r3, #97	; 0x61
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d109      	bne.n	8002968 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3360      	adds	r3, #96	; 0x60
 8002962:	2205      	movs	r2, #5
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e0b5      	b.n	8002ad4 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3361      	adds	r3, #97	; 0x61
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b06      	cmp	r3, #6
 800297a:	d009      	beq.n	8002990 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3361      	adds	r3, #97	; 0x61
 800298a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800298c:	2b08      	cmp	r3, #8
 800298e:	d150      	bne.n	8002a32 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	335c      	adds	r3, #92	; 0x5c
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	202c      	movs	r0, #44	; 0x2c
 80029a8:	fb00 f303 	mul.w	r3, r0, r3
 80029ac:	440b      	add	r3, r1
 80029ae:	335c      	adds	r3, #92	; 0x5c
 80029b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	335c      	adds	r3, #92	; 0x5c
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d912      	bls.n	80029ec <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	212c      	movs	r1, #44	; 0x2c
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	335c      	adds	r3, #92	; 0x5c
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3360      	adds	r3, #96	; 0x60
 80029e6:	2204      	movs	r2, #4
 80029e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029ea:	e073      	b.n	8002ad4 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3360      	adds	r3, #96	; 0x60
 80029fa:	2202      	movs	r2, #2
 80029fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a14:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a1c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a30:	e050      	b.n	8002ad4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3361      	adds	r3, #97	; 0x61
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d122      	bne.n	8002a8c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3360      	adds	r3, #96	; 0x60
 8002a54:	2202      	movs	r2, #2
 8002a56:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a6e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e023      	b.n	8002ad4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3361      	adds	r3, #97	; 0x61
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b07      	cmp	r3, #7
 8002a9e:	d119      	bne.n	8002ad4 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	335c      	adds	r3, #92	; 0x5c
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	202c      	movs	r0, #44	; 0x2c
 8002ab8:	fb00 f303 	mul.w	r3, r0, r3
 8002abc:	440b      	add	r3, r1
 8002abe:	335c      	adds	r3, #92	; 0x5c
 8002ac0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3360      	adds	r3, #96	; 0x60
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	b2d9      	uxtb	r1, r3
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	202c      	movs	r0, #44	; 0x2c
 8002af0:	fb00 f303 	mul.w	r3, r0, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3360      	adds	r3, #96	; 0x60
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f009 ff45 	bl	800c98c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b02:	e081      	b.n	8002c08 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d176      	bne.n	8002c08 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	333f      	adds	r3, #63	; 0x3f
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d121      	bne.n	8002b72 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	335c      	adds	r3, #92	; 0x5c
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	0151      	lsls	r1, r2, #5
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	440a      	add	r2, r1
 8002b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 fb81 	bl	8007272 <USB_HC_Halt>
 8002b70:	e041      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	333f      	adds	r3, #63	; 0x3f
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	212c      	movs	r1, #44	; 0x2c
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	333f      	adds	r3, #63	; 0x3f
 8002b94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d12d      	bne.n	8002bf6 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	335c      	adds	r3, #92	; 0x5c
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d120      	bne.n	8002bf6 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3361      	adds	r3, #97	; 0x61
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	0151      	lsls	r1, r2, #5
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	440a      	add	r2, r1
 8002bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 fb3e 	bl	8007272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c02:	461a      	mov	r2, r3
 8002c04:	2310      	movs	r3, #16
 8002c06:	6093      	str	r3, [r2, #8]
}
 8002c08:	bf00      	nop
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d119      	bne.n	8002c74 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2304      	movs	r3, #4
 8002c50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	0151      	lsls	r1, r2, #5
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	440a      	add	r2, r1
 8002c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002c72:	e3c6      	b.n	8003402 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d13e      	bne.n	8002d08 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c96:	461a      	mov	r2, r3
 8002c98:	2320      	movs	r3, #32
 8002c9a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	333d      	adds	r3, #61	; 0x3d
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	f040 83a8 	bne.w	8003402 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	333d      	adds	r3, #61	; 0x3d
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3360      	adds	r3, #96	; 0x60
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	0151      	lsls	r1, r2, #5
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	440a      	add	r2, r1
 8002cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf0:	f043 0302 	orr.w	r3, r3, #2
 8002cf4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f004 fab6 	bl	8007272 <USB_HC_Halt>
}
 8002d06:	e37c      	b.n	8003402 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d1e:	d122      	bne.n	8002d66 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	0151      	lsls	r1, r2, #5
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	440a      	add	r2, r1
 8002d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f004 fa91 	bl	8007272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d62:	6093      	str	r3, [r2, #8]
}
 8002d64:	e34d      	b.n	8003402 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d150      	bne.n	8002e1e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	335c      	adds	r3, #92	; 0x5c
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d111      	bne.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	333d      	adds	r3, #61	; 0x3d
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2340      	movs	r3, #64	; 0x40
 8002dc6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	0151      	lsls	r1, r2, #5
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	440a      	add	r2, r1
 8002dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002de2:	f043 0302 	orr.w	r3, r3, #2
 8002de6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f004 fa3d 	bl	8007272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	461a      	mov	r2, r3
 8002e06:	2301      	movs	r3, #1
 8002e08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	3361      	adds	r3, #97	; 0x61
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
}
 8002e1c:	e2f1      	b.n	8003402 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d13c      	bne.n	8002eae <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3361      	adds	r3, #97	; 0x61
 8002e42:	2204      	movs	r2, #4
 8002e44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	333d      	adds	r3, #61	; 0x3d
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	335c      	adds	r3, #92	; 0x5c
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	0151      	lsls	r1, r2, #5
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	440a      	add	r2, r1
 8002e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f004 f9ec 	bl	8007272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2340      	movs	r3, #64	; 0x40
 8002eaa:	6093      	str	r3, [r2, #8]
}
 8002eac:	e2a9      	b.n	8003402 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d12a      	bne.n	8002f1a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	0151      	lsls	r1, r2, #5
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	440a      	add	r2, r1
 8002eec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f004 f9b6 	bl	8007272 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3361      	adds	r3, #97	; 0x61
 8002f14:	2205      	movs	r2, #5
 8002f16:	701a      	strb	r2, [r3, #0]
}
 8002f18:	e273      	b.n	8003402 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b10      	cmp	r3, #16
 8002f2e:	d150      	bne.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	335c      	adds	r3, #92	; 0x5c
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3361      	adds	r3, #97	; 0x61
 8002f50:	2203      	movs	r2, #3
 8002f52:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	212c      	movs	r1, #44	; 0x2c
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	333d      	adds	r3, #61	; 0x3d
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d112      	bne.n	8002f8e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	212c      	movs	r1, #44	; 0x2c
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	333c      	adds	r3, #60	; 0x3c
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d108      	bne.n	8002f8e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	333d      	adds	r3, #61	; 0x3d
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	0151      	lsls	r1, r2, #5
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	440a      	add	r2, r1
 8002fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f004 f95a 	bl	8007272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2310      	movs	r3, #16
 8002fce:	6093      	str	r3, [r2, #8]
}
 8002fd0:	e217      	b.n	8003402 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d174      	bne.n	80030d2 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d121      	bne.n	8003034 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3361      	adds	r3, #97	; 0x61
 8002ffe:	2206      	movs	r2, #6
 8003000:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	0151      	lsls	r1, r2, #5
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	440a      	add	r2, r1
 8003018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f004 f920 	bl	8007272 <USB_HC_Halt>
 8003032:	e044      	b.n	80030be <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	335c      	adds	r3, #92	; 0x5c
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	202c      	movs	r0, #44	; 0x2c
 800304c:	fb00 f303 	mul.w	r3, r0, r3
 8003050:	440b      	add	r3, r1
 8003052:	335c      	adds	r3, #92	; 0x5c
 8003054:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	335c      	adds	r3, #92	; 0x5c
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d920      	bls.n	80030ac <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	335c      	adds	r3, #92	; 0x5c
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3360      	adds	r3, #96	; 0x60
 800308a:	2204      	movs	r2, #4
 800308c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	b2d9      	uxtb	r1, r3
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	202c      	movs	r0, #44	; 0x2c
 8003098:	fb00 f303 	mul.w	r3, r0, r3
 800309c:	4413      	add	r3, r2
 800309e:	3360      	adds	r3, #96	; 0x60
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f009 fc71 	bl	800c98c <HAL_HCD_HC_NotifyURBChange_Callback>
 80030aa:	e008      	b.n	80030be <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	3360      	adds	r3, #96	; 0x60
 80030ba:	2202      	movs	r2, #2
 80030bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ca:	461a      	mov	r2, r3
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	6093      	str	r3, [r2, #8]
}
 80030d0:	e197      	b.n	8003402 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e8:	d134      	bne.n	8003154 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	0151      	lsls	r1, r2, #5
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	440a      	add	r2, r1
 8003100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f004 f8ac 	bl	8007272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	461a      	mov	r2, r3
 8003128:	2310      	movs	r3, #16
 800312a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	461a      	mov	r2, r3
 800313a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800313e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	3361      	adds	r3, #97	; 0x61
 800314e:	2208      	movs	r2, #8
 8003150:	701a      	strb	r2, [r3, #0]
}
 8003152:	e156      	b.n	8003402 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b02      	cmp	r3, #2
 8003168:	f040 814b 	bne.w	8003402 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	0151      	lsls	r1, r2, #5
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	440a      	add	r2, r1
 8003182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003186:	f023 0302 	bic.w	r3, r3, #2
 800318a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3361      	adds	r3, #97	; 0x61
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d179      	bne.n	8003294 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3360      	adds	r3, #96	; 0x60
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	333f      	adds	r3, #63	; 0x3f
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d00a      	beq.n	80031dc <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	212c      	movs	r1, #44	; 0x2c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	333f      	adds	r3, #63	; 0x3f
 80031d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	f040 80fc 	bne.w	80033d4 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d142      	bne.n	800326a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	334c      	adds	r3, #76	; 0x4c
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80ed 	beq.w	80033d4 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	334c      	adds	r3, #76	; 0x4c
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	202c      	movs	r0, #44	; 0x2c
 8003210:	fb00 f202 	mul.w	r2, r0, r2
 8003214:	440a      	add	r2, r1
 8003216:	3240      	adds	r2, #64	; 0x40
 8003218:	8812      	ldrh	r2, [r2, #0]
 800321a:	4413      	add	r3, r2
 800321c:	3b01      	subs	r3, #1
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	202c      	movs	r0, #44	; 0x2c
 8003224:	fb00 f202 	mul.w	r2, r0, r2
 8003228:	440a      	add	r2, r1
 800322a:	3240      	adds	r2, #64	; 0x40
 800322c:	8812      	ldrh	r2, [r2, #0]
 800322e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80ca 	beq.w	80033d4 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3355      	adds	r3, #85	; 0x55
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	f083 0301 	eor.w	r3, r3, #1
 8003254:	b2d8      	uxtb	r0, r3
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3355      	adds	r3, #85	; 0x55
 8003264:	4602      	mov	r2, r0
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e0b4      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3355      	adds	r3, #85	; 0x55
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	f083 0301 	eor.w	r3, r3, #1
 800327e:	b2d8      	uxtb	r0, r3
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	3355      	adds	r3, #85	; 0x55
 800328e:	4602      	mov	r2, r0
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e09f      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	3361      	adds	r3, #97	; 0x61
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d109      	bne.n	80032bc <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3360      	adds	r3, #96	; 0x60
 80032b6:	2202      	movs	r2, #2
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e08b      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	3361      	adds	r3, #97	; 0x61
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d109      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4413      	add	r3, r2
 80032dc:	3360      	adds	r3, #96	; 0x60
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e077      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	212c      	movs	r1, #44	; 0x2c
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	3361      	adds	r3, #97	; 0x61
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d109      	bne.n	800330c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	3360      	adds	r3, #96	; 0x60
 8003306:	2205      	movs	r2, #5
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	e063      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	3361      	adds	r3, #97	; 0x61
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b06      	cmp	r3, #6
 800331e:	d009      	beq.n	8003334 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3361      	adds	r3, #97	; 0x61
 800332e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003330:	2b08      	cmp	r3, #8
 8003332:	d14f      	bne.n	80033d4 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	335c      	adds	r3, #92	; 0x5c
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	202c      	movs	r0, #44	; 0x2c
 800334c:	fb00 f303 	mul.w	r3, r0, r3
 8003350:	440b      	add	r3, r1
 8003352:	335c      	adds	r3, #92	; 0x5c
 8003354:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	335c      	adds	r3, #92	; 0x5c
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d912      	bls.n	8003390 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	335c      	adds	r3, #92	; 0x5c
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3360      	adds	r3, #96	; 0x60
 800338a:	2204      	movs	r2, #4
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e021      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	212c      	movs	r1, #44	; 0x2c
 8003396:	fb01 f303 	mul.w	r3, r1, r3
 800339a:	4413      	add	r3, r2
 800339c:	3360      	adds	r3, #96	; 0x60
 800339e:	2202      	movs	r2, #2
 80033a0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033b8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033c0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	461a      	mov	r2, r3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e0:	461a      	mov	r2, r3
 80033e2:	2302      	movs	r3, #2
 80033e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	b2d9      	uxtb	r1, r3
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	202c      	movs	r0, #44	; 0x2c
 80033f0:	fb00 f303 	mul.w	r3, r0, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3360      	adds	r3, #96	; 0x60
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f009 fac5 	bl	800c98c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003402:	bf00      	nop
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b08a      	sub	sp, #40	; 0x28
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	0c5b      	lsrs	r3, r3, #17
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800343e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d004      	beq.n	8003450 <HCD_RXQLVL_IRQHandler+0x46>
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b05      	cmp	r3, #5
 800344a:	f000 80a9 	beq.w	80035a0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800344e:	e0aa      	b.n	80035a6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80a6 	beq.w	80035a4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3344      	adds	r3, #68	; 0x44
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 809b 	beq.w	80035a4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	3350      	adds	r3, #80	; 0x50
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	441a      	add	r2, r3
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	202c      	movs	r0, #44	; 0x2c
 8003488:	fb00 f303 	mul.w	r3, r0, r3
 800348c:	440b      	add	r3, r1
 800348e:	334c      	adds	r3, #76	; 0x4c
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d87a      	bhi.n	800358c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	3344      	adds	r3, #68	; 0x44
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	b292      	uxth	r2, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	f003 fa7d 	bl	80069ae <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	3344      	adds	r3, #68	; 0x44
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	441a      	add	r2, r3
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	202c      	movs	r0, #44	; 0x2c
 80034ce:	fb00 f303 	mul.w	r3, r0, r3
 80034d2:	440b      	add	r3, r1
 80034d4:	3344      	adds	r3, #68	; 0x44
 80034d6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	212c      	movs	r1, #44	; 0x2c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3350      	adds	r3, #80	; 0x50
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	441a      	add	r2, r3
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	202c      	movs	r0, #44	; 0x2c
 80034f2:	fb00 f303 	mul.w	r3, r0, r3
 80034f6:	440b      	add	r3, r1
 80034f8:	3350      	adds	r3, #80	; 0x50
 80034fa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	0cdb      	lsrs	r3, r3, #19
 800350c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003510:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	212c      	movs	r1, #44	; 0x2c
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	4413      	add	r3, r2
 800351e:	3340      	adds	r3, #64	; 0x40
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4293      	cmp	r3, r2
 8003528:	d13c      	bne.n	80035a4 <HCD_RXQLVL_IRQHandler+0x19a>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d039      	beq.n	80035a4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003546:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800354e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355c:	461a      	mov	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	212c      	movs	r1, #44	; 0x2c
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	4413      	add	r3, r2
 800356e:	3354      	adds	r3, #84	; 0x54
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	f083 0301 	eor.w	r3, r3, #1
 8003576:	b2d8      	uxtb	r0, r3
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	212c      	movs	r1, #44	; 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	3354      	adds	r3, #84	; 0x54
 8003586:	4602      	mov	r2, r0
 8003588:	701a      	strb	r2, [r3, #0]
      break;
 800358a:	e00b      	b.n	80035a4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	212c      	movs	r1, #44	; 0x2c
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	4413      	add	r3, r2
 8003598:	3360      	adds	r3, #96	; 0x60
 800359a:	2204      	movs	r2, #4
 800359c:	701a      	strb	r2, [r3, #0]
      break;
 800359e:	e001      	b.n	80035a4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80035a0:	bf00      	nop
 80035a2:	e000      	b.n	80035a6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80035a4:	bf00      	nop
  }
}
 80035a6:	bf00      	nop
 80035a8:	3728      	adds	r7, #40	; 0x28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035da:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d10b      	bne.n	80035fe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d102      	bne.n	80035f6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f009 f9af 	bl	800c954 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f043 0302 	orr.w	r3, r3, #2
 80035fc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b08      	cmp	r3, #8
 8003606:	d132      	bne.n	800366e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f043 0308 	orr.w	r3, r3, #8
 800360e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b04      	cmp	r3, #4
 8003618:	d126      	bne.n	8003668 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d113      	bne.n	800364a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003628:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800362c:	d106      	bne.n	800363c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2102      	movs	r1, #2
 8003634:	4618      	mov	r0, r3
 8003636:	f003 faf5 	bl	8006c24 <USB_InitFSLSPClkSel>
 800363a:	e011      	b.n	8003660 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f003 faee 	bl	8006c24 <USB_InitFSLSPClkSel>
 8003648:	e00a      	b.n	8003660 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d106      	bne.n	8003660 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003658:	461a      	mov	r2, r3
 800365a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800365e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f009 f9a5 	bl	800c9b0 <HAL_HCD_PortEnabled_Callback>
 8003666:	e002      	b.n	800366e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f009 f9af 	bl	800c9cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0320 	and.w	r3, r3, #32
 8003674:	2b20      	cmp	r3, #32
 8003676:	d103      	bne.n	8003680 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f043 0320 	orr.w	r3, r3, #32
 800367e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003686:	461a      	mov	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	bf00      	nop
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e12b      	b.n	80038fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd fca6 	bl	800100c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036f8:	f001 fe32 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80036fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4a81      	ldr	r2, [pc, #516]	; (8003908 <HAL_I2C_Init+0x274>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d807      	bhi.n	8003718 <HAL_I2C_Init+0x84>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a80      	ldr	r2, [pc, #512]	; (800390c <HAL_I2C_Init+0x278>)
 800370c:	4293      	cmp	r3, r2
 800370e:	bf94      	ite	ls
 8003710:	2301      	movls	r3, #1
 8003712:	2300      	movhi	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e006      	b.n	8003726 <HAL_I2C_Init+0x92>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a7d      	ldr	r2, [pc, #500]	; (8003910 <HAL_I2C_Init+0x27c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	bf94      	ite	ls
 8003720:	2301      	movls	r3, #1
 8003722:	2300      	movhi	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e0e7      	b.n	80038fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a78      	ldr	r2, [pc, #480]	; (8003914 <HAL_I2C_Init+0x280>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0c9b      	lsrs	r3, r3, #18
 8003738:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a6a      	ldr	r2, [pc, #424]	; (8003908 <HAL_I2C_Init+0x274>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d802      	bhi.n	8003768 <HAL_I2C_Init+0xd4>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3301      	adds	r3, #1
 8003766:	e009      	b.n	800377c <HAL_I2C_Init+0xe8>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	4a69      	ldr	r2, [pc, #420]	; (8003918 <HAL_I2C_Init+0x284>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	3301      	adds	r3, #1
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800378e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	495c      	ldr	r1, [pc, #368]	; (8003908 <HAL_I2C_Init+0x274>)
 8003798:	428b      	cmp	r3, r1
 800379a:	d819      	bhi.n	80037d0 <HAL_I2C_Init+0x13c>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1e59      	subs	r1, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037aa:	1c59      	adds	r1, r3, #1
 80037ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037b0:	400b      	ands	r3, r1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_I2C_Init+0x138>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1e59      	subs	r1, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ca:	e051      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 80037cc:	2304      	movs	r3, #4
 80037ce:	e04f      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d111      	bne.n	80037fc <HAL_I2C_Init+0x168>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e58      	subs	r0, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e012      	b.n	8003822 <HAL_I2C_Init+0x18e>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e58      	subs	r0, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	0099      	lsls	r1, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003812:	3301      	adds	r3, #1
 8003814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Init+0x196>
 8003826:	2301      	movs	r3, #1
 8003828:	e022      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10e      	bne.n	8003850 <HAL_I2C_Init+0x1bc>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1e58      	subs	r0, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	460b      	mov	r3, r1
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	440b      	add	r3, r1
 8003840:	fbb0 f3f3 	udiv	r3, r0, r3
 8003844:	3301      	adds	r3, #1
 8003846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384e:	e00f      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	0099      	lsls	r1, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	6809      	ldr	r1, [r1, #0]
 8003874:	4313      	orrs	r3, r2
 8003876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800389e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6911      	ldr	r1, [r2, #16]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68d2      	ldr	r2, [r2, #12]
 80038aa:	4311      	orrs	r1, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	000186a0 	.word	0x000186a0
 800390c:	001e847f 	.word	0x001e847f
 8003910:	003d08ff 	.word	0x003d08ff
 8003914:	431bde83 	.word	0x431bde83
 8003918:	10624dd3 	.word	0x10624dd3

0800391c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	461a      	mov	r2, r3
 8003928:	460b      	mov	r3, r1
 800392a:	817b      	strh	r3, [r7, #10]
 800392c:	4613      	mov	r3, r2
 800392e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003930:	f7fd fdf2 	bl	8001518 <HAL_GetTick>
 8003934:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b20      	cmp	r3, #32
 8003940:	f040 80e0 	bne.w	8003b04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2319      	movs	r3, #25
 800394a:	2201      	movs	r2, #1
 800394c:	4970      	ldr	r1, [pc, #448]	; (8003b10 <HAL_I2C_Master_Transmit+0x1f4>)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fa92 	bl	8003e78 <I2C_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	e0d3      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_I2C_Master_Transmit+0x50>
 8003968:	2302      	movs	r3, #2
 800396a:	e0cc      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d007      	beq.n	8003992 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2221      	movs	r2, #33	; 0x21
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2210      	movs	r2, #16
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	893a      	ldrh	r2, [r7, #8]
 80039c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a50      	ldr	r2, [pc, #320]	; (8003b14 <HAL_I2C_Master_Transmit+0x1f8>)
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039d4:	8979      	ldrh	r1, [r7, #10]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f9ca 	bl	8003d74 <I2C_MasterRequestWrite>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e08d      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a00:	e066      	b.n	8003ad0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	6a39      	ldr	r1, [r7, #32]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fb0c 	bl	8004024 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d107      	bne.n	8003a2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e06b      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d11b      	bne.n	8003aa4 <HAL_I2C_Master_Transmit+0x188>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d017      	beq.n	8003aa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	6a39      	ldr	r1, [r7, #32]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fafc 	bl	80040a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d107      	bne.n	8003acc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e01a      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d194      	bne.n	8003a02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	00100002 	.word	0x00100002
 8003b14:	ffff0000 	.word	0xffff0000

08003b18 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	460b      	mov	r3, r1
 8003b26:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003b28:	f7fd fcf6 	bl	8001518 <HAL_GetTick>
 8003b2c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	f040 8111 	bne.w	8003d62 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2319      	movs	r3, #25
 8003b46:	2201      	movs	r2, #1
 8003b48:	4988      	ldr	r1, [pc, #544]	; (8003d6c <HAL_I2C_IsDeviceReady+0x254>)
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f994 	bl	8003e78 <I2C_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
 8003b58:	e104      	b.n	8003d64 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_I2C_IsDeviceReady+0x50>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e0fd      	b.n	8003d64 <HAL_I2C_IsDeviceReady+0x24c>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d007      	beq.n	8003b8e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2224      	movs	r2, #36	; 0x24
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a70      	ldr	r2, [pc, #448]	; (8003d70 <HAL_I2C_IsDeviceReady+0x258>)
 8003bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f952 	bl	8003e78 <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00d      	beq.n	8003bf6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be8:	d103      	bne.n	8003bf2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e0b6      	b.n	8003d64 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bf6:	897b      	ldrh	r3, [r7, #10]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c04:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c06:	f7fd fc87 	bl	8001518 <HAL_GetTick>
 8003c0a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c30:	bf0c      	ite	eq
 8003c32:	2301      	moveq	r3, #1
 8003c34:	2300      	movne	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c3a:	e025      	b.n	8003c88 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c3c:	f7fd fc6c 	bl	8001518 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <HAL_I2C_IsDeviceReady+0x13a>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	22a0      	movs	r2, #160	; 0xa0
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2ba0      	cmp	r3, #160	; 0xa0
 8003c92:	d005      	beq.n	8003ca0 <HAL_I2C_IsDeviceReady+0x188>
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <HAL_I2C_IsDeviceReady+0x188>
 8003c9a:	7dbb      	ldrb	r3, [r7, #22]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0cd      	beq.n	8003c3c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d129      	bne.n	8003d0a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	2319      	movs	r3, #25
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	4921      	ldr	r1, [pc, #132]	; (8003d6c <HAL_I2C_IsDeviceReady+0x254>)
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f8c6 	bl	8003e78 <I2C_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e036      	b.n	8003d64 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e02c      	b.n	8003d64 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d18:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d22:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2319      	movs	r3, #25
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	490f      	ldr	r1, [pc, #60]	; (8003d6c <HAL_I2C_IsDeviceReady+0x254>)
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f8a2 	bl	8003e78 <I2C_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e012      	b.n	8003d64 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	3301      	adds	r3, #1
 8003d42:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	f4ff af32 	bcc.w	8003bb2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
  }
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	00100002 	.word	0x00100002
 8003d70:	ffff0000 	.word	0xffff0000

08003d74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	460b      	mov	r3, r1
 8003d82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d006      	beq.n	8003d9e <I2C_MasterRequestWrite+0x2a>
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d003      	beq.n	8003d9e <I2C_MasterRequestWrite+0x2a>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d9c:	d108      	bne.n	8003db0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	e00b      	b.n	8003dc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	2b12      	cmp	r3, #18
 8003db6:	d107      	bne.n	8003dc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f84f 	bl	8003e78 <I2C_WaitOnFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dee:	d103      	bne.n	8003df8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e035      	b.n	8003e68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e04:	d108      	bne.n	8003e18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e06:	897b      	ldrh	r3, [r7, #10]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e14:	611a      	str	r2, [r3, #16]
 8003e16:	e01b      	b.n	8003e50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e18:	897b      	ldrh	r3, [r7, #10]
 8003e1a:	11db      	asrs	r3, r3, #7
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f003 0306 	and.w	r3, r3, #6
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f063 030f 	orn	r3, r3, #15
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	490e      	ldr	r1, [pc, #56]	; (8003e70 <I2C_MasterRequestWrite+0xfc>)
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f875 	bl	8003f26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e010      	b.n	8003e68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e46:	897b      	ldrh	r3, [r7, #10]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4907      	ldr	r1, [pc, #28]	; (8003e74 <I2C_MasterRequestWrite+0x100>)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f865 	bl	8003f26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	00010008 	.word	0x00010008
 8003e74:	00010002 	.word	0x00010002

08003e78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e88:	e025      	b.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e90:	d021      	beq.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e92:	f7fd fb41 	bl	8001518 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d302      	bcc.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d116      	bne.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f043 0220 	orr.w	r2, r3, #32
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e023      	b.n	8003f1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	0c1b      	lsrs	r3, r3, #16
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d10d      	bne.n	8003efc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4013      	ands	r3, r2
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2301      	moveq	r3, #1
 8003ef4:	2300      	movne	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	e00c      	b.n	8003f16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	43da      	mvns	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4013      	ands	r3, r2
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf0c      	ite	eq
 8003f0e:	2301      	moveq	r3, #1
 8003f10:	2300      	movne	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d0b6      	beq.n	8003e8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f34:	e051      	b.n	8003fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f44:	d123      	bne.n	8003f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f043 0204 	orr.w	r2, r3, #4
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e046      	b.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f94:	d021      	beq.n	8003fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f96:	f7fd fabf 	bl	8001518 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d302      	bcc.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d116      	bne.n	8003fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f043 0220 	orr.w	r2, r3, #32
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e020      	b.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d10c      	bne.n	8003ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	43da      	mvns	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bf14      	ite	ne
 8003ff6:	2301      	movne	r3, #1
 8003ff8:	2300      	moveq	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e00b      	b.n	8004016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	43da      	mvns	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf14      	ite	ne
 8004010:	2301      	movne	r3, #1
 8004012:	2300      	moveq	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d18d      	bne.n	8003f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004030:	e02d      	b.n	800408e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f878 	bl	8004128 <I2C_IsAcknowledgeFailed>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e02d      	b.n	800409e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004048:	d021      	beq.n	800408e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fd fa65 	bl	8001518 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d116      	bne.n	800408e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f043 0220 	orr.w	r2, r3, #32
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e007      	b.n	800409e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004098:	2b80      	cmp	r3, #128	; 0x80
 800409a:	d1ca      	bne.n	8004032 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040b2:	e02d      	b.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f837 	bl	8004128 <I2C_IsAcknowledgeFailed>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e02d      	b.n	8004120 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ca:	d021      	beq.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040cc:	f7fd fa24 	bl	8001518 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d302      	bcc.n	80040e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d116      	bne.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e007      	b.n	8004120 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b04      	cmp	r3, #4
 800411c:	d1ca      	bne.n	80040b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413e:	d11b      	bne.n	8004178 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004148:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f043 0204 	orr.w	r2, r3, #4
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e128      	b.n	80043ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a90      	ldr	r2, [pc, #576]	; (80043f4 <HAL_I2S_Init+0x26c>)
 80041b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7fc ff71 	bl	800109c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041d0:	f023 030f 	bic.w	r3, r3, #15
 80041d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2202      	movs	r2, #2
 80041dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d060      	beq.n	80042a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80041ee:	2310      	movs	r3, #16
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	e001      	b.n	80041f8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80041f4:	2320      	movs	r3, #32
 80041f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d802      	bhi.n	8004206 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004206:	2001      	movs	r0, #1
 8004208:	f001 f9e6 	bl	80055d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800420c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004216:	d125      	bne.n	8004264 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d010      	beq.n	8004242 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	fbb2 f2f3 	udiv	r2, r2, r3
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	461a      	mov	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	fbb2 f3f3 	udiv	r3, r2, r3
 800423c:	3305      	adds	r3, #5
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	e01f      	b.n	8004282 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	fbb2 f2f3 	udiv	r2, r2, r3
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	461a      	mov	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	3305      	adds	r3, #5
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	e00e      	b.n	8004282 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	fbb2 f2f3 	udiv	r2, r2, r3
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	461a      	mov	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	3305      	adds	r3, #5
 8004280:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4a5c      	ldr	r2, [pc, #368]	; (80043f8 <HAL_I2S_Init+0x270>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	08db      	lsrs	r3, r3, #3
 800428c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	e003      	b.n	80042b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80042a8:	2302      	movs	r3, #2
 80042aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d902      	bls.n	80042bc <HAL_I2S_Init+0x134>
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	2bff      	cmp	r3, #255	; 0xff
 80042ba:	d907      	bls.n	80042cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c0:	f043 0210 	orr.w	r2, r3, #16
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e08f      	b.n	80043ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	ea42 0103 	orr.w	r1, r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	430a      	orrs	r2, r1
 80042de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80042ea:	f023 030f 	bic.w	r3, r3, #15
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6851      	ldr	r1, [r2, #4]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6892      	ldr	r2, [r2, #8]
 80042f6:	4311      	orrs	r1, r2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	68d2      	ldr	r2, [r2, #12]
 80042fc:	4311      	orrs	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6992      	ldr	r2, [r2, #24]
 8004302:	430a      	orrs	r2, r1
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800430e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d161      	bne.n	80043dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a38      	ldr	r2, [pc, #224]	; (80043fc <HAL_I2S_Init+0x274>)
 800431c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a37      	ldr	r2, [pc, #220]	; (8004400 <HAL_I2S_Init+0x278>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d101      	bne.n	800432c <HAL_I2S_Init+0x1a4>
 8004328:	4b36      	ldr	r3, [pc, #216]	; (8004404 <HAL_I2S_Init+0x27c>)
 800432a:	e001      	b.n	8004330 <HAL_I2S_Init+0x1a8>
 800432c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	4932      	ldr	r1, [pc, #200]	; (8004400 <HAL_I2S_Init+0x278>)
 8004338:	428a      	cmp	r2, r1
 800433a:	d101      	bne.n	8004340 <HAL_I2S_Init+0x1b8>
 800433c:	4a31      	ldr	r2, [pc, #196]	; (8004404 <HAL_I2S_Init+0x27c>)
 800433e:	e001      	b.n	8004344 <HAL_I2S_Init+0x1bc>
 8004340:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004344:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004348:	f023 030f 	bic.w	r3, r3, #15
 800434c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <HAL_I2S_Init+0x278>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d101      	bne.n	800435c <HAL_I2S_Init+0x1d4>
 8004358:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <HAL_I2S_Init+0x27c>)
 800435a:	e001      	b.n	8004360 <HAL_I2S_Init+0x1d8>
 800435c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004360:	2202      	movs	r2, #2
 8004362:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a25      	ldr	r2, [pc, #148]	; (8004400 <HAL_I2S_Init+0x278>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <HAL_I2S_Init+0x1ea>
 800436e:	4b25      	ldr	r3, [pc, #148]	; (8004404 <HAL_I2S_Init+0x27c>)
 8004370:	e001      	b.n	8004376 <HAL_I2S_Init+0x1ee>
 8004372:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004382:	d003      	beq.n	800438c <HAL_I2S_Init+0x204>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800438c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	e001      	b.n	8004398 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80043a2:	4313      	orrs	r3, r2
 80043a4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80043ac:	4313      	orrs	r3, r2
 80043ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80043b6:	4313      	orrs	r3, r2
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	897b      	ldrh	r3, [r7, #10]
 80043bc:	4313      	orrs	r3, r2
 80043be:	b29b      	uxth	r3, r3
 80043c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <HAL_I2S_Init+0x278>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d101      	bne.n	80043d4 <HAL_I2S_Init+0x24c>
 80043d0:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <HAL_I2S_Init+0x27c>)
 80043d2:	e001      	b.n	80043d8 <HAL_I2S_Init+0x250>
 80043d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043d8:	897a      	ldrh	r2, [r7, #10]
 80043da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	080044ff 	.word	0x080044ff
 80043f8:	cccccccd 	.word	0xcccccccd
 80043fc:	08004615 	.word	0x08004615
 8004400:	40003800 	.word	0x40003800
 8004404:	40003400 	.word	0x40003400

08004408 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	881a      	ldrh	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	1c9a      	adds	r2, r3, #2
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10e      	bne.n	8004498 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004488:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ffb8 	bl	8004408 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	b292      	uxth	r2, r2
 80044b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	1c9a      	adds	r2, r3, #2
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10e      	bne.n	80044f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff93 	bl	800441c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b086      	sub	sp, #24
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b04      	cmp	r3, #4
 8004518:	d13a      	bne.n	8004590 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b01      	cmp	r3, #1
 8004522:	d109      	bne.n	8004538 <I2S_IRQHandler+0x3a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452e:	2b40      	cmp	r3, #64	; 0x40
 8004530:	d102      	bne.n	8004538 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ffb4 	bl	80044a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453e:	2b40      	cmp	r3, #64	; 0x40
 8004540:	d126      	bne.n	8004590 <I2S_IRQHandler+0x92>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b20      	cmp	r3, #32
 800454e:	d11f      	bne.n	8004590 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800455e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	f043 0202 	orr.w	r2, r3, #2
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff ff50 	bl	8004430 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b03      	cmp	r3, #3
 800459a:	d136      	bne.n	800460a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d109      	bne.n	80045ba <I2S_IRQHandler+0xbc>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	2b80      	cmp	r3, #128	; 0x80
 80045b2:	d102      	bne.n	80045ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ff45 	bl	8004444 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d122      	bne.n	800460a <I2S_IRQHandler+0x10c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d11b      	bne.n	800460a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fc:	f043 0204 	orr.w	r2, r3, #4
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff13 	bl	8004430 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800460a:	bf00      	nop
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4aa2      	ldr	r2, [pc, #648]	; (80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d101      	bne.n	8004632 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800462e:	4ba2      	ldr	r3, [pc, #648]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004630:	e001      	b.n	8004636 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004632:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a9b      	ldr	r2, [pc, #620]	; (80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d101      	bne.n	8004650 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800464c:	4b9a      	ldr	r3, [pc, #616]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800464e:	e001      	b.n	8004654 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004660:	d004      	beq.n	800466c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f040 8099 	bne.w	800479e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b02      	cmp	r3, #2
 8004674:	d107      	bne.n	8004686 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f925 	bl	80048d0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b01      	cmp	r3, #1
 800468e:	d107      	bne.n	80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f9c8 	bl	8004a30 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d13a      	bne.n	8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d035      	beq.n	8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a7e      	ldr	r2, [pc, #504]	; (80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80046be:	4b7e      	ldr	r3, [pc, #504]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046c0:	e001      	b.n	80046c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80046c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4979      	ldr	r1, [pc, #484]	; (80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80046ce:	428b      	cmp	r3, r1
 80046d0:	d101      	bne.n	80046d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80046d2:	4b79      	ldr	r3, [pc, #484]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80046d4:	e001      	b.n	80046da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80046d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004712:	f043 0202 	orr.w	r2, r3, #2
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff fe88 	bl	8004430 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b08      	cmp	r3, #8
 8004728:	f040 80be 	bne.w	80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80b8 	beq.w	80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004746:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a59      	ldr	r2, [pc, #356]	; (80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d101      	bne.n	8004756 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004752:	4b59      	ldr	r3, [pc, #356]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004754:	e001      	b.n	800475a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4954      	ldr	r1, [pc, #336]	; (80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004762:	428b      	cmp	r3, r1
 8004764:	d101      	bne.n	800476a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004766:	4b54      	ldr	r3, [pc, #336]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004768:	e001      	b.n	800476e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800476a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800476e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004772:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004774:	2300      	movs	r3, #0
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478e:	f043 0204 	orr.w	r2, r3, #4
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7ff fe4a 	bl	8004430 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800479c:	e084      	b.n	80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d107      	bne.n	80047b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8be 	bl	8004934 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d107      	bne.n	80047d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f8fd 	bl	80049cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d12f      	bne.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d02a      	beq.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2e      	ldr	r2, [pc, #184]	; (80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d101      	bne.n	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004800:	4b2d      	ldr	r3, [pc, #180]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004802:	e001      	b.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4929      	ldr	r1, [pc, #164]	; (80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004810:	428b      	cmp	r3, r1
 8004812:	d101      	bne.n	8004818 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004814:	4b28      	ldr	r3, [pc, #160]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004816:	e001      	b.n	800481c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004818:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800481c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004820:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	f043 0202 	orr.w	r2, r3, #2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fdfa 	bl	8004430 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b08      	cmp	r3, #8
 8004844:	d131      	bne.n	80048aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d02c      	beq.n	80048aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800485c:	e001      	b.n	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800485e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4912      	ldr	r1, [pc, #72]	; (80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800486a:	428b      	cmp	r3, r1
 800486c:	d101      	bne.n	8004872 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004870:	e001      	b.n	8004876 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004876:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800487a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800488a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004898:	f043 0204 	orr.w	r2, r3, #4
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff fdc5 	bl	8004430 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048a6:	e000      	b.n	80048aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048a8:	bf00      	nop
}
 80048aa:	bf00      	nop
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40003800 	.word	0x40003800
 80048b8:	40003400 	.word	0x40003400

080048bc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	1c99      	adds	r1, r3, #2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6251      	str	r1, [r2, #36]	; 0x24
 80048e2:	881a      	ldrh	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d113      	bne.n	800492a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004910:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ffc9 	bl	80048bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	1c99      	adds	r1, r3, #2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6251      	str	r1, [r2, #36]	; 0x24
 8004946:	8819      	ldrh	r1, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <I2SEx_TxISR_I2SExt+0x90>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d101      	bne.n	8004956 <I2SEx_TxISR_I2SExt+0x22>
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <I2SEx_TxISR_I2SExt+0x94>)
 8004954:	e001      	b.n	800495a <I2SEx_TxISR_I2SExt+0x26>
 8004956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800495a:	460a      	mov	r2, r1
 800495c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d121      	bne.n	80049ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a12      	ldr	r2, [pc, #72]	; (80049c4 <I2SEx_TxISR_I2SExt+0x90>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d101      	bne.n	8004984 <I2SEx_TxISR_I2SExt+0x50>
 8004980:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <I2SEx_TxISR_I2SExt+0x94>)
 8004982:	e001      	b.n	8004988 <I2SEx_TxISR_I2SExt+0x54>
 8004984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	490d      	ldr	r1, [pc, #52]	; (80049c4 <I2SEx_TxISR_I2SExt+0x90>)
 8004990:	428b      	cmp	r3, r1
 8004992:	d101      	bne.n	8004998 <I2SEx_TxISR_I2SExt+0x64>
 8004994:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <I2SEx_TxISR_I2SExt+0x94>)
 8004996:	e001      	b.n	800499c <I2SEx_TxISR_I2SExt+0x68>
 8004998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800499c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff ff81 	bl	80048bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40003800 	.word	0x40003800
 80049c8:	40003400 	.word	0x40003400

080049cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68d8      	ldr	r0, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	1c99      	adds	r1, r3, #2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80049e4:	b282      	uxth	r2, r0
 80049e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d113      	bne.n	8004a28 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a0e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff ff4a 	bl	80048bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a20      	ldr	r2, [pc, #128]	; (8004ac0 <I2SEx_RxISR_I2SExt+0x90>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d101      	bne.n	8004a46 <I2SEx_RxISR_I2SExt+0x16>
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <I2SEx_RxISR_I2SExt+0x94>)
 8004a44:	e001      	b.n	8004a4a <I2SEx_RxISR_I2SExt+0x1a>
 8004a46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a4a:	68d8      	ldr	r0, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	1c99      	adds	r1, r3, #2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004a56:	b282      	uxth	r2, r0
 8004a58:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d121      	bne.n	8004ab6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a12      	ldr	r2, [pc, #72]	; (8004ac0 <I2SEx_RxISR_I2SExt+0x90>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d101      	bne.n	8004a80 <I2SEx_RxISR_I2SExt+0x50>
 8004a7c:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <I2SEx_RxISR_I2SExt+0x94>)
 8004a7e:	e001      	b.n	8004a84 <I2SEx_RxISR_I2SExt+0x54>
 8004a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	490d      	ldr	r1, [pc, #52]	; (8004ac0 <I2SEx_RxISR_I2SExt+0x90>)
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	d101      	bne.n	8004a94 <I2SEx_RxISR_I2SExt+0x64>
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <I2SEx_RxISR_I2SExt+0x94>)
 8004a92:	e001      	b.n	8004a98 <I2SEx_RxISR_I2SExt+0x68>
 8004a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a9c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff ff03 	bl	80048bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40003800 	.word	0x40003800
 8004ac4:	40003400 	.word	0x40003400

08004ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e264      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d075      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ae6:	4ba3      	ldr	r3, [pc, #652]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d00c      	beq.n	8004b0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af2:	4ba0      	ldr	r3, [pc, #640]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d112      	bne.n	8004b24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afe:	4b9d      	ldr	r3, [pc, #628]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b0a:	d10b      	bne.n	8004b24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0c:	4b99      	ldr	r3, [pc, #612]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d05b      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x108>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d157      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e23f      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2c:	d106      	bne.n	8004b3c <HAL_RCC_OscConfig+0x74>
 8004b2e:	4b91      	ldr	r3, [pc, #580]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a90      	ldr	r2, [pc, #576]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e01d      	b.n	8004b78 <HAL_RCC_OscConfig+0xb0>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x98>
 8004b46:	4b8b      	ldr	r3, [pc, #556]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a8a      	ldr	r2, [pc, #552]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b88      	ldr	r3, [pc, #544]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a87      	ldr	r2, [pc, #540]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCC_OscConfig+0xb0>
 8004b60:	4b84      	ldr	r3, [pc, #528]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a83      	ldr	r2, [pc, #524]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4b81      	ldr	r3, [pc, #516]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a80      	ldr	r2, [pc, #512]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fc fcca 	bl	8001518 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fc fcc6 	bl	8001518 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e204      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b76      	ldr	r3, [pc, #472]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0xc0>
 8004ba6:	e014      	b.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fc fcb6 	bl	8001518 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fc fcb2 	bl	8001518 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e1f0      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	4b6c      	ldr	r3, [pc, #432]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0xe8>
 8004bce:	e000      	b.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d063      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bde:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b62      	ldr	r3, [pc, #392]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d11c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf6:	4b5f      	ldr	r3, [pc, #380]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d116      	bne.n	8004c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	4b5c      	ldr	r3, [pc, #368]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x152>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e1c4      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	4b56      	ldr	r3, [pc, #344]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4952      	ldr	r1, [pc, #328]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	e03a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d020      	beq.n	8004c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c38:	4b4f      	ldr	r3, [pc, #316]	; (8004d78 <HAL_RCC_OscConfig+0x2b0>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fc fc6b 	bl	8001518 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c46:	f7fc fc67 	bl	8001518 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e1a5      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c58:	4b46      	ldr	r3, [pc, #280]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c64:	4b43      	ldr	r3, [pc, #268]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4940      	ldr	r1, [pc, #256]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]
 8004c78:	e015      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7a:	4b3f      	ldr	r3, [pc, #252]	; (8004d78 <HAL_RCC_OscConfig+0x2b0>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fc fc4a 	bl	8001518 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c88:	f7fc fc46 	bl	8001518 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e184      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9a:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d030      	beq.n	8004d14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cba:	4b30      	ldr	r3, [pc, #192]	; (8004d7c <HAL_RCC_OscConfig+0x2b4>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc0:	f7fc fc2a 	bl	8001518 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cc8:	f7fc fc26 	bl	8001518 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e164      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cda:	4b26      	ldr	r3, [pc, #152]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x200>
 8004ce6:	e015      	b.n	8004d14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce8:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <HAL_RCC_OscConfig+0x2b4>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cee:	f7fc fc13 	bl	8001518 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cf6:	f7fc fc0f 	bl	8001518 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e14d      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d08:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80a0 	beq.w	8004e62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d22:	2300      	movs	r3, #0
 8004d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d26:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	4a0e      	ldr	r2, [pc, #56]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d40:	6413      	str	r3, [r2, #64]	; 0x40
 8004d42:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <HAL_RCC_OscConfig+0x2ac>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d52:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCC_OscConfig+0x2b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d121      	bne.n	8004da2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <HAL_RCC_OscConfig+0x2b8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a07      	ldr	r2, [pc, #28]	; (8004d80 <HAL_RCC_OscConfig+0x2b8>)
 8004d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6a:	f7fc fbd5 	bl	8001518 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d70:	e011      	b.n	8004d96 <HAL_RCC_OscConfig+0x2ce>
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800
 8004d78:	42470000 	.word	0x42470000
 8004d7c:	42470e80 	.word	0x42470e80
 8004d80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d84:	f7fc fbc8 	bl	8001518 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e106      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b85      	ldr	r3, [pc, #532]	; (8004fac <HAL_RCC_OscConfig+0x4e4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d106      	bne.n	8004db8 <HAL_RCC_OscConfig+0x2f0>
 8004daa:	4b81      	ldr	r3, [pc, #516]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	4a80      	ldr	r2, [pc, #512]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70
 8004db6:	e01c      	b.n	8004df2 <HAL_RCC_OscConfig+0x32a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b05      	cmp	r3, #5
 8004dbe:	d10c      	bne.n	8004dda <HAL_RCC_OscConfig+0x312>
 8004dc0:	4b7b      	ldr	r3, [pc, #492]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a7a      	ldr	r2, [pc, #488]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dc6:	f043 0304 	orr.w	r3, r3, #4
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	4b78      	ldr	r3, [pc, #480]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	4a77      	ldr	r2, [pc, #476]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd8:	e00b      	b.n	8004df2 <HAL_RCC_OscConfig+0x32a>
 8004dda:	4b75      	ldr	r3, [pc, #468]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a74      	ldr	r2, [pc, #464]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
 8004de6:	4b72      	ldr	r3, [pc, #456]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a71      	ldr	r2, [pc, #452]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dec:	f023 0304 	bic.w	r3, r3, #4
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d015      	beq.n	8004e26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfa:	f7fc fb8d 	bl	8001518 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e02:	f7fc fb89 	bl	8001518 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e0c5      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e18:	4b65      	ldr	r3, [pc, #404]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0ee      	beq.n	8004e02 <HAL_RCC_OscConfig+0x33a>
 8004e24:	e014      	b.n	8004e50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e26:	f7fc fb77 	bl	8001518 <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7fc fb73 	bl	8001518 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e0af      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e44:	4b5a      	ldr	r3, [pc, #360]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ee      	bne.n	8004e2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d105      	bne.n	8004e62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e56:	4b56      	ldr	r3, [pc, #344]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	4a55      	ldr	r2, [pc, #340]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 809b 	beq.w	8004fa2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e6c:	4b50      	ldr	r3, [pc, #320]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 030c 	and.w	r3, r3, #12
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d05c      	beq.n	8004f32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d141      	bne.n	8004f04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e80:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <HAL_RCC_OscConfig+0x4ec>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e86:	f7fc fb47 	bl	8001518 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8e:	f7fc fb43 	bl	8001518 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e081      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea0:	4b43      	ldr	r3, [pc, #268]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	019b      	lsls	r3, r3, #6
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	061b      	lsls	r3, r3, #24
 8004ed0:	4937      	ldr	r1, [pc, #220]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed6:	4b37      	ldr	r3, [pc, #220]	; (8004fb4 <HAL_RCC_OscConfig+0x4ec>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004edc:	f7fc fb1c 	bl	8001518 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee4:	f7fc fb18 	bl	8001518 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e056      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef6:	4b2e      	ldr	r3, [pc, #184]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0f0      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x41c>
 8004f02:	e04e      	b.n	8004fa2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f04:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <HAL_RCC_OscConfig+0x4ec>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0a:	f7fc fb05 	bl	8001518 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f12:	f7fc fb01 	bl	8001518 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e03f      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f24:	4b22      	ldr	r3, [pc, #136]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <HAL_RCC_OscConfig+0x44a>
 8004f30:	e037      	b.n	8004fa2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e032      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f3e:	4b1c      	ldr	r3, [pc, #112]	; (8004fb0 <HAL_RCC_OscConfig+0x4e8>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d028      	beq.n	8004f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d121      	bne.n	8004f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d11a      	bne.n	8004f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f6e:	4013      	ands	r3, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f74:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d111      	bne.n	8004f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	3b01      	subs	r3, #1
 8004f88:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d001      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40007000 	.word	0x40007000
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	42470060 	.word	0x42470060

08004fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0cc      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fcc:	4b68      	ldr	r3, [pc, #416]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d90c      	bls.n	8004ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fda:	4b65      	ldr	r3, [pc, #404]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe2:	4b63      	ldr	r3, [pc, #396]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d001      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0b8      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d020      	beq.n	8005042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800500c:	4b59      	ldr	r3, [pc, #356]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a58      	ldr	r2, [pc, #352]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005024:	4b53      	ldr	r3, [pc, #332]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4a52      	ldr	r2, [pc, #328]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800502e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005030:	4b50      	ldr	r3, [pc, #320]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	494d      	ldr	r1, [pc, #308]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d044      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d107      	bne.n	8005066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005056:	4b47      	ldr	r3, [pc, #284]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d119      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e07f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d003      	beq.n	8005076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005072:	2b03      	cmp	r3, #3
 8005074:	d107      	bne.n	8005086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005076:	4b3f      	ldr	r3, [pc, #252]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e06f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005086:	4b3b      	ldr	r3, [pc, #236]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e067      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005096:	4b37      	ldr	r3, [pc, #220]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f023 0203 	bic.w	r2, r3, #3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4934      	ldr	r1, [pc, #208]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050a8:	f7fc fa36 	bl	8001518 <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b0:	f7fc fa32 	bl	8001518 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e04f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c6:	4b2b      	ldr	r3, [pc, #172]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 020c 	and.w	r2, r3, #12
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d1eb      	bne.n	80050b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050d8:	4b25      	ldr	r3, [pc, #148]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d20c      	bcs.n	8005100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e6:	4b22      	ldr	r3, [pc, #136]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b20      	ldr	r3, [pc, #128]	; (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e032      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4916      	ldr	r1, [pc, #88]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	490e      	ldr	r1, [pc, #56]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800513e:	f000 f821 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8005142:	4602      	mov	r2, r0
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	490a      	ldr	r1, [pc, #40]	; (8005178 <HAL_RCC_ClockConfig+0x1c0>)
 8005150:	5ccb      	ldrb	r3, [r1, r3]
 8005152:	fa22 f303 	lsr.w	r3, r2, r3
 8005156:	4a09      	ldr	r2, [pc, #36]	; (800517c <HAL_RCC_ClockConfig+0x1c4>)
 8005158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <HAL_RCC_ClockConfig+0x1c8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fc f89c 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40023c00 	.word	0x40023c00
 8005174:	40023800 	.word	0x40023800
 8005178:	0800e890 	.word	0x0800e890
 800517c:	20000000 	.word	0x20000000
 8005180:	20000004 	.word	0x20000004

08005184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005184:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	607b      	str	r3, [r7, #4]
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	2300      	movs	r3, #0
 8005196:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800519c:	4b67      	ldr	r3, [pc, #412]	; (800533c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 030c 	and.w	r3, r3, #12
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d00d      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x40>
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	f200 80bd 	bhi.w	8005328 <HAL_RCC_GetSysClockFreq+0x1a4>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x34>
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d003      	beq.n	80051be <HAL_RCC_GetSysClockFreq+0x3a>
 80051b6:	e0b7      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051b8:	4b61      	ldr	r3, [pc, #388]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051ba:	60bb      	str	r3, [r7, #8]
       break;
 80051bc:	e0b7      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051be:	4b61      	ldr	r3, [pc, #388]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80051c0:	60bb      	str	r3, [r7, #8]
      break;
 80051c2:	e0b4      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c4:	4b5d      	ldr	r3, [pc, #372]	; (800533c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ce:	4b5b      	ldr	r3, [pc, #364]	; (800533c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d04d      	beq.n	8005276 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051da:	4b58      	ldr	r3, [pc, #352]	; (800533c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	099b      	lsrs	r3, r3, #6
 80051e0:	461a      	mov	r2, r3
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	ea02 0800 	and.w	r8, r2, r0
 80051f2:	ea03 0901 	and.w	r9, r3, r1
 80051f6:	4640      	mov	r0, r8
 80051f8:	4649      	mov	r1, r9
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	014b      	lsls	r3, r1, #5
 8005204:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005208:	0142      	lsls	r2, r0, #5
 800520a:	4610      	mov	r0, r2
 800520c:	4619      	mov	r1, r3
 800520e:	ebb0 0008 	subs.w	r0, r0, r8
 8005212:	eb61 0109 	sbc.w	r1, r1, r9
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	018b      	lsls	r3, r1, #6
 8005220:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005224:	0182      	lsls	r2, r0, #6
 8005226:	1a12      	subs	r2, r2, r0
 8005228:	eb63 0301 	sbc.w	r3, r3, r1
 800522c:	f04f 0000 	mov.w	r0, #0
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	00d9      	lsls	r1, r3, #3
 8005236:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800523a:	00d0      	lsls	r0, r2, #3
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	eb12 0208 	adds.w	r2, r2, r8
 8005244:	eb43 0309 	adc.w	r3, r3, r9
 8005248:	f04f 0000 	mov.w	r0, #0
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	0259      	lsls	r1, r3, #9
 8005252:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005256:	0250      	lsls	r0, r2, #9
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	461a      	mov	r2, r3
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	f7fa ffb2 	bl	80001d0 <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4613      	mov	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e04a      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005276:	4b31      	ldr	r3, [pc, #196]	; (800533c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	099b      	lsrs	r3, r3, #6
 800527c:	461a      	mov	r2, r3
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005286:	f04f 0100 	mov.w	r1, #0
 800528a:	ea02 0400 	and.w	r4, r2, r0
 800528e:	ea03 0501 	and.w	r5, r3, r1
 8005292:	4620      	mov	r0, r4
 8005294:	4629      	mov	r1, r5
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	014b      	lsls	r3, r1, #5
 80052a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052a4:	0142      	lsls	r2, r0, #5
 80052a6:	4610      	mov	r0, r2
 80052a8:	4619      	mov	r1, r3
 80052aa:	1b00      	subs	r0, r0, r4
 80052ac:	eb61 0105 	sbc.w	r1, r1, r5
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	018b      	lsls	r3, r1, #6
 80052ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052be:	0182      	lsls	r2, r0, #6
 80052c0:	1a12      	subs	r2, r2, r0
 80052c2:	eb63 0301 	sbc.w	r3, r3, r1
 80052c6:	f04f 0000 	mov.w	r0, #0
 80052ca:	f04f 0100 	mov.w	r1, #0
 80052ce:	00d9      	lsls	r1, r3, #3
 80052d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d4:	00d0      	lsls	r0, r2, #3
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	1912      	adds	r2, r2, r4
 80052dc:	eb45 0303 	adc.w	r3, r5, r3
 80052e0:	f04f 0000 	mov.w	r0, #0
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	0299      	lsls	r1, r3, #10
 80052ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052ee:	0290      	lsls	r0, r2, #10
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4610      	mov	r0, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	f7fa ff66 	bl	80001d0 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4613      	mov	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	0c1b      	lsrs	r3, r3, #16
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	3301      	adds	r3, #1
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	60bb      	str	r3, [r7, #8]
      break;
 8005326:	e002      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800532a:	60bb      	str	r3, [r7, #8]
      break;
 800532c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800532e:	68bb      	ldr	r3, [r7, #8]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800533a:	bf00      	nop
 800533c:	40023800 	.word	0x40023800
 8005340:	00f42400 	.word	0x00f42400
 8005344:	007a1200 	.word	0x007a1200

08005348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_GetHCLKFreq+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000000 	.word	0x20000000

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005364:	f7ff fff0 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0a9b      	lsrs	r3, r3, #10
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4903      	ldr	r1, [pc, #12]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	0800e8a0 	.word	0x0800e8a0

08005388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800538c:	f7ff ffdc 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0b5b      	lsrs	r3, r3, #13
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4903      	ldr	r1, [pc, #12]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40023800 	.word	0x40023800
 80053ac:	0800e8a0 	.word	0x0800e8a0

080053b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	220f      	movs	r2, #15
 80053be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053c0:	4b12      	ldr	r3, [pc, #72]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0203 	and.w	r2, r3, #3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053cc:	4b0f      	ldr	r3, [pc, #60]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053e4:	4b09      	ldr	r3, [pc, #36]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	08db      	lsrs	r3, r3, #3
 80053ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <HAL_RCC_GetClockConfig+0x60>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0207 	and.w	r2, r3, #7
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	601a      	str	r2, [r3, #0]
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
 8005410:	40023c00 	.word	0x40023c00

08005414 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005438:	2b00      	cmp	r3, #0
 800543a:	d035      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800543c:	4b62      	ldr	r3, [pc, #392]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005442:	f7fc f869 	bl	8001518 <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005448:	e008      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800544a:	f7fc f865 	bl	8001518 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e0b0      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800545c:	4b5b      	ldr	r3, [pc, #364]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f0      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	019a      	lsls	r2, r3, #6
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	071b      	lsls	r3, r3, #28
 8005474:	4955      	ldr	r1, [pc, #340]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800547c:	4b52      	ldr	r3, [pc, #328]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005482:	f7fc f849 	bl	8001518 <HAL_GetTick>
 8005486:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005488:	e008      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800548a:	f7fc f845 	bl	8001518 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e090      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800549c:	4b4b      	ldr	r3, [pc, #300]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0f0      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 8083 	beq.w	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	4b44      	ldr	r3, [pc, #272]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a43      	ldr	r2, [pc, #268]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
 80054c6:	4b41      	ldr	r3, [pc, #260]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a3e      	ldr	r2, [pc, #248]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054de:	f7fc f81b 	bl	8001518 <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054e6:	f7fc f817 	bl	8001518 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e062      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054f8:	4b35      	ldr	r3, [pc, #212]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005504:	4b31      	ldr	r3, [pc, #196]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d02f      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	429a      	cmp	r2, r3
 8005520:	d028      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005522:	4b2a      	ldr	r3, [pc, #168]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800552c:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005532:	4b28      	ldr	r3, [pc, #160]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005538:	4a24      	ldr	r2, [pc, #144]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800553e:	4b23      	ldr	r3, [pc, #140]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b01      	cmp	r3, #1
 8005548:	d114      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800554a:	f7fb ffe5 	bl	8001518 <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005550:	e00a      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005552:	f7fb ffe1 	bl	8001518 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005560:	4293      	cmp	r3, r2
 8005562:	d901      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e02a      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005568:	4b18      	ldr	r3, [pc, #96]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ee      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005580:	d10d      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005596:	490d      	ldr	r1, [pc, #52]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005598:	4313      	orrs	r3, r2
 800559a:	608b      	str	r3, [r1, #8]
 800559c:	e005      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800559e:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055a8:	6093      	str	r3, [r2, #8]
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b6:	4905      	ldr	r1, [pc, #20]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	42470068 	.word	0x42470068
 80055cc:	40023800 	.word	0x40023800
 80055d0:	40007000 	.word	0x40007000
 80055d4:	42470e40 	.word	0x42470e40

080055d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d13e      	bne.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80055f6:	4b23      	ldr	r3, [pc, #140]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d12f      	bne.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800560c:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800560e:	617b      	str	r3, [r7, #20]
          break;
 8005610:	e02f      	b.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800561a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800561e:	d108      	bne.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005620:	4b18      	ldr	r3, [pc, #96]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005628:	4a18      	ldr	r2, [pc, #96]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	e007      	b.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005632:	4b14      	ldr	r3, [pc, #80]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800563a:	4a15      	ldr	r2, [pc, #84]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005642:	4b10      	ldr	r3, [pc, #64]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005648:	099b      	lsrs	r3, r3, #6
 800564a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	fb02 f303 	mul.w	r3, r2, r3
 8005654:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565c:	0f1b      	lsrs	r3, r3, #28
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	fbb2 f3f3 	udiv	r3, r2, r3
 8005668:	617b      	str	r3, [r7, #20]
          break;
 800566a:	e002      	b.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
          break;
 8005670:	bf00      	nop
        }
      }
      break;
 8005672:	bf00      	nop
    }
  }
  return frequency;
 8005674:	697b      	ldr	r3, [r7, #20]
}
 8005676:	4618      	mov	r0, r3
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40023800 	.word	0x40023800
 8005688:	00bb8000 	.word	0x00bb8000
 800568c:	007a1200 	.word	0x007a1200
 8005690:	00f42400 	.word	0x00f42400

08005694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e07b      	b.n	800579e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d108      	bne.n	80056c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056b6:	d009      	beq.n	80056cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	61da      	str	r2, [r3, #28]
 80056be:	e005      	b.n	80056cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fb fd40 	bl	800116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005702:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005750:	ea42 0103 	orr.w	r1, r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	0c1b      	lsrs	r3, r3, #16
 800576a:	f003 0104 	and.w	r1, r3, #4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	f003 0210 	and.w	r2, r3, #16
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e041      	b.n	800583c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f839 	bl	8005844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f000 f9d7 	bl	8005b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d001      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e04e      	b.n	800590e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a23      	ldr	r2, [pc, #140]	; (800591c <HAL_TIM_Base_Start_IT+0xc4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d022      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589a:	d01d      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <HAL_TIM_Base_Start_IT+0xc8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d018      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1e      	ldr	r2, [pc, #120]	; (8005924 <HAL_TIM_Base_Start_IT+0xcc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d013      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1c      	ldr	r2, [pc, #112]	; (8005928 <HAL_TIM_Base_Start_IT+0xd0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00e      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1b      	ldr	r2, [pc, #108]	; (800592c <HAL_TIM_Base_Start_IT+0xd4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d009      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a19      	ldr	r2, [pc, #100]	; (8005930 <HAL_TIM_Base_Start_IT+0xd8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0x80>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a18      	ldr	r2, [pc, #96]	; (8005934 <HAL_TIM_Base_Start_IT+0xdc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d111      	bne.n	80058fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b06      	cmp	r3, #6
 80058e8:	d010      	beq.n	800590c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fa:	e007      	b.n	800590c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40010000 	.word	0x40010000
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800
 8005928:	40000c00 	.word	0x40000c00
 800592c:	40010400 	.word	0x40010400
 8005930:	40014000 	.word	0x40014000
 8005934:	40001800 	.word	0x40001800

08005938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b02      	cmp	r3, #2
 800594c:	d122      	bne.n	8005994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b02      	cmp	r3, #2
 800595a:	d11b      	bne.n	8005994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0202 	mvn.w	r2, #2
 8005964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f8ee 	bl	8005b5c <HAL_TIM_IC_CaptureCallback>
 8005980:	e005      	b.n	800598e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f8e0 	bl	8005b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f8f1 	bl	8005b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d122      	bne.n	80059e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d11b      	bne.n	80059e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0204 	mvn.w	r2, #4
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f8c4 	bl	8005b5c <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8b6 	bl	8005b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f8c7 	bl	8005b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	d122      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d11b      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0208 	mvn.w	r2, #8
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2204      	movs	r2, #4
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f89a 	bl	8005b5c <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f88c 	bl	8005b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f89d 	bl	8005b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b10      	cmp	r3, #16
 8005a48:	d122      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b10      	cmp	r3, #16
 8005a56:	d11b      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0210 	mvn.w	r2, #16
 8005a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2208      	movs	r2, #8
 8005a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f870 	bl	8005b5c <HAL_TIM_IC_CaptureCallback>
 8005a7c:	e005      	b.n	8005a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f862 	bl	8005b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f873 	bl	8005b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d10e      	bne.n	8005abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d107      	bne.n	8005abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0201 	mvn.w	r2, #1
 8005ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fb f804 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac6:	2b80      	cmp	r3, #128	; 0x80
 8005ac8:	d10e      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad4:	2b80      	cmp	r3, #128	; 0x80
 8005ad6:	d107      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f902 	bl	8005cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d10e      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b00:	2b40      	cmp	r3, #64	; 0x40
 8005b02:	d107      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f838 	bl	8005b84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d10e      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d107      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0220 	mvn.w	r2, #32
 8005b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f8cc 	bl	8005cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a40      	ldr	r2, [pc, #256]	; (8005cac <TIM_Base_SetConfig+0x114>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d013      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb6:	d00f      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a3d      	ldr	r2, [pc, #244]	; (8005cb0 <TIM_Base_SetConfig+0x118>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00b      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a3c      	ldr	r2, [pc, #240]	; (8005cb4 <TIM_Base_SetConfig+0x11c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d007      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a3b      	ldr	r2, [pc, #236]	; (8005cb8 <TIM_Base_SetConfig+0x120>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a3a      	ldr	r2, [pc, #232]	; (8005cbc <TIM_Base_SetConfig+0x124>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d108      	bne.n	8005bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2f      	ldr	r2, [pc, #188]	; (8005cac <TIM_Base_SetConfig+0x114>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d02b      	beq.n	8005c4a <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf8:	d027      	beq.n	8005c4a <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a2c      	ldr	r2, [pc, #176]	; (8005cb0 <TIM_Base_SetConfig+0x118>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d023      	beq.n	8005c4a <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a2b      	ldr	r2, [pc, #172]	; (8005cb4 <TIM_Base_SetConfig+0x11c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d01f      	beq.n	8005c4a <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a2a      	ldr	r2, [pc, #168]	; (8005cb8 <TIM_Base_SetConfig+0x120>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d01b      	beq.n	8005c4a <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a29      	ldr	r2, [pc, #164]	; (8005cbc <TIM_Base_SetConfig+0x124>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d017      	beq.n	8005c4a <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a28      	ldr	r2, [pc, #160]	; (8005cc0 <TIM_Base_SetConfig+0x128>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a27      	ldr	r2, [pc, #156]	; (8005cc4 <TIM_Base_SetConfig+0x12c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00f      	beq.n	8005c4a <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a26      	ldr	r2, [pc, #152]	; (8005cc8 <TIM_Base_SetConfig+0x130>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00b      	beq.n	8005c4a <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a25      	ldr	r2, [pc, #148]	; (8005ccc <TIM_Base_SetConfig+0x134>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d007      	beq.n	8005c4a <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a24      	ldr	r2, [pc, #144]	; (8005cd0 <TIM_Base_SetConfig+0x138>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d003      	beq.n	8005c4a <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a23      	ldr	r2, [pc, #140]	; (8005cd4 <TIM_Base_SetConfig+0x13c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d108      	bne.n	8005c5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a0a      	ldr	r2, [pc, #40]	; (8005cac <TIM_Base_SetConfig+0x114>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_Base_SetConfig+0xf8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a0c      	ldr	r2, [pc, #48]	; (8005cbc <TIM_Base_SetConfig+0x124>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d103      	bne.n	8005c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	615a      	str	r2, [r3, #20]
}
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40010000 	.word	0x40010000
 8005cb0:	40000400 	.word	0x40000400
 8005cb4:	40000800 	.word	0x40000800
 8005cb8:	40000c00 	.word	0x40000c00
 8005cbc:	40010400 	.word	0x40010400
 8005cc0:	40014000 	.word	0x40014000
 8005cc4:	40014400 	.word	0x40014400
 8005cc8:	40014800 	.word	0x40014800
 8005ccc:	40001800 	.word	0x40001800
 8005cd0:	40001c00 	.word	0x40001c00
 8005cd4:	40002000 	.word	0x40002000

08005cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e03f      	b.n	8005d92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fb fa68 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2224      	movs	r2, #36	; 0x24
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fb3f 	bl	80063c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695a      	ldr	r2, [r3, #20]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	; 0x28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10d      	bne.n	8005dee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_UART_IRQHandler+0x52>
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fa57 	bl	800629a <UART_Receive_IT>
      return;
 8005dec:	e17c      	b.n	80060e8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80b1 	beq.w	8005f58 <HAL_UART_IRQHandler+0x1bc>
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d105      	bne.n	8005e0c <HAL_UART_IRQHandler+0x70>
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 80a6 	beq.w	8005f58 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_UART_IRQHandler+0x90>
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	f043 0201 	orr.w	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <HAL_UART_IRQHandler+0xb0>
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e44:	f043 0202 	orr.w	r2, r3, #2
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_UART_IRQHandler+0xd0>
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	f043 0204 	orr.w	r2, r3, #4
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00f      	beq.n	8005e96 <HAL_UART_IRQHandler+0xfa>
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <HAL_UART_IRQHandler+0xee>
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f043 0208 	orr.w	r2, r3, #8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 811f 	beq.w	80060de <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <HAL_UART_IRQHandler+0x11e>
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f9f0 	bl	800629a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b40      	cmp	r3, #64	; 0x40
 8005ec6:	bf0c      	ite	eq
 8005ec8:	2301      	moveq	r3, #1
 8005eca:	2300      	movne	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d102      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x146>
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d031      	beq.n	8005f46 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f930 	bl	8006148 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b40      	cmp	r3, #64	; 0x40
 8005ef4:	d123      	bne.n	8005f3e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695a      	ldr	r2, [r3, #20]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f04:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d013      	beq.n	8005f36 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	4a77      	ldr	r2, [pc, #476]	; (80060f0 <HAL_UART_IRQHandler+0x354>)
 8005f14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fb fc7e 	bl	800181c <HAL_DMA_Abort_IT>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d016      	beq.n	8005f54 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	e00e      	b.n	8005f54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8f0 	bl	800611c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	e00a      	b.n	8005f54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f8ec 	bl	800611c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	e006      	b.n	8005f54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f8e8 	bl	800611c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f52:	e0c4      	b.n	80060de <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f54:	bf00      	nop
    return;
 8005f56:	e0c2      	b.n	80060de <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 80a2 	bne.w	80060a6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 809c 	beq.w	80060a6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 8096 	beq.w	80060a6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b40      	cmp	r3, #64	; 0x40
 8005f9c:	d14f      	bne.n	800603e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005fa8:	8a3b      	ldrh	r3, [r7, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 8099 	beq.w	80060e2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fb4:	8a3a      	ldrh	r2, [r7, #16]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	f080 8093 	bcs.w	80060e2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	8a3a      	ldrh	r2, [r7, #16]
 8005fc0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fcc:	d02b      	beq.n	8006026 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fdc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695a      	ldr	r2, [r3, #20]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695a      	ldr	r2, [r3, #20]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ffc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0210 	bic.w	r2, r2, #16
 800601a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	4618      	mov	r0, r3
 8006022:	f7fb fb8b 	bl	800173c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800602e:	b29b      	uxth	r3, r3
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	b29b      	uxth	r3, r3
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f87a 	bl	8006130 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800603c:	e051      	b.n	80060e2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006046:	b29b      	uxth	r3, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d047      	beq.n	80060e6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006056:	8a7b      	ldrh	r3, [r7, #18]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d044      	beq.n	80060e6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800606a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695a      	ldr	r2, [r3, #20]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0201 	bic.w	r2, r2, #1
 800607a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0210 	bic.w	r2, r2, #16
 8006098:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800609a:	8a7b      	ldrh	r3, [r7, #18]
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f846 	bl	8006130 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80060a4:	e01f      	b.n	80060e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_UART_IRQHandler+0x326>
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f885 	bl	80061ca <UART_Transmit_IT>
    return;
 80060c0:	e012      	b.n	80060e8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00d      	beq.n	80060e8 <HAL_UART_IRQHandler+0x34c>
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d008      	beq.n	80060e8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f8c7 	bl	800626a <UART_EndTransmit_IT>
    return;
 80060dc:	e004      	b.n	80060e8 <HAL_UART_IRQHandler+0x34c>
    return;
 80060de:	bf00      	nop
 80060e0:	e002      	b.n	80060e8 <HAL_UART_IRQHandler+0x34c>
      return;
 80060e2:	bf00      	nop
 80060e4:	e000      	b.n	80060e8 <HAL_UART_IRQHandler+0x34c>
      return;
 80060e6:	bf00      	nop
  }
}
 80060e8:	3728      	adds	r7, #40	; 0x28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	080061a3 	.word	0x080061a3

080060f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800615e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695a      	ldr	r2, [r3, #20]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0201 	bic.w	r2, r2, #1
 800616e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	2b01      	cmp	r3, #1
 8006176:	d107      	bne.n	8006188 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0210 	bic.w	r2, r2, #16
 8006186:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff ffad 	bl	800611c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b085      	sub	sp, #20
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b21      	cmp	r3, #33	; 0x21
 80061dc:	d13e      	bne.n	800625c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e6:	d114      	bne.n	8006212 <UART_Transmit_IT+0x48>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d110      	bne.n	8006212 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006204:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	1c9a      	adds	r2, r3, #2
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	621a      	str	r2, [r3, #32]
 8006210:	e008      	b.n	8006224 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	1c59      	adds	r1, r3, #1
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6211      	str	r1, [r2, #32]
 800621c:	781a      	ldrb	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29b      	uxth	r3, r3
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	4619      	mov	r1, r3
 8006232:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10f      	bne.n	8006258 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006246:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006256:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	e000      	b.n	800625e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800625c:	2302      	movs	r3, #2
  }
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006280:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff ff32 	bl	80060f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b22      	cmp	r3, #34	; 0x22
 80062ac:	f040 8087 	bne.w	80063be <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b8:	d117      	bne.n	80062ea <UART_Receive_IT+0x50>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d113      	bne.n	80062ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	1c9a      	adds	r2, r3, #2
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	629a      	str	r2, [r3, #40]	; 0x28
 80062e8:	e026      	b.n	8006338 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ee:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fc:	d007      	beq.n	800630e <UART_Receive_IT+0x74>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10a      	bne.n	800631c <UART_Receive_IT+0x82>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	b2da      	uxtb	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	e008      	b.n	800632e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006328:	b2da      	uxtb	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29b      	uxth	r3, r3
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	4619      	mov	r1, r3
 8006346:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006348:	2b00      	cmp	r3, #0
 800634a:	d136      	bne.n	80063ba <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0220 	bic.w	r2, r2, #32
 800635a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800636a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	2b01      	cmp	r3, #1
 800638a:	d10e      	bne.n	80063aa <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0210 	bic.w	r2, r2, #16
 800639a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff fec4 	bl	8006130 <HAL_UARTEx_RxEventCallback>
 80063a8:	e002      	b.n	80063b0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff feac 	bl	8006108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	e002      	b.n	80063c0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e000      	b.n	80063c0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80063be:	2302      	movs	r3, #2
  }
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	b09f      	sub	sp, #124	; 0x7c
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063de:	68d9      	ldr	r1, [r3, #12]
 80063e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	ea40 0301 	orr.w	r3, r0, r1
 80063e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	431a      	orrs	r2, r3
 80063f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	431a      	orrs	r2, r3
 80063fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	4313      	orrs	r3, r2
 8006400:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800640c:	f021 010c 	bic.w	r1, r1, #12
 8006410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006416:	430b      	orrs	r3, r1
 8006418:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800641a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006426:	6999      	ldr	r1, [r3, #24]
 8006428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	ea40 0301 	orr.w	r3, r0, r1
 8006430:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4bc5      	ldr	r3, [pc, #788]	; (800674c <UART_SetConfig+0x384>)
 8006438:	429a      	cmp	r2, r3
 800643a:	d004      	beq.n	8006446 <UART_SetConfig+0x7e>
 800643c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4bc3      	ldr	r3, [pc, #780]	; (8006750 <UART_SetConfig+0x388>)
 8006442:	429a      	cmp	r2, r3
 8006444:	d103      	bne.n	800644e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006446:	f7fe ff9f 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 800644a:	6778      	str	r0, [r7, #116]	; 0x74
 800644c:	e002      	b.n	8006454 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800644e:	f7fe ff87 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8006452:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800645c:	f040 80b6 	bne.w	80065cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006462:	461c      	mov	r4, r3
 8006464:	f04f 0500 	mov.w	r5, #0
 8006468:	4622      	mov	r2, r4
 800646a:	462b      	mov	r3, r5
 800646c:	1891      	adds	r1, r2, r2
 800646e:	6439      	str	r1, [r7, #64]	; 0x40
 8006470:	415b      	adcs	r3, r3
 8006472:	647b      	str	r3, [r7, #68]	; 0x44
 8006474:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006478:	1912      	adds	r2, r2, r4
 800647a:	eb45 0303 	adc.w	r3, r5, r3
 800647e:	f04f 0000 	mov.w	r0, #0
 8006482:	f04f 0100 	mov.w	r1, #0
 8006486:	00d9      	lsls	r1, r3, #3
 8006488:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800648c:	00d0      	lsls	r0, r2, #3
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	1911      	adds	r1, r2, r4
 8006494:	6639      	str	r1, [r7, #96]	; 0x60
 8006496:	416b      	adcs	r3, r5
 8006498:	667b      	str	r3, [r7, #100]	; 0x64
 800649a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	461a      	mov	r2, r3
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	1891      	adds	r1, r2, r2
 80064a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80064a8:	415b      	adcs	r3, r3
 80064aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80064b4:	f7f9 fe8c 	bl	80001d0 <__aeabi_uldivmod>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4ba5      	ldr	r3, [pc, #660]	; (8006754 <UART_SetConfig+0x38c>)
 80064be:	fba3 2302 	umull	r2, r3, r3, r2
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	011e      	lsls	r6, r3, #4
 80064c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064c8:	461c      	mov	r4, r3
 80064ca:	f04f 0500 	mov.w	r5, #0
 80064ce:	4622      	mov	r2, r4
 80064d0:	462b      	mov	r3, r5
 80064d2:	1891      	adds	r1, r2, r2
 80064d4:	6339      	str	r1, [r7, #48]	; 0x30
 80064d6:	415b      	adcs	r3, r3
 80064d8:	637b      	str	r3, [r7, #52]	; 0x34
 80064da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80064de:	1912      	adds	r2, r2, r4
 80064e0:	eb45 0303 	adc.w	r3, r5, r3
 80064e4:	f04f 0000 	mov.w	r0, #0
 80064e8:	f04f 0100 	mov.w	r1, #0
 80064ec:	00d9      	lsls	r1, r3, #3
 80064ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064f2:	00d0      	lsls	r0, r2, #3
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	1911      	adds	r1, r2, r4
 80064fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80064fc:	416b      	adcs	r3, r5
 80064fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	461a      	mov	r2, r3
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	1891      	adds	r1, r2, r2
 800650c:	62b9      	str	r1, [r7, #40]	; 0x28
 800650e:	415b      	adcs	r3, r3
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006516:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800651a:	f7f9 fe59 	bl	80001d0 <__aeabi_uldivmod>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4b8c      	ldr	r3, [pc, #560]	; (8006754 <UART_SetConfig+0x38c>)
 8006524:	fba3 1302 	umull	r1, r3, r3, r2
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	2164      	movs	r1, #100	; 0x64
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	3332      	adds	r3, #50	; 0x32
 8006536:	4a87      	ldr	r2, [pc, #540]	; (8006754 <UART_SetConfig+0x38c>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006544:	441e      	add	r6, r3
 8006546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006548:	4618      	mov	r0, r3
 800654a:	f04f 0100 	mov.w	r1, #0
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	1894      	adds	r4, r2, r2
 8006554:	623c      	str	r4, [r7, #32]
 8006556:	415b      	adcs	r3, r3
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
 800655a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800655e:	1812      	adds	r2, r2, r0
 8006560:	eb41 0303 	adc.w	r3, r1, r3
 8006564:	f04f 0400 	mov.w	r4, #0
 8006568:	f04f 0500 	mov.w	r5, #0
 800656c:	00dd      	lsls	r5, r3, #3
 800656e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006572:	00d4      	lsls	r4, r2, #3
 8006574:	4622      	mov	r2, r4
 8006576:	462b      	mov	r3, r5
 8006578:	1814      	adds	r4, r2, r0
 800657a:	653c      	str	r4, [r7, #80]	; 0x50
 800657c:	414b      	adcs	r3, r1
 800657e:	657b      	str	r3, [r7, #84]	; 0x54
 8006580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	461a      	mov	r2, r3
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	1891      	adds	r1, r2, r2
 800658c:	61b9      	str	r1, [r7, #24]
 800658e:	415b      	adcs	r3, r3
 8006590:	61fb      	str	r3, [r7, #28]
 8006592:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006596:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800659a:	f7f9 fe19 	bl	80001d0 <__aeabi_uldivmod>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4b6c      	ldr	r3, [pc, #432]	; (8006754 <UART_SetConfig+0x38c>)
 80065a4:	fba3 1302 	umull	r1, r3, r3, r2
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	2164      	movs	r1, #100	; 0x64
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	3332      	adds	r3, #50	; 0x32
 80065b6:	4a67      	ldr	r2, [pc, #412]	; (8006754 <UART_SetConfig+0x38c>)
 80065b8:	fba2 2303 	umull	r2, r3, r2, r3
 80065bc:	095b      	lsrs	r3, r3, #5
 80065be:	f003 0207 	and.w	r2, r3, #7
 80065c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4432      	add	r2, r6
 80065c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065ca:	e0b9      	b.n	8006740 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ce:	461c      	mov	r4, r3
 80065d0:	f04f 0500 	mov.w	r5, #0
 80065d4:	4622      	mov	r2, r4
 80065d6:	462b      	mov	r3, r5
 80065d8:	1891      	adds	r1, r2, r2
 80065da:	6139      	str	r1, [r7, #16]
 80065dc:	415b      	adcs	r3, r3
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80065e4:	1912      	adds	r2, r2, r4
 80065e6:	eb45 0303 	adc.w	r3, r5, r3
 80065ea:	f04f 0000 	mov.w	r0, #0
 80065ee:	f04f 0100 	mov.w	r1, #0
 80065f2:	00d9      	lsls	r1, r3, #3
 80065f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065f8:	00d0      	lsls	r0, r2, #3
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	eb12 0804 	adds.w	r8, r2, r4
 8006602:	eb43 0905 	adc.w	r9, r3, r5
 8006606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	4618      	mov	r0, r3
 800660c:	f04f 0100 	mov.w	r1, #0
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	f04f 0300 	mov.w	r3, #0
 8006618:	008b      	lsls	r3, r1, #2
 800661a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800661e:	0082      	lsls	r2, r0, #2
 8006620:	4640      	mov	r0, r8
 8006622:	4649      	mov	r1, r9
 8006624:	f7f9 fdd4 	bl	80001d0 <__aeabi_uldivmod>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4b49      	ldr	r3, [pc, #292]	; (8006754 <UART_SetConfig+0x38c>)
 800662e:	fba3 2302 	umull	r2, r3, r3, r2
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	011e      	lsls	r6, r3, #4
 8006636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006638:	4618      	mov	r0, r3
 800663a:	f04f 0100 	mov.w	r1, #0
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	1894      	adds	r4, r2, r2
 8006644:	60bc      	str	r4, [r7, #8]
 8006646:	415b      	adcs	r3, r3
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800664e:	1812      	adds	r2, r2, r0
 8006650:	eb41 0303 	adc.w	r3, r1, r3
 8006654:	f04f 0400 	mov.w	r4, #0
 8006658:	f04f 0500 	mov.w	r5, #0
 800665c:	00dd      	lsls	r5, r3, #3
 800665e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006662:	00d4      	lsls	r4, r2, #3
 8006664:	4622      	mov	r2, r4
 8006666:	462b      	mov	r3, r5
 8006668:	1814      	adds	r4, r2, r0
 800666a:	64bc      	str	r4, [r7, #72]	; 0x48
 800666c:	414b      	adcs	r3, r1
 800666e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	4618      	mov	r0, r3
 8006676:	f04f 0100 	mov.w	r1, #0
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	008b      	lsls	r3, r1, #2
 8006684:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006688:	0082      	lsls	r2, r0, #2
 800668a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800668e:	f7f9 fd9f 	bl	80001d0 <__aeabi_uldivmod>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4b2f      	ldr	r3, [pc, #188]	; (8006754 <UART_SetConfig+0x38c>)
 8006698:	fba3 1302 	umull	r1, r3, r3, r2
 800669c:	095b      	lsrs	r3, r3, #5
 800669e:	2164      	movs	r1, #100	; 0x64
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	3332      	adds	r3, #50	; 0x32
 80066aa:	4a2a      	ldr	r2, [pc, #168]	; (8006754 <UART_SetConfig+0x38c>)
 80066ac:	fba2 2303 	umull	r2, r3, r2, r3
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066b6:	441e      	add	r6, r3
 80066b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ba:	4618      	mov	r0, r3
 80066bc:	f04f 0100 	mov.w	r1, #0
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	1894      	adds	r4, r2, r2
 80066c6:	603c      	str	r4, [r7, #0]
 80066c8:	415b      	adcs	r3, r3
 80066ca:	607b      	str	r3, [r7, #4]
 80066cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066d0:	1812      	adds	r2, r2, r0
 80066d2:	eb41 0303 	adc.w	r3, r1, r3
 80066d6:	f04f 0400 	mov.w	r4, #0
 80066da:	f04f 0500 	mov.w	r5, #0
 80066de:	00dd      	lsls	r5, r3, #3
 80066e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80066e4:	00d4      	lsls	r4, r2, #3
 80066e6:	4622      	mov	r2, r4
 80066e8:	462b      	mov	r3, r5
 80066ea:	eb12 0a00 	adds.w	sl, r2, r0
 80066ee:	eb43 0b01 	adc.w	fp, r3, r1
 80066f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f04f 0100 	mov.w	r1, #0
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	008b      	lsls	r3, r1, #2
 8006706:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800670a:	0082      	lsls	r2, r0, #2
 800670c:	4650      	mov	r0, sl
 800670e:	4659      	mov	r1, fp
 8006710:	f7f9 fd5e 	bl	80001d0 <__aeabi_uldivmod>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <UART_SetConfig+0x38c>)
 800671a:	fba3 1302 	umull	r1, r3, r3, r2
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	2164      	movs	r1, #100	; 0x64
 8006722:	fb01 f303 	mul.w	r3, r1, r3
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	3332      	adds	r3, #50	; 0x32
 800672c:	4a09      	ldr	r2, [pc, #36]	; (8006754 <UART_SetConfig+0x38c>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	f003 020f 	and.w	r2, r3, #15
 8006738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4432      	add	r2, r6
 800673e:	609a      	str	r2, [r3, #8]
}
 8006740:	bf00      	nop
 8006742:	377c      	adds	r7, #124	; 0x7c
 8006744:	46bd      	mov	sp, r7
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	bf00      	nop
 800674c:	40011000 	.word	0x40011000
 8006750:	40011400 	.word	0x40011400
 8006754:	51eb851f 	.word	0x51eb851f

08006758 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006758:	b084      	sub	sp, #16
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	f107 001c 	add.w	r0, r7, #28
 8006766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2b01      	cmp	r3, #1
 800676e:	d122      	bne.n	80067b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006774:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679a:	2b01      	cmp	r3, #1
 800679c:	d105      	bne.n	80067aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f94a 	bl	8006a44 <USB_CoreReset>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]
 80067b4:	e01a      	b.n	80067ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f93e 	bl	8006a44 <USB_CoreReset>
 80067c8:	4603      	mov	r3, r0
 80067ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80067cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d106      	bne.n	80067e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	639a      	str	r2, [r3, #56]	; 0x38
 80067de:	e005      	b.n	80067ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d10b      	bne.n	800680a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f043 0206 	orr.w	r2, r3, #6
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f043 0220 	orr.w	r2, r3, #32
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006816:	b004      	add	sp, #16
 8006818:	4770      	bx	lr

0800681a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f043 0201 	orr.w	r2, r3, #1
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f023 0201 	bic.w	r2, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d106      	bne.n	800688a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	60da      	str	r2, [r3, #12]
 8006888:	e00b      	b.n	80068a2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d106      	bne.n	800689e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	60da      	str	r2, [r3, #12]
 800689c:	e001      	b.n	80068a2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e003      	b.n	80068aa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80068a2:	2032      	movs	r0, #50	; 0x32
 80068a4:	f7fa fe44 	bl	8001530 <HAL_Delay>

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	019b      	lsls	r3, r3, #6
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <USB_FlushTxFifo+0x48>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d901      	bls.n	80068e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e006      	b.n	80068ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d0f0      	beq.n	80068ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	00030d40 	.word	0x00030d40

08006900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2210      	movs	r2, #16
 8006910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3301      	adds	r3, #1
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a09      	ldr	r2, [pc, #36]	; (8006940 <USB_FlushRxFifo+0x40>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d901      	bls.n	8006924 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e006      	b.n	8006932 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	2b10      	cmp	r3, #16
 800692e:	d0f0      	beq.n	8006912 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	00030d40 	.word	0x00030d40

08006944 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006944:	b480      	push	{r7}
 8006946:	b089      	sub	sp, #36	; 0x24
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	4611      	mov	r1, r2
 8006950:	461a      	mov	r2, r3
 8006952:	460b      	mov	r3, r1
 8006954:	71fb      	strb	r3, [r7, #7]
 8006956:	4613      	mov	r3, r2
 8006958:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006962:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d11a      	bne.n	80069a0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800696a:	88bb      	ldrh	r3, [r7, #4]
 800696c:	3303      	adds	r3, #3
 800696e:	089b      	lsrs	r3, r3, #2
 8006970:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006972:	2300      	movs	r3, #0
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	e00f      	b.n	8006998 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	031a      	lsls	r2, r3, #12
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	4413      	add	r3, r2
 8006980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006984:	461a      	mov	r2, r3
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	3304      	adds	r3, #4
 8006990:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	3301      	adds	r3, #1
 8006996:	61bb      	str	r3, [r7, #24]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	429a      	cmp	r2, r3
 800699e:	d3eb      	bcc.n	8006978 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3724      	adds	r7, #36	; 0x24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b089      	sub	sp, #36	; 0x24
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	4613      	mov	r3, r2
 80069ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80069c4:	88fb      	ldrh	r3, [r7, #6]
 80069c6:	3303      	adds	r3, #3
 80069c8:	089b      	lsrs	r3, r3, #2
 80069ca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80069cc:	2300      	movs	r3, #0
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	e00b      	b.n	80069ea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	601a      	str	r2, [r3, #0]
    pDest++;
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	3304      	adds	r3, #4
 80069e2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	3301      	adds	r3, #1
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d3ef      	bcc.n	80069d2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80069f2:	69fb      	ldr	r3, [r7, #28]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3724      	adds	r7, #36	; 0x24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4013      	ands	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a18:	68fb      	ldr	r3, [r7, #12]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f003 0301 	and.w	r3, r3, #1
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
	...

08006a44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4a13      	ldr	r2, [pc, #76]	; (8006aa8 <USB_CoreReset+0x64>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d901      	bls.n	8006a62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e01b      	b.n	8006a9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	daf2      	bge.n	8006a50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f043 0201 	orr.w	r2, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a09      	ldr	r2, [pc, #36]	; (8006aa8 <USB_CoreReset+0x64>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d901      	bls.n	8006a8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e006      	b.n	8006a9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d0f0      	beq.n	8006a7a <USB_CoreReset+0x36>

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	00030d40 	.word	0x00030d40

08006aac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006aac:	b084      	sub	sp, #16
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	f107 001c 	add.w	r0, r7, #28
 8006aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ac8:	461a      	mov	r2, r3
 8006aca:	2300      	movs	r3, #0
 8006acc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d018      	beq.n	8006b30 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d10a      	bne.n	8006b1a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b12:	f043 0304 	orr.w	r3, r3, #4
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	e014      	b.n	8006b44 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b28:	f023 0304 	bic.w	r3, r3, #4
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	e009      	b.n	8006b44 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b3e:	f023 0304 	bic.w	r3, r3, #4
 8006b42:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006b44:	2110      	movs	r1, #16
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff feb4 	bl	80068b4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff fed7 	bl	8006900 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	e015      	b.n	8006b84 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b64:	461a      	mov	r2, r3
 8006b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b6a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b78:	461a      	mov	r2, r3
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3301      	adds	r3, #1
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d3e5      	bcc.n	8006b58 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f8ac 	bl	8006cec <USB_DriveVbus>

  HAL_Delay(200U);
 8006b94:	20c8      	movs	r0, #200	; 0xc8
 8006b96:	f7fa fccb 	bl	8001530 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ba6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00b      	beq.n	8006bcc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a14      	ldr	r2, [pc, #80]	; (8006c10 <USB_HostInit+0x164>)
 8006bc0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a13      	ldr	r2, [pc, #76]	; (8006c14 <USB_HostInit+0x168>)
 8006bc6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006bca:	e009      	b.n	8006be0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2280      	movs	r2, #128	; 0x80
 8006bd0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a10      	ldr	r2, [pc, #64]	; (8006c18 <USB_HostInit+0x16c>)
 8006bd6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a10      	ldr	r2, [pc, #64]	; (8006c1c <USB_HostInit+0x170>)
 8006bdc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d105      	bne.n	8006bf2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	f043 0210 	orr.w	r2, r3, #16
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <USB_HostInit+0x174>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c0a:	b004      	add	sp, #16
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	01000200 	.word	0x01000200
 8006c14:	00e00300 	.word	0x00e00300
 8006c18:	00600080 	.word	0x00600080
 8006c1c:	004000e0 	.word	0x004000e0
 8006c20:	a3200008 	.word	0xa3200008

08006c24 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c42:	f023 0303 	bic.w	r3, r3, #3
 8006c46:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	68f9      	ldr	r1, [r7, #12]
 8006c58:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d107      	bne.n	8006c76 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006c72:	6053      	str	r3, [r2, #4]
 8006c74:	e009      	b.n	8006c8a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006c76:	78fb      	ldrb	r3, [r7, #3]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d106      	bne.n	8006c8a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c82:	461a      	mov	r2, r3
 8006c84:	f241 7370 	movw	r3, #6000	; 0x1770
 8006c88:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cb8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006cc8:	2064      	movs	r0, #100	; 0x64
 8006cca:	f7fa fc31 	bl	8001530 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cda:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006cdc:	200a      	movs	r0, #10
 8006cde:	f7fa fc27 	bl	8001530 <HAL_Delay>

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006d10:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d109      	bne.n	8006d30 <USB_DriveVbus+0x44>
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d106      	bne.n	8006d30 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d2e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3a:	d109      	bne.n	8006d50 <USB_DriveVbus+0x64>
 8006d3c:	78fb      	ldrb	r3, [r7, #3]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d4e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	0c5b      	lsrs	r3, r3, #17
 8006d7c:	f003 0303 	and.w	r3, r3, #3
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	b29b      	uxth	r3, r3
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	70fb      	strb	r3, [r7, #3]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70bb      	strb	r3, [r7, #2]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006dd2:	78fb      	ldrb	r3, [r7, #3]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dde:	461a      	mov	r2, r3
 8006de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006de4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006de6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d87e      	bhi.n	8006eec <USB_HC_Init+0x13c>
 8006dee:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <USB_HC_Init+0x44>)
 8006df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df4:	08006e05 	.word	0x08006e05
 8006df8:	08006eaf 	.word	0x08006eaf
 8006dfc:	08006e05 	.word	0x08006e05
 8006e00:	08006e71 	.word	0x08006e71
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e04:	78fb      	ldrb	r3, [r7, #3]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e10:	461a      	mov	r2, r3
 8006e12:	f240 439d 	movw	r3, #1181	; 0x49d
 8006e16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006e18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	da10      	bge.n	8006e42 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	78fa      	ldrb	r2, [r7, #3]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e3e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006e40:	e057      	b.n	8006ef2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d051      	beq.n	8006ef2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	78fa      	ldrb	r2, [r7, #3]
 8006e5e:	0151      	lsls	r1, r2, #5
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	440a      	add	r2, r1
 8006e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e6c:	60d3      	str	r3, [r2, #12]
      break;
 8006e6e:	e040      	b.n	8006ef2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006e82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	da34      	bge.n	8006ef6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e8c:	78fb      	ldrb	r3, [r7, #3]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eaa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006eac:	e023      	b.n	8006ef6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006eae:	78fb      	ldrb	r3, [r7, #3]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f240 2325 	movw	r3, #549	; 0x225
 8006ec0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ec2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	da17      	bge.n	8006efa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	78fa      	ldrb	r2, [r7, #3]
 8006eda:	0151      	lsls	r1, r2, #5
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	440a      	add	r2, r1
 8006ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ee4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006ee8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006eea:	e006      	b.n	8006efa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	77fb      	strb	r3, [r7, #31]
      break;
 8006ef0:	e004      	b.n	8006efc <USB_HC_Init+0x14c>
      break;
 8006ef2:	bf00      	nop
 8006ef4:	e002      	b.n	8006efc <USB_HC_Init+0x14c>
      break;
 8006ef6:	bf00      	nop
 8006ef8:	e000      	b.n	8006efc <USB_HC_Init+0x14c>
      break;
 8006efa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f02:	699a      	ldr	r2, [r3, #24]
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f10:	6939      	ldr	r1, [r7, #16]
 8006f12:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006f16:	4313      	orrs	r3, r2
 8006f18:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006f26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	da03      	bge.n	8006f36 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f32:	61bb      	str	r3, [r7, #24]
 8006f34:	e001      	b.n	8006f3a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff ff0f 	bl	8006d5e <USB_GetHostSpeed>
 8006f40:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006f42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d106      	bne.n	8006f58 <USB_HC_Init+0x1a8>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d003      	beq.n	8006f58 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	e001      	b.n	8006f5c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f5c:	787b      	ldrb	r3, [r7, #1]
 8006f5e:	059b      	lsls	r3, r3, #22
 8006f60:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f64:	78bb      	ldrb	r3, [r7, #2]
 8006f66:	02db      	lsls	r3, r3, #11
 8006f68:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f6c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f72:	049b      	lsls	r3, r3, #18
 8006f74:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f78:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f7a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006f7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f80:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f86:	78fb      	ldrb	r3, [r7, #3]
 8006f88:	0159      	lsls	r1, r3, #5
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	440b      	add	r3, r1
 8006f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f92:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f98:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006f9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d10f      	bne.n	8006fc2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	78fa      	ldrb	r2, [r7, #3]
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fc0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006fc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3720      	adds	r7, #32
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08c      	sub	sp, #48	; 0x30
 8006fd0:	af02      	add	r7, sp, #8
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fe8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d02d      	beq.n	8007052 <USB_HC_StartXfer+0x86>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	791b      	ldrb	r3, [r3, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d129      	bne.n	8007052 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d117      	bne.n	8007034 <USB_HC_StartXfer+0x68>
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	79db      	ldrb	r3, [r3, #7]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <USB_HC_StartXfer+0x48>
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	79db      	ldrb	r3, [r3, #7]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d10f      	bne.n	8007034 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	4413      	add	r3, r2
 800701c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	6a3a      	ldr	r2, [r7, #32]
 8007028:	440a      	add	r2, r1
 800702a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800702e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007032:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <USB_HC_StartXfer+0x86>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	795b      	ldrb	r3, [r3, #5]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d107      	bne.n	8007052 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	785b      	ldrb	r3, [r3, #1]
 8007046:	4619      	mov	r1, r3
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 fa2f 	bl	80074ac <USB_DoPing>
      return HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	e0f8      	b.n	8007244 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d018      	beq.n	800708c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	8912      	ldrh	r2, [r2, #8]
 8007062:	4413      	add	r3, r2
 8007064:	3b01      	subs	r3, #1
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	8912      	ldrh	r2, [r2, #8]
 800706a:	fbb3 f3f2 	udiv	r3, r3, r2
 800706e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007070:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007072:	8b7b      	ldrh	r3, [r7, #26]
 8007074:	429a      	cmp	r2, r3
 8007076:	d90b      	bls.n	8007090 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007078:	8b7b      	ldrh	r3, [r7, #26]
 800707a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800707c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	8912      	ldrh	r2, [r2, #8]
 8007082:	fb02 f203 	mul.w	r2, r2, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	611a      	str	r2, [r3, #16]
 800708a:	e001      	b.n	8007090 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800708c:	2301      	movs	r3, #1
 800708e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	78db      	ldrb	r3, [r3, #3]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d007      	beq.n	80070a8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	8912      	ldrh	r2, [r2, #8]
 800709e:	fb02 f203 	mul.w	r2, r2, r3
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	611a      	str	r2, [r3, #16]
 80070a6:	e003      	b.n	80070b0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	695a      	ldr	r2, [r3, #20]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070ba:	04d9      	lsls	r1, r3, #19
 80070bc:	4b63      	ldr	r3, [pc, #396]	; (800724c <USB_HC_StartXfer+0x280>)
 80070be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	7a9b      	ldrb	r3, [r3, #10]
 80070c6:	075b      	lsls	r3, r3, #29
 80070c8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070cc:	69f9      	ldr	r1, [r7, #28]
 80070ce:	0148      	lsls	r0, r1, #5
 80070d0:	6a39      	ldr	r1, [r7, #32]
 80070d2:	4401      	add	r1, r0
 80070d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	68d9      	ldr	r1, [r3, #12]
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f2:	460a      	mov	r2, r1
 80070f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	bf0c      	ite	eq
 8007106:	2301      	moveq	r3, #1
 8007108:	2300      	movne	r3, #0
 800710a:	b2db      	uxtb	r3, r3
 800710c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	4413      	add	r3, r2
 8007116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	0151      	lsls	r1, r2, #5
 8007120:	6a3a      	ldr	r2, [r7, #32]
 8007122:	440a      	add	r2, r1
 8007124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007128:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800712c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	4413      	add	r3, r2
 8007136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	7e7b      	ldrb	r3, [r7, #25]
 800713e:	075b      	lsls	r3, r3, #29
 8007140:	69f9      	ldr	r1, [r7, #28]
 8007142:	0148      	lsls	r0, r1, #5
 8007144:	6a39      	ldr	r1, [r7, #32]
 8007146:	4401      	add	r1, r0
 8007148:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800714c:	4313      	orrs	r3, r2
 800714e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	4413      	add	r3, r2
 8007158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007166:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	78db      	ldrb	r3, [r3, #3]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	e003      	b.n	8007182 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007180:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007188:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	4413      	add	r3, r2
 8007192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007196:	461a      	mov	r2, r3
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e04e      	b.n	8007244 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	78db      	ldrb	r3, [r3, #3]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d149      	bne.n	8007242 <USB_HC_StartXfer+0x276>
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d045      	beq.n	8007242 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	79db      	ldrb	r3, [r3, #7]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d830      	bhi.n	8007220 <USB_HC_StartXfer+0x254>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <USB_HC_StartXfer+0x1f8>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071d5 	.word	0x080071d5
 80071c8:	080071f9 	.word	0x080071f9
 80071cc:	080071d5 	.word	0x080071d5
 80071d0:	080071f9 	.word	0x080071f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	3303      	adds	r3, #3
 80071da:	089b      	lsrs	r3, r3, #2
 80071dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80071de:	8afa      	ldrh	r2, [r7, #22]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d91c      	bls.n	8007224 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f043 0220 	orr.w	r2, r3, #32
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80071f6:	e015      	b.n	8007224 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	3303      	adds	r3, #3
 80071fe:	089b      	lsrs	r3, r3, #2
 8007200:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007202:	8afa      	ldrh	r2, [r7, #22]
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	b29b      	uxth	r3, r3
 800720e:	429a      	cmp	r2, r3
 8007210:	d90a      	bls.n	8007228 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	619a      	str	r2, [r3, #24]
        }
        break;
 800721e:	e003      	b.n	8007228 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007220:	bf00      	nop
 8007222:	e002      	b.n	800722a <USB_HC_StartXfer+0x25e>
        break;
 8007224:	bf00      	nop
 8007226:	e000      	b.n	800722a <USB_HC_StartXfer+0x25e>
        break;
 8007228:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	68d9      	ldr	r1, [r3, #12]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	785a      	ldrb	r2, [r3, #1]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	b29b      	uxth	r3, r3
 8007238:	2000      	movs	r0, #0
 800723a:	9000      	str	r0, [sp, #0]
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7ff fb81 	bl	8006944 <USB_WritePacket>
  }

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3728      	adds	r7, #40	; 0x28
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	1ff80000 	.word	0x1ff80000

08007250 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	b29b      	uxth	r3, r3
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007272:	b480      	push	{r7}
 8007274:	b089      	sub	sp, #36	; 0x24
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	4413      	add	r3, r2
 8007292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	0c9b      	lsrs	r3, r3, #18
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	0fdb      	lsrs	r3, r3, #31
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b20      	cmp	r3, #32
 80072c0:	d104      	bne.n	80072cc <USB_HC_Halt+0x5a>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	e0e8      	b.n	800749e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <USB_HC_Halt+0x66>
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d173      	bne.n	80073c0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	0151      	lsls	r1, r2, #5
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	440a      	add	r2, r1
 80072ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b00      	cmp	r3, #0
 8007302:	f040 80cb 	bne.w	800749c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d143      	bne.n	800739a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	4413      	add	r3, r2
 800731a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	0151      	lsls	r1, r2, #5
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	440a      	add	r2, r1
 8007328:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800732c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007330:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	4413      	add	r3, r2
 800733a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	0151      	lsls	r1, r2, #5
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	440a      	add	r2, r1
 8007348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800734c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007350:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	4413      	add	r3, r2
 800735a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	440a      	add	r2, r1
 8007368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800736c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007370:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	3301      	adds	r3, #1
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800737e:	d81d      	bhi.n	80073bc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	4413      	add	r3, r2
 8007388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007396:	d0ec      	beq.n	8007372 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007398:	e080      	b.n	800749c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	0151      	lsls	r1, r2, #5
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	440a      	add	r2, r1
 80073b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073ba:	e06f      	b.n	800749c <USB_HC_Halt+0x22a>
            break;
 80073bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073be:	e06d      	b.n	800749c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d143      	bne.n	8007478 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	440a      	add	r2, r1
 8007406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800740a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800740e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	4413      	add	r3, r2
 8007418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	440a      	add	r2, r1
 8007426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800742a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800742e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	4413      	add	r3, r2
 8007438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	440a      	add	r2, r1
 8007446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800744a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800744e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	3301      	adds	r3, #1
 8007454:	61fb      	str	r3, [r7, #28]
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800745c:	d81d      	bhi.n	800749a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	4413      	add	r3, r2
 8007466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007474:	d0ec      	beq.n	8007450 <USB_HC_Halt+0x1de>
 8007476:	e011      	b.n	800749c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	4413      	add	r3, r2
 8007480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	0151      	lsls	r1, r2, #5
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	440a      	add	r2, r1
 800748e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007492:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	e000      	b.n	800749c <USB_HC_Halt+0x22a>
          break;
 800749a:	bf00      	nop
    }
  }

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3724      	adds	r7, #36	; 0x24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
	...

080074ac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80074c0:	2301      	movs	r3, #1
 80074c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	04da      	lsls	r2, r3, #19
 80074c8:	4b15      	ldr	r3, [pc, #84]	; (8007520 <USB_DoPing+0x74>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074dc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074f4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074fc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	4413      	add	r3, r2
 8007506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750a:	461a      	mov	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	371c      	adds	r7, #28
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	1ff80000 	.word	0x1ff80000

08007524 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff f981 	bl	800683c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800753a:	2110      	movs	r1, #16
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff f9b9 	bl	80068b4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff f9dc 	bl	8006900 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007548:	2300      	movs	r3, #0
 800754a:	613b      	str	r3, [r7, #16]
 800754c:	e01f      	b.n	800758e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007564:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800756c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007574:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007582:	461a      	mov	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	3301      	adds	r3, #1
 800758c:	613b      	str	r3, [r7, #16]
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b0f      	cmp	r3, #15
 8007592:	d9dc      	bls.n	800754e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007594:	2300      	movs	r3, #0
 8007596:	613b      	str	r3, [r7, #16]
 8007598:	e034      	b.n	8007604 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075b0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075b8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075c0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ce:	461a      	mov	r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	3301      	adds	r3, #1
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075e0:	d80c      	bhi.n	80075fc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075f8:	d0ec      	beq.n	80075d4 <USB_StopHost+0xb0>
 80075fa:	e000      	b.n	80075fe <USB_StopHost+0xda>
        break;
 80075fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3301      	adds	r3, #1
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	2b0f      	cmp	r3, #15
 8007608:	d9c7      	bls.n	800759a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007610:	461a      	mov	r2, r3
 8007612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007616:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800761e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff f8fa 	bl	800681a <USB_EnableGlobalInt>

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007630:	b590      	push	{r4, r7, lr}
 8007632:	b089      	sub	sp, #36	; 0x24
 8007634:	af04      	add	r7, sp, #16
 8007636:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007638:	2301      	movs	r3, #1
 800763a:	2202      	movs	r2, #2
 800763c:	2102      	movs	r1, #2
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fcb2 	bl	8007fa8 <USBH_FindInterface>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	2bff      	cmp	r3, #255	; 0xff
 800764c:	d002      	beq.n	8007654 <USBH_CDC_InterfaceInit+0x24>
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d901      	bls.n	8007658 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007654:	2302      	movs	r3, #2
 8007656:	e13d      	b.n	80078d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fc87 	bl	8007f70 <USBH_SelectInterface>
 8007662:	4603      	mov	r3, r0
 8007664:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800766c:	2302      	movs	r3, #2
 800766e:	e131      	b.n	80078d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007676:	2050      	movs	r0, #80	; 0x50
 8007678:	f005 fbd4 	bl	800ce24 <malloc>
 800767c:	4603      	mov	r3, r0
 800767e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007690:	2302      	movs	r3, #2
 8007692:	e11f      	b.n	80078d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007694:	2250      	movs	r2, #80	; 0x50
 8007696:	2100      	movs	r1, #0
 8007698:	68b8      	ldr	r0, [r7, #8]
 800769a:	f005 fbe1 	bl	800ce60 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	211a      	movs	r1, #26
 80076a4:	fb01 f303 	mul.w	r3, r1, r3
 80076a8:	4413      	add	r3, r2
 80076aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	b25b      	sxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	da15      	bge.n	80076e2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	211a      	movs	r1, #26
 80076bc:	fb01 f303 	mul.w	r3, r1, r3
 80076c0:	4413      	add	r3, r2
 80076c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076c6:	781a      	ldrb	r2, [r3, #0]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	211a      	movs	r1, #26
 80076d2:	fb01 f303 	mul.w	r3, r1, r3
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076dc:	881a      	ldrh	r2, [r3, #0]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f002 f88c 	bl	8009806 <USBH_AllocPipe>
 80076ee:	4603      	mov	r3, r0
 80076f0:	461a      	mov	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	7819      	ldrb	r1, [r3, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	7858      	ldrb	r0, [r3, #1]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	8952      	ldrh	r2, [r2, #10]
 800770e:	9202      	str	r2, [sp, #8]
 8007710:	2203      	movs	r2, #3
 8007712:	9201      	str	r2, [sp, #4]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	4623      	mov	r3, r4
 8007718:	4602      	mov	r2, r0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f002 f844 	bl	80097a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2200      	movs	r2, #0
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f005 facd 	bl	800ccc8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800772e:	2300      	movs	r3, #0
 8007730:	2200      	movs	r2, #0
 8007732:	210a      	movs	r1, #10
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fc37 	bl	8007fa8 <USBH_FindInterface>
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	2bff      	cmp	r3, #255	; 0xff
 8007742:	d002      	beq.n	800774a <USBH_CDC_InterfaceInit+0x11a>
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d901      	bls.n	800774e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800774a:	2302      	movs	r3, #2
 800774c:	e0c2      	b.n	80078d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	211a      	movs	r1, #26
 8007754:	fb01 f303 	mul.w	r3, r1, r3
 8007758:	4413      	add	r3, r2
 800775a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	b25b      	sxtb	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	da16      	bge.n	8007794 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	211a      	movs	r1, #26
 800776c:	fb01 f303 	mul.w	r3, r1, r3
 8007770:	4413      	add	r3, r2
 8007772:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007776:	781a      	ldrb	r2, [r3, #0]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	211a      	movs	r1, #26
 8007782:	fb01 f303 	mul.w	r3, r1, r3
 8007786:	4413      	add	r3, r2
 8007788:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800778c:	881a      	ldrh	r2, [r3, #0]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	835a      	strh	r2, [r3, #26]
 8007792:	e015      	b.n	80077c0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	211a      	movs	r1, #26
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	4413      	add	r3, r2
 80077a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077a4:	781a      	ldrb	r2, [r3, #0]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	211a      	movs	r1, #26
 80077b0:	fb01 f303 	mul.w	r3, r1, r3
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077ba:	881a      	ldrh	r2, [r3, #0]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	211a      	movs	r1, #26
 80077c6:	fb01 f303 	mul.w	r3, r1, r3
 80077ca:	4413      	add	r3, r2
 80077cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	b25b      	sxtb	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da16      	bge.n	8007806 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	211a      	movs	r1, #26
 80077de:	fb01 f303 	mul.w	r3, r1, r3
 80077e2:	4413      	add	r3, r2
 80077e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80077e8:	781a      	ldrb	r2, [r3, #0]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	211a      	movs	r1, #26
 80077f4:	fb01 f303 	mul.w	r3, r1, r3
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80077fe:	881a      	ldrh	r2, [r3, #0]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	835a      	strh	r2, [r3, #26]
 8007804:	e015      	b.n	8007832 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007806:	7bfb      	ldrb	r3, [r7, #15]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	211a      	movs	r1, #26
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	4413      	add	r3, r2
 8007812:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007816:	781a      	ldrb	r2, [r3, #0]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	211a      	movs	r1, #26
 8007822:	fb01 f303 	mul.w	r3, r1, r3
 8007826:	4413      	add	r3, r2
 8007828:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800782c:	881a      	ldrh	r2, [r3, #0]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	7b9b      	ldrb	r3, [r3, #14]
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 ffe4 	bl	8009806 <USBH_AllocPipe>
 800783e:	4603      	mov	r3, r0
 8007840:	461a      	mov	r2, r3
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	7bdb      	ldrb	r3, [r3, #15]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 ffda 	bl	8009806 <USBH_AllocPipe>
 8007852:	4603      	mov	r3, r0
 8007854:	461a      	mov	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	7b59      	ldrb	r1, [r3, #13]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	7b98      	ldrb	r0, [r3, #14]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	8b12      	ldrh	r2, [r2, #24]
 8007872:	9202      	str	r2, [sp, #8]
 8007874:	2202      	movs	r2, #2
 8007876:	9201      	str	r2, [sp, #4]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	4623      	mov	r3, r4
 800787c:	4602      	mov	r2, r0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 ff92 	bl	80097a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	7b19      	ldrb	r1, [r3, #12]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	7bd8      	ldrb	r0, [r3, #15]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	8b52      	ldrh	r2, [r2, #26]
 800789c:	9202      	str	r2, [sp, #8]
 800789e:	2202      	movs	r2, #2
 80078a0:	9201      	str	r2, [sp, #4]
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	4623      	mov	r3, r4
 80078a6:	4602      	mov	r2, r0
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 ff7d 	bl	80097a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	7b5b      	ldrb	r3, [r3, #13]
 80078ba:	2200      	movs	r2, #0
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f005 fa02 	bl	800ccc8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	7b1b      	ldrb	r3, [r3, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f005 f9fb 	bl	800ccc8 <USBH_LL_SetToggle>

  return USBH_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd90      	pop	{r4, r7, pc}

080078dc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00e      	beq.n	8007914 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 ff72 	bl	80097e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 ff9d 	bl	8009848 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	7b1b      	ldrb	r3, [r3, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00e      	beq.n	800793a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	7b1b      	ldrb	r3, [r3, #12]
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f001 ff5f 	bl	80097e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	7b1b      	ldrb	r3, [r3, #12]
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 ff8a 	bl	8009848 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	7b5b      	ldrb	r3, [r3, #13]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00e      	beq.n	8007960 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	7b5b      	ldrb	r3, [r3, #13]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 ff4c 	bl	80097e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	7b5b      	ldrb	r3, [r3, #13]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 ff77 	bl	8009848 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	4618      	mov	r0, r3
 8007976:	f005 fa5d 	bl	800ce34 <free>
    phost->pActiveClass->pData = 0U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007980:	2200      	movs	r2, #0
 8007982:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3340      	adds	r3, #64	; 0x40
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f8b1 	bl	8007b0e <GetLineCoding>
 80079ac:	4603      	mov	r3, r0
 80079ae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80079b0:	7afb      	ldrb	r3, [r7, #11]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d105      	bne.n	80079c2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079bc:	2102      	movs	r1, #2
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80079c2:	7afb      	ldrb	r3, [r7, #11]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80079d4:	2301      	movs	r3, #1
 80079d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d877      	bhi.n	8007ae0 <USBH_CDC_Process+0x114>
 80079f0:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <USBH_CDC_Process+0x2c>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a0d 	.word	0x08007a0d
 80079fc:	08007a13 	.word	0x08007a13
 8007a00:	08007a43 	.word	0x08007a43
 8007a04:	08007ab7 	.word	0x08007ab7
 8007a08:	08007ac5 	.word	0x08007ac5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a10:	e06d      	b.n	8007aee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f897 	bl	8007b4c <SetLineCoding>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d104      	bne.n	8007a32 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a30:	e058      	b.n	8007ae4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d055      	beq.n	8007ae4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a40:	e050      	b.n	8007ae4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	3340      	adds	r3, #64	; 0x40
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f860 	bl	8007b0e <GetLineCoding>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d126      	bne.n	8007aa6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6a:	791b      	ldrb	r3, [r3, #4]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d13b      	bne.n	8007ae8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d133      	bne.n	8007ae8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d12b      	bne.n	8007ae8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a98:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d124      	bne.n	8007ae8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f982 	bl	8007da8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007aa4:	e020      	b.n	8007ae8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d01d      	beq.n	8007ae8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2204      	movs	r2, #4
 8007ab0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007ab4:	e018      	b.n	8007ae8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f867 	bl	8007b8a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f8f6 	bl	8007cae <CDC_ProcessReception>
      break;
 8007ac2:	e014      	b.n	8007aee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 f94d 	bl	8008d66 <USBH_ClrFeature>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007ade:	e005      	b.n	8007aec <USBH_CDC_Process+0x120>

    default:
      break;
 8007ae0:	bf00      	nop
 8007ae2:	e004      	b.n	8007aee <USBH_CDC_Process+0x122>
      break;
 8007ae4:	bf00      	nop
 8007ae6:	e002      	b.n	8007aee <USBH_CDC_Process+0x122>
      break;
 8007ae8:	bf00      	nop
 8007aea:	e000      	b.n	8007aee <USBH_CDC_Process+0x122>
      break;
 8007aec:	bf00      	nop

  }

  return status;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	22a1      	movs	r2, #161	; 0xa1
 8007b1c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2221      	movs	r2, #33	; 0x21
 8007b22:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2207      	movs	r2, #7
 8007b34:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2207      	movs	r2, #7
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 faf2 	bl	8009126 <USBH_CtlReq>
 8007b42:	4603      	mov	r3, r0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2221      	movs	r2, #33	; 0x21
 8007b5a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2207      	movs	r2, #7
 8007b72:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2207      	movs	r2, #7
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f001 fad3 	bl	8009126 <USBH_CtlReq>
 8007b80:	4603      	mov	r3, r0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b086      	sub	sp, #24
 8007b8e:	af02      	add	r7, sp, #8
 8007b90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d002      	beq.n	8007bb0 <CDC_ProcessTransmission+0x26>
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d023      	beq.n	8007bf6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007bae:	e07a      	b.n	8007ca6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	8b12      	ldrh	r2, [r2, #24]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d90b      	bls.n	8007bd4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	69d9      	ldr	r1, [r3, #28]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8b1a      	ldrh	r2, [r3, #24]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	7b5b      	ldrb	r3, [r3, #13]
 8007bc8:	2001      	movs	r0, #1
 8007bca:	9000      	str	r0, [sp, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f001 fda8 	bl	8009722 <USBH_BulkSendData>
 8007bd2:	e00b      	b.n	8007bec <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	7b5b      	ldrb	r3, [r3, #13]
 8007be2:	2001      	movs	r0, #1
 8007be4:	9000      	str	r0, [sp, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f001 fd9b 	bl	8009722 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007bf4:	e057      	b.n	8007ca6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	7b5b      	ldrb	r3, [r3, #13]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f005 f839 	bl	800cc74 <USBH_LL_GetURBState>
 8007c02:	4603      	mov	r3, r0
 8007c04:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007c06:	7afb      	ldrb	r3, [r7, #11]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d136      	bne.n	8007c7a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	8b12      	ldrh	r2, [r2, #24]
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d90e      	bls.n	8007c36 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	8b12      	ldrh	r2, [r2, #24]
 8007c20:	1a9a      	subs	r2, r3, r2
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	8b12      	ldrh	r2, [r2, #24]
 8007c2e:	441a      	add	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	61da      	str	r2, [r3, #28]
 8007c34:	e002      	b.n	8007c3c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d004      	beq.n	8007c4e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007c4c:	e006      	b.n	8007c5c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f892 	bl	8007d80 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2204      	movs	r2, #4
 8007c60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c70:	2300      	movs	r3, #0
 8007c72:	2200      	movs	r2, #0
 8007c74:	f001 ffd8 	bl	8009c28 <osMessageQueuePut>
      break;
 8007c78:	e014      	b.n	8007ca4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007c7a:	7afb      	ldrb	r3, [r7, #11]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d111      	bne.n	8007ca4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2204      	movs	r2, #4
 8007c8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f001 ffc2 	bl	8009c28 <osMessageQueuePut>
      break;
 8007ca4:	bf00      	nop
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b086      	sub	sp, #24
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d002      	beq.n	8007cd4 <CDC_ProcessReception+0x26>
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d00e      	beq.n	8007cf0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007cd2:	e051      	b.n	8007d78 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	6a19      	ldr	r1, [r3, #32]
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	8b5a      	ldrh	r2, [r3, #26]
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	7b1b      	ldrb	r3, [r3, #12]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 fd43 	bl	800976c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2204      	movs	r2, #4
 8007cea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007cee:	e043      	b.n	8007d78 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	7b1b      	ldrb	r3, [r3, #12]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f004 ffbc 	bl	800cc74 <USBH_LL_GetURBState>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007d00:	7cfb      	ldrb	r3, [r7, #19]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d137      	bne.n	8007d76 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	7b1b      	ldrb	r3, [r3, #12]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f004 ff1f 	bl	800cb50 <USBH_LL_GetLastXferSize>
 8007d12:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d016      	beq.n	8007d4c <CDC_ProcessReception+0x9e>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	8b5b      	ldrh	r3, [r3, #26]
 8007d22:	461a      	mov	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d910      	bls.n	8007d4c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	1ad2      	subs	r2, r2, r3
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	6a1a      	ldr	r2, [r3, #32]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	441a      	add	r2, r3
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2203      	movs	r2, #3
 8007d46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007d4a:	e006      	b.n	8007d5a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f81d 	bl	8007d94 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2200      	movs	r2, #0
 8007d72:	f001 ff59 	bl	8009c28 <osMessageQueuePut>
      break;
 8007d76:	bf00      	nop
  }
}
 8007d78:	bf00      	nop
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e044      	b.n	8007e5e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	79fa      	ldrb	r2, [r7, #7]
 8007dd8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 f841 	bl	8007e74 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007e20:	2200      	movs	r2, #0
 8007e22:	2104      	movs	r1, #4
 8007e24:	2010      	movs	r0, #16
 8007e26:	f001 fe8c 	bl	8009b42 <osMessageQueueNew>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007e32:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <USBH_Init+0xac>)
 8007e34:	4a0d      	ldr	r2, [pc, #52]	; (8007e6c <USBH_Init+0xb0>)
 8007e36:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007e38:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <USBH_Init+0xac>)
 8007e3a:	2280      	movs	r2, #128	; 0x80
 8007e3c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8007e3e:	4b0a      	ldr	r3, [pc, #40]	; (8007e68 <USBH_Init+0xac>)
 8007e40:	2218      	movs	r2, #24
 8007e42:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8007e44:	4a08      	ldr	r2, [pc, #32]	; (8007e68 <USBH_Init+0xac>)
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	4809      	ldr	r0, [pc, #36]	; (8007e70 <USBH_Init+0xb4>)
 8007e4a:	f001 fdcd 	bl	80099e8 <osThreadNew>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f004 fdc6 	bl	800c9e8 <USBH_LL_Init>

  return USBH_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20004f60 	.word	0x20004f60
 8007e6c:	0800d048 	.word	0x0800d048
 8007e70:	08008add 	.word	0x08008add

08007e74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	e009      	b.n	8007e9a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	33e0      	adds	r3, #224	; 0xe0
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	2200      	movs	r2, #0
 8007e92:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3301      	adds	r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b0e      	cmp	r3, #14
 8007e9e:	d9f2      	bls.n	8007e86 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e009      	b.n	8007eba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec0:	d3f1      	bcc.n	8007ea6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2240      	movs	r2, #64	; 0x40
 8007ee6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d016      	beq.n	8007f5e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10e      	bne.n	8007f58 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f40:	1c59      	adds	r1, r3, #1
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	33de      	adds	r3, #222	; 0xde
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]
 8007f56:	e004      	b.n	8007f62 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	73fb      	strb	r3, [r7, #15]
 8007f5c:	e001      	b.n	8007f62 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007f5e:	2302      	movs	r3, #2
 8007f60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007f86:	78fa      	ldrb	r2, [r7, #3]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d204      	bcs.n	8007f96 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	78fa      	ldrb	r2, [r7, #3]
 8007f90:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007f94:	e001      	b.n	8007f9a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007f96:	2302      	movs	r3, #2
 8007f98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b087      	sub	sp, #28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	70fb      	strb	r3, [r7, #3]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	70bb      	strb	r3, [r7, #2]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007fd0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007fd2:	e025      	b.n	8008020 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	221a      	movs	r2, #26
 8007fd8:	fb02 f303 	mul.w	r3, r2, r3
 8007fdc:	3308      	adds	r3, #8
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	3302      	adds	r3, #2
 8007fe4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	795b      	ldrb	r3, [r3, #5]
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d002      	beq.n	8007ff6 <USBH_FindInterface+0x4e>
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	2bff      	cmp	r3, #255	; 0xff
 8007ff4:	d111      	bne.n	800801a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ffa:	78ba      	ldrb	r2, [r7, #2]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d002      	beq.n	8008006 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008000:	78bb      	ldrb	r3, [r7, #2]
 8008002:	2bff      	cmp	r3, #255	; 0xff
 8008004:	d109      	bne.n	800801a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800800a:	787a      	ldrb	r2, [r7, #1]
 800800c:	429a      	cmp	r2, r3
 800800e:	d002      	beq.n	8008016 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008010:	787b      	ldrb	r3, [r7, #1]
 8008012:	2bff      	cmp	r3, #255	; 0xff
 8008014:	d101      	bne.n	800801a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	e006      	b.n	8008028 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	3301      	adds	r3, #1
 800801e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d9d6      	bls.n	8007fd4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008026:	23ff      	movs	r3, #255	; 0xff
}
 8008028:	4618      	mov	r0, r3
 800802a:	371c      	adds	r7, #28
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f004 fd0f 	bl	800ca60 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008042:	2101      	movs	r1, #1
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f004 fe28 	bl	800cc9a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af04      	add	r7, sp, #16
 800805a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800805c:	2302      	movs	r3, #2
 800805e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b01      	cmp	r3, #1
 800806e:	d102      	bne.n	8008076 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2203      	movs	r2, #3
 8008074:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b0b      	cmp	r3, #11
 800807e:	f200 823c 	bhi.w	80084fa <USBH_Process+0x4a6>
 8008082:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <USBH_Process+0x34>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080b9 	.word	0x080080b9
 800808c:	08008107 	.word	0x08008107
 8008090:	0800818b 	.word	0x0800818b
 8008094:	08008479 	.word	0x08008479
 8008098:	080084fb 	.word	0x080084fb
 800809c:	0800824b 	.word	0x0800824b
 80080a0:	08008403 	.word	0x08008403
 80080a4:	0800829d 	.word	0x0800829d
 80080a8:	080082d9 	.word	0x080082d9
 80080ac:	08008313 	.word	0x08008313
 80080b0:	0800835b 	.word	0x0800835b
 80080b4:	08008461 	.word	0x08008461
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 821c 	beq.w	80084fe <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80080cc:	20c8      	movs	r0, #200	; 0xc8
 80080ce:	f004 fe2b 	bl	800cd28 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f004 fd21 	bl	800cb1a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80080fc:	2300      	movs	r3, #0
 80080fe:	2200      	movs	r2, #0
 8008100:	f001 fd92 	bl	8009c28 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008104:	e1fb      	b.n	80084fe <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800810c:	2b01      	cmp	r3, #1
 800810e:	d107      	bne.n	8008120 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	701a      	strb	r2, [r3, #0]
 800811e:	e025      	b.n	800816c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800812a:	d914      	bls.n	8008156 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008132:	3301      	adds	r3, #1
 8008134:	b2da      	uxtb	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008142:	2b03      	cmp	r3, #3
 8008144:	d903      	bls.n	800814e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	220d      	movs	r2, #13
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	e00e      	b.n	800816c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	701a      	strb	r2, [r3, #0]
 8008154:	e00a      	b.n	800816c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800815c:	f103 020a 	add.w	r2, r3, #10
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008166:	200a      	movs	r0, #10
 8008168:	f004 fdde 	bl	800cd28 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008180:	2300      	movs	r3, #0
 8008182:	2200      	movs	r2, #0
 8008184:	f001 fd50 	bl	8009c28 <osMessageQueuePut>
#endif
#endif
      break;
 8008188:	e1c0      	b.n	800850c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800819a:	2104      	movs	r1, #4
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80081a0:	2064      	movs	r0, #100	; 0x64
 80081a2:	f004 fdc1 	bl	800cd28 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f004 fc90 	bl	800cacc <USBH_LL_GetSpeed>
 80081ac:	4603      	mov	r3, r0
 80081ae:	461a      	mov	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2205      	movs	r2, #5
 80081ba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80081bc:	2100      	movs	r1, #0
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f001 fb21 	bl	8009806 <USBH_AllocPipe>
 80081c4:	4603      	mov	r3, r0
 80081c6:	461a      	mov	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80081cc:	2180      	movs	r1, #128	; 0x80
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 fb19 	bl	8009806 <USBH_AllocPipe>
 80081d4:	4603      	mov	r3, r0
 80081d6:	461a      	mov	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	7919      	ldrb	r1, [r3, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80081f0:	b292      	uxth	r2, r2
 80081f2:	9202      	str	r2, [sp, #8]
 80081f4:	2200      	movs	r2, #0
 80081f6:	9201      	str	r2, [sp, #4]
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	4603      	mov	r3, r0
 80081fc:	2280      	movs	r2, #128	; 0x80
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f001 fad2 	bl	80097a8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	7959      	ldrb	r1, [r3, #5]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008218:	b292      	uxth	r2, r2
 800821a:	9202      	str	r2, [sp, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	9201      	str	r2, [sp, #4]
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	4603      	mov	r3, r0
 8008224:	2200      	movs	r2, #0
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 fabe 	bl	80097a8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008240:	2300      	movs	r3, #0
 8008242:	2200      	movs	r2, #0
 8008244:	f001 fcf0 	bl	8009c28 <osMessageQueuePut>
#endif
#endif
      break;
 8008248:	e160      	b.n	800850c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f964 	bl	8008518 <USBH_HandleEnum>
 8008250:	4603      	mov	r3, r0
 8008252:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	f040 8152 	bne.w	8008502 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800826c:	2b01      	cmp	r3, #1
 800826e:	d103      	bne.n	8008278 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2208      	movs	r2, #8
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	e002      	b.n	800827e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2207      	movs	r2, #7
 800827c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2205      	movs	r2, #5
 8008282:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008292:	2300      	movs	r3, #0
 8008294:	2200      	movs	r2, #0
 8008296:	f001 fcc7 	bl	8009c28 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800829a:	e132      	b.n	8008502 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 812f 	beq.w	8008506 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082ae:	2101      	movs	r1, #1
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2208      	movs	r2, #8
 80082b8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2205      	movs	r2, #5
 80082be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80082ce:	2300      	movs	r3, #0
 80082d0:	2200      	movs	r2, #0
 80082d2:	f001 fca9 	bl	8009c28 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80082d6:	e116      	b.n	8008506 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80082de:	b29b      	uxth	r3, r3
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fcf8 	bl	8008cd8 <USBH_SetCfg>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d102      	bne.n	80082f4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2209      	movs	r2, #9
 80082f2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008308:	2300      	movs	r3, #0
 800830a:	2200      	movs	r2, #0
 800830c:	f001 fc8c 	bl	8009c28 <osMessageQueuePut>
#endif
#endif
      break;
 8008310:	e0fc      	b.n	800850c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008318:	f003 0320 	and.w	r3, r3, #32
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008320:	2101      	movs	r1, #1
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fcfb 	bl	8008d1e <USBH_SetFeature>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	220a      	movs	r2, #10
 8008332:	701a      	strb	r2, [r3, #0]
 8008334:	e002      	b.n	800833c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	220a      	movs	r2, #10
 800833a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008350:	2300      	movs	r3, #0
 8008352:	2200      	movs	r2, #0
 8008354:	f001 fc68 	bl	8009c28 <osMessageQueuePut>
#endif
#endif
      break;
 8008358:	e0d8      	b.n	800850c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008360:	2b00      	cmp	r3, #0
 8008362:	d03f      	beq.n	80083e4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]
 8008370:	e016      	b.n	80083a0 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008372:	7bfa      	ldrb	r2, [r7, #15]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	32de      	adds	r2, #222	; 0xde
 8008378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837c:	791a      	ldrb	r2, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008384:	429a      	cmp	r2, r3
 8008386:	d108      	bne.n	800839a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008388:	7bfa      	ldrb	r2, [r7, #15]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	32de      	adds	r2, #222	; 0xde
 800838e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008398:	e005      	b.n	80083a6 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	3301      	adds	r3, #1
 800839e:	73fb      	strb	r3, [r7, #15]
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0e5      	beq.n	8008372 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d016      	beq.n	80083de <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	4798      	blx	r3
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d109      	bne.n	80083d6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2206      	movs	r2, #6
 80083c6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083ce:	2103      	movs	r1, #3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
 80083d4:	e006      	b.n	80083e4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	220d      	movs	r2, #13
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	e002      	b.n	80083e4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	220d      	movs	r2, #13
 80083e2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2205      	movs	r2, #5
 80083e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80083f8:	2300      	movs	r3, #0
 80083fa:	2200      	movs	r2, #0
 80083fc:	f001 fc14 	bl	8009c28 <osMessageQueuePut>
#endif
#endif
      break;
 8008400:	e084      	b.n	800850c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d017      	beq.n	800843c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	4798      	blx	r3
 8008418:	4603      	mov	r3, r0
 800841a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d103      	bne.n	800842c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	220b      	movs	r2, #11
 8008428:	701a      	strb	r2, [r3, #0]
 800842a:	e00a      	b.n	8008442 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b02      	cmp	r3, #2
 8008432:	d106      	bne.n	8008442 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	220d      	movs	r2, #13
 8008438:	701a      	strb	r2, [r3, #0]
 800843a:	e002      	b.n	8008442 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	220d      	movs	r2, #13
 8008440:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2205      	movs	r2, #5
 8008446:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008456:	2300      	movs	r3, #0
 8008458:	2200      	movs	r2, #0
 800845a:	f001 fbe5 	bl	8009c28 <osMessageQueuePut>
#endif
#endif
      break;
 800845e:	e055      	b.n	800850c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d04f      	beq.n	800850a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	4798      	blx	r3
      }
      break;
 8008476:	e048      	b.n	800850a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff fcf7 	bl	8007e74 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d009      	beq.n	80084a4 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084b4:	2105      	movs	r1, #5
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d107      	bne.n	80084d6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7ff fdb0 	bl	8008034 <USBH_Start>
 80084d4:	e002      	b.n	80084dc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f004 fac2 	bl	800ca60 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80084f0:	2300      	movs	r3, #0
 80084f2:	2200      	movs	r2, #0
 80084f4:	f001 fb98 	bl	8009c28 <osMessageQueuePut>
#endif
#endif
      break;
 80084f8:	e008      	b.n	800850c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80084fa:	bf00      	nop
 80084fc:	e006      	b.n	800850c <USBH_Process+0x4b8>
      break;
 80084fe:	bf00      	nop
 8008500:	e004      	b.n	800850c <USBH_Process+0x4b8>
      break;
 8008502:	bf00      	nop
 8008504:	e002      	b.n	800850c <USBH_Process+0x4b8>
    break;
 8008506:	bf00      	nop
 8008508:	e000      	b.n	800850c <USBH_Process+0x4b8>
      break;
 800850a:	bf00      	nop
  }
  return USBH_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop

08008518 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af04      	add	r7, sp, #16
 800851e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008520:	2301      	movs	r3, #1
 8008522:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008524:	2301      	movs	r3, #1
 8008526:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	785b      	ldrb	r3, [r3, #1]
 800852c:	2b07      	cmp	r3, #7
 800852e:	f200 8208 	bhi.w	8008942 <USBH_HandleEnum+0x42a>
 8008532:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <USBH_HandleEnum+0x20>)
 8008534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008538:	08008559 	.word	0x08008559
 800853c:	08008617 	.word	0x08008617
 8008540:	08008681 	.word	0x08008681
 8008544:	0800870f 	.word	0x0800870f
 8008548:	08008779 	.word	0x08008779
 800854c:	080087e9 	.word	0x080087e9
 8008550:	08008885 	.word	0x08008885
 8008554:	08008903 	.word	0x08008903
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008558:	2108      	movs	r1, #8
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 faec 	bl	8008b38 <USBH_Get_DevDesc>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d130      	bne.n	80085cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	7919      	ldrb	r1, [r3, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800858e:	b292      	uxth	r2, r2
 8008590:	9202      	str	r2, [sp, #8]
 8008592:	2200      	movs	r2, #0
 8008594:	9201      	str	r2, [sp, #4]
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	4603      	mov	r3, r0
 800859a:	2280      	movs	r2, #128	; 0x80
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f001 f903 	bl	80097a8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	7959      	ldrb	r1, [r3, #5]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80085b6:	b292      	uxth	r2, r2
 80085b8:	9202      	str	r2, [sp, #8]
 80085ba:	2200      	movs	r2, #0
 80085bc:	9201      	str	r2, [sp, #4]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	4603      	mov	r3, r0
 80085c2:	2200      	movs	r2, #0
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 f8ef 	bl	80097a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80085ca:	e1bc      	b.n	8008946 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	f040 81b9 	bne.w	8008946 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085da:	3301      	adds	r3, #1
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d903      	bls.n	80085f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	220d      	movs	r2, #13
 80085f2:	701a      	strb	r2, [r3, #0]
      break;
 80085f4:	e1a7      	b.n	8008946 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	795b      	ldrb	r3, [r3, #5]
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f001 f923 	bl	8009848 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	791b      	ldrb	r3, [r3, #4]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 f91d 	bl	8009848 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	701a      	strb	r2, [r3, #0]
      break;
 8008614:	e197      	b.n	8008946 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008616:	2112      	movs	r1, #18
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fa8d 	bl	8008b38 <USBH_Get_DevDesc>
 800861e:	4603      	mov	r3, r0
 8008620:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d103      	bne.n	8008630 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800862e:	e18c      	b.n	800894a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	2b03      	cmp	r3, #3
 8008634:	f040 8189 	bne.w	800894a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800863e:	3301      	adds	r3, #1
 8008640:	b2da      	uxtb	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800864e:	2b03      	cmp	r3, #3
 8008650:	d903      	bls.n	800865a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	220d      	movs	r2, #13
 8008656:	701a      	strb	r2, [r3, #0]
      break;
 8008658:	e177      	b.n	800894a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	795b      	ldrb	r3, [r3, #5]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 f8f1 	bl	8009848 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	791b      	ldrb	r3, [r3, #4]
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 f8eb 	bl	8009848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	701a      	strb	r2, [r3, #0]
      break;
 800867e:	e164      	b.n	800894a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008680:	2101      	movs	r1, #1
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fb04 	bl	8008c90 <USBH_SetAddress>
 8008688:	4603      	mov	r3, r0
 800868a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d132      	bne.n	80086f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008692:	2002      	movs	r0, #2
 8008694:	f004 fb48 	bl	800cd28 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2203      	movs	r2, #3
 80086a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	7919      	ldrb	r1, [r3, #4]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80086ba:	b292      	uxth	r2, r2
 80086bc:	9202      	str	r2, [sp, #8]
 80086be:	2200      	movs	r2, #0
 80086c0:	9201      	str	r2, [sp, #4]
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	4603      	mov	r3, r0
 80086c6:	2280      	movs	r2, #128	; 0x80
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f001 f86d 	bl	80097a8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	7959      	ldrb	r1, [r3, #5]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086e2:	b292      	uxth	r2, r2
 80086e4:	9202      	str	r2, [sp, #8]
 80086e6:	2200      	movs	r2, #0
 80086e8:	9201      	str	r2, [sp, #4]
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	4603      	mov	r3, r0
 80086ee:	2200      	movs	r2, #0
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 f859 	bl	80097a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80086f6:	e12a      	b.n	800894e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	f040 8127 	bne.w	800894e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	220d      	movs	r2, #13
 8008704:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	705a      	strb	r2, [r3, #1]
      break;
 800870c:	e11f      	b.n	800894e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800870e:	2109      	movs	r1, #9
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fa39 	bl	8008b88 <USBH_Get_CfgDesc>
 8008716:	4603      	mov	r3, r0
 8008718:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d103      	bne.n	8008728 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2204      	movs	r2, #4
 8008724:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008726:	e114      	b.n	8008952 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	2b03      	cmp	r3, #3
 800872c:	f040 8111 	bne.w	8008952 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008736:	3301      	adds	r3, #1
 8008738:	b2da      	uxtb	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008746:	2b03      	cmp	r3, #3
 8008748:	d903      	bls.n	8008752 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	220d      	movs	r2, #13
 800874e:	701a      	strb	r2, [r3, #0]
      break;
 8008750:	e0ff      	b.n	8008952 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	795b      	ldrb	r3, [r3, #5]
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 f875 	bl	8009848 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	791b      	ldrb	r3, [r3, #4]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 f86f 	bl	8009848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]
      break;
 8008776:	e0ec      	b.n	8008952 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fa01 	bl	8008b88 <USBH_Get_CfgDesc>
 8008786:	4603      	mov	r3, r0
 8008788:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d103      	bne.n	8008798 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2205      	movs	r2, #5
 8008794:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008796:	e0de      	b.n	8008956 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	2b03      	cmp	r3, #3
 800879c:	f040 80db 	bne.w	8008956 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087a6:	3301      	adds	r3, #1
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d903      	bls.n	80087c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	220d      	movs	r2, #13
 80087be:	701a      	strb	r2, [r3, #0]
      break;
 80087c0:	e0c9      	b.n	8008956 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	795b      	ldrb	r3, [r3, #5]
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 f83d 	bl	8009848 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	791b      	ldrb	r3, [r3, #4]
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f001 f837 	bl	8009848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	701a      	strb	r2, [r3, #0]
      break;
 80087e6:	e0b6      	b.n	8008956 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d036      	beq.n	8008860 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087fe:	23ff      	movs	r3, #255	; 0xff
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f9e5 	bl	8008bd0 <USBH_Get_StringDesc>
 8008806:	4603      	mov	r3, r0
 8008808:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d111      	bne.n	8008834 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2206      	movs	r2, #6
 8008814:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2205      	movs	r2, #5
 800881a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800882a:	2300      	movs	r3, #0
 800882c:	2200      	movs	r2, #0
 800882e:	f001 f9fb 	bl	8009c28 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008832:	e092      	b.n	800895a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b03      	cmp	r3, #3
 8008838:	f040 808f 	bne.w	800895a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2206      	movs	r2, #6
 8008840:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2205      	movs	r2, #5
 8008846:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008856:	2300      	movs	r3, #0
 8008858:	2200      	movs	r2, #0
 800885a:	f001 f9e5 	bl	8009c28 <osMessageQueuePut>
      break;
 800885e:	e07c      	b.n	800895a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2206      	movs	r2, #6
 8008864:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2205      	movs	r2, #5
 800886a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800887a:	2300      	movs	r3, #0
 800887c:	2200      	movs	r2, #0
 800887e:	f001 f9d3 	bl	8009c28 <osMessageQueuePut>
      break;
 8008882:	e06a      	b.n	800895a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800888a:	2b00      	cmp	r3, #0
 800888c:	d027      	beq.n	80088de <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800889a:	23ff      	movs	r3, #255	; 0xff
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f997 	bl	8008bd0 <USBH_Get_StringDesc>
 80088a2:	4603      	mov	r3, r0
 80088a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088a6:	7bbb      	ldrb	r3, [r7, #14]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d103      	bne.n	80088b4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2207      	movs	r2, #7
 80088b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80088b2:	e054      	b.n	800895e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d151      	bne.n	800895e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2207      	movs	r2, #7
 80088be:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2205      	movs	r2, #5
 80088c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80088d4:	2300      	movs	r3, #0
 80088d6:	2200      	movs	r2, #0
 80088d8:	f001 f9a6 	bl	8009c28 <osMessageQueuePut>
      break;
 80088dc:	e03f      	b.n	800895e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2207      	movs	r2, #7
 80088e2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2205      	movs	r2, #5
 80088e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80088f8:	2300      	movs	r3, #0
 80088fa:	2200      	movs	r2, #0
 80088fc:	f001 f994 	bl	8009c28 <osMessageQueuePut>
      break;
 8008900:	e02d      	b.n	800895e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008908:	2b00      	cmp	r3, #0
 800890a:	d017      	beq.n	800893c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008918:	23ff      	movs	r3, #255	; 0xff
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f958 	bl	8008bd0 <USBH_Get_StringDesc>
 8008920:	4603      	mov	r3, r0
 8008922:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d102      	bne.n	8008930 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800892e:	e018      	b.n	8008962 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	2b03      	cmp	r3, #3
 8008934:	d115      	bne.n	8008962 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]
      break;
 800893a:	e012      	b.n	8008962 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
      break;
 8008940:	e00f      	b.n	8008962 <USBH_HandleEnum+0x44a>

    default:
      break;
 8008942:	bf00      	nop
 8008944:	e00e      	b.n	8008964 <USBH_HandleEnum+0x44c>
      break;
 8008946:	bf00      	nop
 8008948:	e00c      	b.n	8008964 <USBH_HandleEnum+0x44c>
      break;
 800894a:	bf00      	nop
 800894c:	e00a      	b.n	8008964 <USBH_HandleEnum+0x44c>
      break;
 800894e:	bf00      	nop
 8008950:	e008      	b.n	8008964 <USBH_HandleEnum+0x44c>
      break;
 8008952:	bf00      	nop
 8008954:	e006      	b.n	8008964 <USBH_HandleEnum+0x44c>
      break;
 8008956:	bf00      	nop
 8008958:	e004      	b.n	8008964 <USBH_HandleEnum+0x44c>
      break;
 800895a:	bf00      	nop
 800895c:	e002      	b.n	8008964 <USBH_HandleEnum+0x44c>
      break;
 800895e:	bf00      	nop
 8008960:	e000      	b.n	8008964 <USBH_HandleEnum+0x44c>
      break;
 8008962:	bf00      	nop
  }
  return Status;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop

08008970 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008982:	bf00      	nop
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b082      	sub	sp, #8
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f804 	bl	80089b2 <USBH_HandleSof>
}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b0b      	cmp	r3, #11
 80089c2:	d10a      	bne.n	80089da <USBH_HandleSof+0x28>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d005      	beq.n	80089da <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
  }
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b082      	sub	sp, #8
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008a06:	2300      	movs	r3, #0
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f001 f90d 	bl	8009c28 <osMessageQueuePut>
#endif
#endif

  return;
 8008a0e:	bf00      	nop
}
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008a26:	bf00      	nop
}
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008a66:	2300      	movs	r3, #0
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f001 f8dd 	bl	8009c28 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f003 fffc 	bl	800ca96 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	791b      	ldrb	r3, [r3, #4]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fecf 	bl	8009848 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	795b      	ldrb	r3, [r3, #5]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fec9 	bl	8009848 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008aca:	2300      	movs	r3, #0
 8008acc:	2200      	movs	r2, #0
 8008ace:	f001 f8ab 	bl	8009c28 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008af4:	2200      	movs	r2, #0
 8008af6:	f001 f8f7 	bl	8009ce8 <osMessageQueueGet>
 8008afa:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1f0      	bne.n	8008ae4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff faa6 	bl	8008054 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008b08:	e7ec      	b.n	8008ae4 <USBH_Process_OS+0x8>

08008b0a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008b26:	2300      	movs	r3, #0
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f001 f87d 	bl	8009c28 <osMessageQueuePut>
#endif

  return USBH_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af02      	add	r7, sp, #8
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	4613      	mov	r3, r2
 8008b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b56:	2100      	movs	r1, #0
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f864 	bl	8008c26 <USBH_GetDescriptor>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	73fb      	strb	r3, [r7, #15]
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10a      	bne.n	8008b7e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b74:	78fa      	ldrb	r2, [r7, #3]
 8008b76:	b292      	uxth	r2, r2
 8008b78:	4619      	mov	r1, r3
 8008b7a:	f000 f918 	bl	8008dae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	331c      	adds	r3, #28
 8008b98:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008b9a:	887b      	ldrh	r3, [r7, #2]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f83d 	bl	8008c26 <USBH_GetDescriptor>
 8008bac:	4603      	mov	r3, r0
 8008bae:	72fb      	strb	r3, [r7, #11]
 8008bb0:	7afb      	ldrb	r3, [r7, #11]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d107      	bne.n	8008bc6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008bbc:	887a      	ldrh	r2, [r7, #2]
 8008bbe:	68f9      	ldr	r1, [r7, #12]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 f964 	bl	8008e8e <USBH_ParseCfgDesc>
  }

  return status;
 8008bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af02      	add	r7, sp, #8
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	607a      	str	r2, [r7, #4]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	460b      	mov	r3, r1
 8008bde:	72fb      	strb	r3, [r7, #11]
 8008be0:	4613      	mov	r3, r2
 8008be2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008be4:	7afb      	ldrb	r3, [r7, #11]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008bec:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008bf4:	893b      	ldrh	r3, [r7, #8]
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 f812 	bl	8008c26 <USBH_GetDescriptor>
 8008c02:	4603      	mov	r3, r0
 8008c04:	75fb      	strb	r3, [r7, #23]
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d107      	bne.n	8008c1c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c12:	893a      	ldrh	r2, [r7, #8]
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fa37 	bl	800908a <USBH_ParseStringDesc>
  }

  return status;
 8008c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	60f8      	str	r0, [r7, #12]
 8008c2e:	607b      	str	r3, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	72fb      	strb	r3, [r7, #11]
 8008c34:	4613      	mov	r3, r2
 8008c36:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	789b      	ldrb	r3, [r3, #2]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d11c      	bne.n	8008c7a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008c40:	7afb      	ldrb	r3, [r7, #11]
 8008c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2206      	movs	r2, #6
 8008c50:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	893a      	ldrh	r2, [r7, #8]
 8008c56:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008c58:	893b      	ldrh	r3, [r7, #8]
 8008c5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c62:	d104      	bne.n	8008c6e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f240 4209 	movw	r2, #1033	; 0x409
 8008c6a:	829a      	strh	r2, [r3, #20]
 8008c6c:	e002      	b.n	8008c74 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8b3a      	ldrh	r2, [r7, #24]
 8008c78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008c7a:	8b3b      	ldrh	r3, [r7, #24]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 fa50 	bl	8009126 <USBH_CtlReq>
 8008c86:	4603      	mov	r3, r0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	789b      	ldrb	r3, [r3, #2]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d10f      	bne.n	8008cc4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2205      	movs	r2, #5
 8008cae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fa2c 	bl	8009126 <USBH_CtlReq>
 8008cce:	4603      	mov	r3, r0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	789b      	ldrb	r3, [r3, #2]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d10e      	bne.n	8008d0a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2209      	movs	r2, #9
 8008cf6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	887a      	ldrh	r2, [r7, #2]
 8008cfc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fa09 	bl	8009126 <USBH_CtlReq>
 8008d14:	4603      	mov	r3, r0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	460b      	mov	r3, r1
 8008d28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	789b      	ldrb	r3, [r3, #2]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d10f      	bne.n	8008d52 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2203      	movs	r2, #3
 8008d3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008d3e:	78fb      	ldrb	r3, [r7, #3]
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008d52:	2200      	movs	r2, #0
 8008d54:	2100      	movs	r1, #0
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f9e5 	bl	8009126 <USBH_CtlReq>
 8008d5c:	4603      	mov	r3, r0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b082      	sub	sp, #8
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	789b      	ldrb	r3, [r3, #2]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d10f      	bne.n	8008d9a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f9c1 	bl	8009126 <USBH_CtlReq>
 8008da4:	4603      	mov	r3, r0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b085      	sub	sp, #20
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	4613      	mov	r3, r2
 8008dba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	781a      	ldrb	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	785a      	ldrb	r2, [r3, #1]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	3302      	adds	r3, #2
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	3303      	adds	r3, #3
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	021b      	lsls	r3, r3, #8
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	4313      	orrs	r3, r2
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	791a      	ldrb	r2, [r3, #4]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	795a      	ldrb	r2, [r3, #5]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	799a      	ldrb	r2, [r3, #6]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	79da      	ldrb	r2, [r3, #7]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008e08:	88fb      	ldrh	r3, [r7, #6]
 8008e0a:	2b08      	cmp	r3, #8
 8008e0c:	d939      	bls.n	8008e82 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	3308      	adds	r3, #8
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	3309      	adds	r3, #9
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	021b      	lsls	r3, r3, #8
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	4313      	orrs	r3, r2
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	330a      	adds	r3, #10
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	330b      	adds	r3, #11
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	021b      	lsls	r3, r3, #8
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	330c      	adds	r3, #12
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	330d      	adds	r3, #13
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	7b9a      	ldrb	r2, [r3, #14]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	7bda      	ldrb	r2, [r3, #15]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	7c1a      	ldrb	r2, [r3, #16]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	7c5a      	ldrb	r2, [r3, #17]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	745a      	strb	r2, [r3, #17]
  }
}
 8008e82:	bf00      	nop
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b08a      	sub	sp, #40	; 0x28
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	60f8      	str	r0, [r7, #12]
 8008e96:	60b9      	str	r1, [r7, #8]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	781a      	ldrb	r2, [r3, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	785a      	ldrb	r2, [r3, #1]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	3302      	adds	r3, #2
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	3303      	adds	r3, #3
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	021b      	lsls	r3, r3, #8
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	791a      	ldrb	r2, [r3, #4]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	795a      	ldrb	r2, [r3, #5]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	799a      	ldrb	r2, [r3, #6]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	79da      	ldrb	r2, [r3, #7]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	7a1a      	ldrb	r2, [r3, #8]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008f04:	88fb      	ldrh	r3, [r7, #6]
 8008f06:	2b09      	cmp	r3, #9
 8008f08:	d95f      	bls.n	8008fca <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008f0a:	2309      	movs	r3, #9
 8008f0c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f12:	e051      	b.n	8008fb8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f14:	f107 0316 	add.w	r3, r7, #22
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f1c:	f000 f8e8 	bl	80090f0 <USBH_GetNextDesc>
 8008f20:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d146      	bne.n	8008fb8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f2e:	221a      	movs	r2, #26
 8008f30:	fb02 f303 	mul.w	r3, r2, r3
 8008f34:	3308      	adds	r3, #8
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	3302      	adds	r3, #2
 8008f3c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008f3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f40:	69f8      	ldr	r0, [r7, #28]
 8008f42:	f000 f846 	bl	8008fd2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008f46:	2300      	movs	r3, #0
 8008f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f50:	e022      	b.n	8008f98 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f52:	f107 0316 	add.w	r3, r7, #22
 8008f56:	4619      	mov	r1, r3
 8008f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f5a:	f000 f8c9 	bl	80090f0 <USBH_GetNextDesc>
 8008f5e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	785b      	ldrb	r3, [r3, #1]
 8008f64:	2b05      	cmp	r3, #5
 8008f66:	d117      	bne.n	8008f98 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008f70:	3201      	adds	r2, #1
 8008f72:	00d2      	lsls	r2, r2, #3
 8008f74:	211a      	movs	r1, #26
 8008f76:	fb01 f303 	mul.w	r3, r1, r3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	4413      	add	r3, r2
 8008f82:	3304      	adds	r3, #4
 8008f84:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008f86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f88:	69b8      	ldr	r0, [r7, #24]
 8008f8a:	f000 f851 	bl	8009030 <USBH_ParseEPDesc>
            ep_ix++;
 8008f8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008f92:	3301      	adds	r3, #1
 8008f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	791b      	ldrb	r3, [r3, #4]
 8008f9c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d204      	bcs.n	8008fae <USBH_ParseCfgDesc+0x120>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	885a      	ldrh	r2, [r3, #2]
 8008fa8:	8afb      	ldrh	r3, [r7, #22]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d8d1      	bhi.n	8008f52 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d804      	bhi.n	8008fca <USBH_ParseCfgDesc+0x13c>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	885a      	ldrh	r2, [r3, #2]
 8008fc4:	8afb      	ldrh	r3, [r7, #22]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d8a4      	bhi.n	8008f14 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008fca:	bf00      	nop
 8008fcc:	3728      	adds	r7, #40	; 0x28
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	781a      	ldrb	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	785a      	ldrb	r2, [r3, #1]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	789a      	ldrb	r2, [r3, #2]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	78da      	ldrb	r2, [r3, #3]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	791a      	ldrb	r2, [r3, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	795a      	ldrb	r2, [r3, #5]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	799a      	ldrb	r2, [r3, #6]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	79da      	ldrb	r2, [r3, #7]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	7a1a      	ldrb	r2, [r3, #8]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	721a      	strb	r2, [r3, #8]
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781a      	ldrb	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	785a      	ldrb	r2, [r3, #1]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	789a      	ldrb	r2, [r3, #2]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	78da      	ldrb	r2, [r3, #3]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	3304      	adds	r3, #4
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	b29a      	uxth	r2, r3
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	3305      	adds	r3, #5
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	b29b      	uxth	r3, r3
 800906a:	021b      	lsls	r3, r3, #8
 800906c:	b29b      	uxth	r3, r3
 800906e:	4313      	orrs	r3, r2
 8009070:	b29a      	uxth	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	799a      	ldrb	r2, [r3, #6]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	719a      	strb	r2, [r3, #6]
}
 800907e:	bf00      	nop
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800908a:	b480      	push	{r7}
 800908c:	b087      	sub	sp, #28
 800908e:	af00      	add	r7, sp, #0
 8009090:	60f8      	str	r0, [r7, #12]
 8009092:	60b9      	str	r1, [r7, #8]
 8009094:	4613      	mov	r3, r2
 8009096:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3301      	adds	r3, #1
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d120      	bne.n	80090e4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	1e9a      	subs	r2, r3, #2
 80090a8:	88fb      	ldrh	r3, [r7, #6]
 80090aa:	4293      	cmp	r3, r2
 80090ac:	bf28      	it	cs
 80090ae:	4613      	movcs	r3, r2
 80090b0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3302      	adds	r3, #2
 80090b6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80090b8:	2300      	movs	r3, #0
 80090ba:	82fb      	strh	r3, [r7, #22]
 80090bc:	e00b      	b.n	80090d6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80090be:	8afb      	ldrh	r3, [r7, #22]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	3301      	adds	r3, #1
 80090ce:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80090d0:	8afb      	ldrh	r3, [r7, #22]
 80090d2:	3302      	adds	r3, #2
 80090d4:	82fb      	strh	r3, [r7, #22]
 80090d6:	8afa      	ldrh	r2, [r7, #22]
 80090d8:	8abb      	ldrh	r3, [r7, #20]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d3ef      	bcc.n	80090be <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2200      	movs	r2, #0
 80090e2:	701a      	strb	r2, [r3, #0]
  }
}
 80090e4:	bf00      	nop
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	881a      	ldrh	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	b29b      	uxth	r3, r3
 8009104:	4413      	add	r3, r2
 8009106:	b29a      	uxth	r2, r3
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4413      	add	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009118:	68fb      	ldr	r3, [r7, #12]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b086      	sub	sp, #24
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	4613      	mov	r3, r2
 8009132:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009134:	2301      	movs	r3, #1
 8009136:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	789b      	ldrb	r3, [r3, #2]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d002      	beq.n	8009146 <USBH_CtlReq+0x20>
 8009140:	2b02      	cmp	r3, #2
 8009142:	d01d      	beq.n	8009180 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009144:	e043      	b.n	80091ce <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	88fa      	ldrh	r2, [r7, #6]
 8009150:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2202      	movs	r2, #2
 800915c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800915e:	2301      	movs	r3, #1
 8009160:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2203      	movs	r2, #3
 8009166:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009176:	2300      	movs	r3, #0
 8009178:	2200      	movs	r2, #0
 800917a:	f000 fd55 	bl	8009c28 <osMessageQueuePut>
      break;
 800917e:	e026      	b.n	80091ce <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 f829 	bl	80091d8 <USBH_HandleControl>
 8009186:	4603      	mov	r3, r0
 8009188:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <USBH_CtlReq+0x70>
 8009190:	7dfb      	ldrb	r3, [r7, #23]
 8009192:	2b03      	cmp	r3, #3
 8009194:	d106      	bne.n	80091a4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2201      	movs	r2, #1
 800919a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	761a      	strb	r2, [r3, #24]
 80091a2:	e005      	b.n	80091b0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d102      	bne.n	80091b0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2203      	movs	r2, #3
 80091b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80091c4:	2300      	movs	r3, #0
 80091c6:	2200      	movs	r2, #0
 80091c8:	f000 fd2e 	bl	8009c28 <osMessageQueuePut>
      break;
 80091cc:	bf00      	nop
  }
  return status;
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3718      	adds	r7, #24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af02      	add	r7, sp, #8
 80091de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80091e0:	2301      	movs	r3, #1
 80091e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	7e1b      	ldrb	r3, [r3, #24]
 80091ec:	3b01      	subs	r3, #1
 80091ee:	2b0a      	cmp	r3, #10
 80091f0:	f200 8229 	bhi.w	8009646 <USBH_HandleControl+0x46e>
 80091f4:	a201      	add	r2, pc, #4	; (adr r2, 80091fc <USBH_HandleControl+0x24>)
 80091f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fa:	bf00      	nop
 80091fc:	08009229 	.word	0x08009229
 8009200:	08009243 	.word	0x08009243
 8009204:	080092e5 	.word	0x080092e5
 8009208:	0800930b 	.word	0x0800930b
 800920c:	08009397 	.word	0x08009397
 8009210:	080093c1 	.word	0x080093c1
 8009214:	08009483 	.word	0x08009483
 8009218:	080094a5 	.word	0x080094a5
 800921c:	08009537 	.word	0x08009537
 8009220:	0800955d 	.word	0x0800955d
 8009224:	080095ef 	.word	0x080095ef
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f103 0110 	add.w	r1, r3, #16
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	795b      	ldrb	r3, [r3, #5]
 8009232:	461a      	mov	r2, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fa17 	bl	8009668 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2202      	movs	r2, #2
 800923e:	761a      	strb	r2, [r3, #24]
      break;
 8009240:	e20c      	b.n	800965c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	795b      	ldrb	r3, [r3, #5]
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f003 fd13 	bl	800cc74 <USBH_LL_GetURBState>
 800924e:	4603      	mov	r3, r0
 8009250:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009252:	7bbb      	ldrb	r3, [r7, #14]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d12c      	bne.n	80092b2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	7c1b      	ldrb	r3, [r3, #16]
 800925c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009260:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	8adb      	ldrh	r3, [r3, #22]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800926a:	7b7b      	ldrb	r3, [r7, #13]
 800926c:	2b80      	cmp	r3, #128	; 0x80
 800926e:	d103      	bne.n	8009278 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2203      	movs	r2, #3
 8009274:	761a      	strb	r2, [r3, #24]
 8009276:	e00d      	b.n	8009294 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2205      	movs	r2, #5
 800927c:	761a      	strb	r2, [r3, #24]
 800927e:	e009      	b.n	8009294 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009280:	7b7b      	ldrb	r3, [r7, #13]
 8009282:	2b80      	cmp	r3, #128	; 0x80
 8009284:	d103      	bne.n	800928e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2209      	movs	r2, #9
 800928a:	761a      	strb	r2, [r3, #24]
 800928c:	e002      	b.n	8009294 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2207      	movs	r2, #7
 8009292:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2203      	movs	r2, #3
 8009298:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80092a8:	2300      	movs	r3, #0
 80092aa:	2200      	movs	r2, #0
 80092ac:	f000 fcbc 	bl	8009c28 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80092b0:	e1cb      	b.n	800964a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	2b04      	cmp	r3, #4
 80092b6:	d003      	beq.n	80092c0 <USBH_HandleControl+0xe8>
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	f040 81c5 	bne.w	800964a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	220b      	movs	r2, #11
 80092c4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2203      	movs	r2, #3
 80092ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80092da:	2300      	movs	r3, #0
 80092dc:	2200      	movs	r2, #0
 80092de:	f000 fca3 	bl	8009c28 <osMessageQueuePut>
      break;
 80092e2:	e1b2      	b.n	800964a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6899      	ldr	r1, [r3, #8]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	899a      	ldrh	r2, [r3, #12]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	791b      	ldrb	r3, [r3, #4]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f9f2 	bl	80096e6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2204      	movs	r2, #4
 8009306:	761a      	strb	r2, [r3, #24]
      break;
 8009308:	e1a8      	b.n	800965c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	791b      	ldrb	r3, [r3, #4]
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f003 fcaf 	bl	800cc74 <USBH_LL_GetURBState>
 8009316:	4603      	mov	r3, r0
 8009318:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d110      	bne.n	8009342 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2209      	movs	r2, #9
 8009324:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2203      	movs	r2, #3
 800932a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800933a:	2300      	movs	r3, #0
 800933c:	2200      	movs	r2, #0
 800933e:	f000 fc73 	bl	8009c28 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009342:	7bbb      	ldrb	r3, [r7, #14]
 8009344:	2b05      	cmp	r3, #5
 8009346:	d110      	bne.n	800936a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009348:	2303      	movs	r3, #3
 800934a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2203      	movs	r2, #3
 8009350:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009360:	2300      	movs	r3, #0
 8009362:	2200      	movs	r2, #0
 8009364:	f000 fc60 	bl	8009c28 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009368:	e171      	b.n	800964e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800936a:	7bbb      	ldrb	r3, [r7, #14]
 800936c:	2b04      	cmp	r3, #4
 800936e:	f040 816e 	bne.w	800964e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	220b      	movs	r2, #11
 8009376:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2203      	movs	r2, #3
 800937c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800938c:	2300      	movs	r3, #0
 800938e:	2200      	movs	r2, #0
 8009390:	f000 fc4a 	bl	8009c28 <osMessageQueuePut>
      break;
 8009394:	e15b      	b.n	800964e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6899      	ldr	r1, [r3, #8]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	899a      	ldrh	r2, [r3, #12]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	795b      	ldrb	r3, [r3, #5]
 80093a2:	2001      	movs	r0, #1
 80093a4:	9000      	str	r0, [sp, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f978 	bl	800969c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2206      	movs	r2, #6
 80093bc:	761a      	strb	r2, [r3, #24]
      break;
 80093be:	e14d      	b.n	800965c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	795b      	ldrb	r3, [r3, #5]
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f003 fc54 	bl	800cc74 <USBH_LL_GetURBState>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d111      	bne.n	80093fa <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2207      	movs	r2, #7
 80093da:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2203      	movs	r2, #3
 80093e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80093f0:	2300      	movs	r3, #0
 80093f2:	2200      	movs	r2, #0
 80093f4:	f000 fc18 	bl	8009c28 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80093f8:	e12b      	b.n	8009652 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b05      	cmp	r3, #5
 80093fe:	d113      	bne.n	8009428 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	220c      	movs	r2, #12
 8009404:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009406:	2303      	movs	r3, #3
 8009408:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2203      	movs	r2, #3
 800940e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800941e:	2300      	movs	r3, #0
 8009420:	2200      	movs	r2, #0
 8009422:	f000 fc01 	bl	8009c28 <osMessageQueuePut>
      break;
 8009426:	e114      	b.n	8009652 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009428:	7bbb      	ldrb	r3, [r7, #14]
 800942a:	2b02      	cmp	r3, #2
 800942c:	d111      	bne.n	8009452 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2205      	movs	r2, #5
 8009432:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2203      	movs	r2, #3
 8009438:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009448:	2300      	movs	r3, #0
 800944a:	2200      	movs	r2, #0
 800944c:	f000 fbec 	bl	8009c28 <osMessageQueuePut>
      break;
 8009450:	e0ff      	b.n	8009652 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	2b04      	cmp	r3, #4
 8009456:	f040 80fc 	bne.w	8009652 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	220b      	movs	r2, #11
 800945e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009460:	2302      	movs	r3, #2
 8009462:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2203      	movs	r2, #3
 8009468:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009478:	2300      	movs	r3, #0
 800947a:	2200      	movs	r2, #0
 800947c:	f000 fbd4 	bl	8009c28 <osMessageQueuePut>
      break;
 8009480:	e0e7      	b.n	8009652 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	791b      	ldrb	r3, [r3, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	2100      	movs	r1, #0
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f92b 	bl	80096e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009496:	b29a      	uxth	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2208      	movs	r2, #8
 80094a0:	761a      	strb	r2, [r3, #24]

      break;
 80094a2:	e0db      	b.n	800965c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	791b      	ldrb	r3, [r3, #4]
 80094a8:	4619      	mov	r1, r3
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f003 fbe2 	bl	800cc74 <USBH_LL_GetURBState>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d113      	bne.n	80094e2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	220d      	movs	r2, #13
 80094be:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2203      	movs	r2, #3
 80094c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80094d8:	2300      	movs	r3, #0
 80094da:	2200      	movs	r2, #0
 80094dc:	f000 fba4 	bl	8009c28 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80094e0:	e0b9      	b.n	8009656 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	2b04      	cmp	r3, #4
 80094e6:	d111      	bne.n	800950c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	220b      	movs	r2, #11
 80094ec:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2203      	movs	r2, #3
 80094f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009502:	2300      	movs	r3, #0
 8009504:	2200      	movs	r2, #0
 8009506:	f000 fb8f 	bl	8009c28 <osMessageQueuePut>
      break;
 800950a:	e0a4      	b.n	8009656 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	2b05      	cmp	r3, #5
 8009510:	f040 80a1 	bne.w	8009656 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009514:	2303      	movs	r3, #3
 8009516:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2203      	movs	r2, #3
 800951c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800952c:	2300      	movs	r3, #0
 800952e:	2200      	movs	r2, #0
 8009530:	f000 fb7a 	bl	8009c28 <osMessageQueuePut>
      break;
 8009534:	e08f      	b.n	8009656 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	795b      	ldrb	r3, [r3, #5]
 800953a:	2201      	movs	r2, #1
 800953c:	9200      	str	r2, [sp, #0]
 800953e:	2200      	movs	r2, #0
 8009540:	2100      	movs	r1, #0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f8aa 	bl	800969c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800954e:	b29a      	uxth	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	220a      	movs	r2, #10
 8009558:	761a      	strb	r2, [r3, #24]
      break;
 800955a:	e07f      	b.n	800965c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	795b      	ldrb	r3, [r3, #5]
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f003 fb86 	bl	800cc74 <USBH_LL_GetURBState>
 8009568:	4603      	mov	r3, r0
 800956a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d113      	bne.n	800959a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	220d      	movs	r2, #13
 800957a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2203      	movs	r2, #3
 8009580:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009590:	2300      	movs	r3, #0
 8009592:	2200      	movs	r2, #0
 8009594:	f000 fb48 	bl	8009c28 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009598:	e05f      	b.n	800965a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800959a:	7bbb      	ldrb	r3, [r7, #14]
 800959c:	2b02      	cmp	r3, #2
 800959e:	d111      	bne.n	80095c4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2209      	movs	r2, #9
 80095a4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2203      	movs	r2, #3
 80095aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095ba:	2300      	movs	r3, #0
 80095bc:	2200      	movs	r2, #0
 80095be:	f000 fb33 	bl	8009c28 <osMessageQueuePut>
      break;
 80095c2:	e04a      	b.n	800965a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
 80095c6:	2b04      	cmp	r3, #4
 80095c8:	d147      	bne.n	800965a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	220b      	movs	r2, #11
 80095ce:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2203      	movs	r2, #3
 80095d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095e4:	2300      	movs	r3, #0
 80095e6:	2200      	movs	r2, #0
 80095e8:	f000 fb1e 	bl	8009c28 <osMessageQueuePut>
      break;
 80095ec:	e035      	b.n	800965a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	7e5b      	ldrb	r3, [r3, #25]
 80095f2:	3301      	adds	r3, #1
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	765a      	strb	r2, [r3, #25]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	7e5b      	ldrb	r3, [r3, #25]
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d806      	bhi.n	8009610 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800960e:	e025      	b.n	800965c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009616:	2106      	movs	r1, #6
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	795b      	ldrb	r3, [r3, #5]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f90d 	bl	8009848 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	791b      	ldrb	r3, [r3, #4]
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f907 	bl	8009848 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009640:	2302      	movs	r3, #2
 8009642:	73fb      	strb	r3, [r7, #15]
      break;
 8009644:	e00a      	b.n	800965c <USBH_HandleControl+0x484>

    default:
      break;
 8009646:	bf00      	nop
 8009648:	e008      	b.n	800965c <USBH_HandleControl+0x484>
      break;
 800964a:	bf00      	nop
 800964c:	e006      	b.n	800965c <USBH_HandleControl+0x484>
      break;
 800964e:	bf00      	nop
 8009650:	e004      	b.n	800965c <USBH_HandleControl+0x484>
      break;
 8009652:	bf00      	nop
 8009654:	e002      	b.n	800965c <USBH_HandleControl+0x484>
      break;
 8009656:	bf00      	nop
 8009658:	e000      	b.n	800965c <USBH_HandleControl+0x484>
      break;
 800965a:	bf00      	nop
  }

  return status;
 800965c:	7bfb      	ldrb	r3, [r7, #15]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop

08009668 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b088      	sub	sp, #32
 800966c:	af04      	add	r7, sp, #16
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	4613      	mov	r3, r2
 8009674:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009676:	79f9      	ldrb	r1, [r7, #7]
 8009678:	2300      	movs	r3, #0
 800967a:	9303      	str	r3, [sp, #12]
 800967c:	2308      	movs	r3, #8
 800967e:	9302      	str	r3, [sp, #8]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	9301      	str	r3, [sp, #4]
 8009684:	2300      	movs	r3, #0
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	2300      	movs	r3, #0
 800968a:	2200      	movs	r2, #0
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f003 fac0 	bl	800cc12 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af04      	add	r7, sp, #16
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	4611      	mov	r1, r2
 80096a8:	461a      	mov	r2, r3
 80096aa:	460b      	mov	r3, r1
 80096ac:	80fb      	strh	r3, [r7, #6]
 80096ae:	4613      	mov	r3, r2
 80096b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80096c0:	7979      	ldrb	r1, [r7, #5]
 80096c2:	7e3b      	ldrb	r3, [r7, #24]
 80096c4:	9303      	str	r3, [sp, #12]
 80096c6:	88fb      	ldrh	r3, [r7, #6]
 80096c8:	9302      	str	r3, [sp, #8]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	9301      	str	r3, [sp, #4]
 80096ce:	2301      	movs	r3, #1
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	2300      	movs	r3, #0
 80096d4:	2200      	movs	r2, #0
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f003 fa9b 	bl	800cc12 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b088      	sub	sp, #32
 80096ea:	af04      	add	r7, sp, #16
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	4611      	mov	r1, r2
 80096f2:	461a      	mov	r2, r3
 80096f4:	460b      	mov	r3, r1
 80096f6:	80fb      	strh	r3, [r7, #6]
 80096f8:	4613      	mov	r3, r2
 80096fa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80096fc:	7979      	ldrb	r1, [r7, #5]
 80096fe:	2300      	movs	r3, #0
 8009700:	9303      	str	r3, [sp, #12]
 8009702:	88fb      	ldrh	r3, [r7, #6]
 8009704:	9302      	str	r3, [sp, #8]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	2301      	movs	r3, #1
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	2300      	movs	r3, #0
 8009710:	2201      	movs	r2, #1
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f003 fa7d 	bl	800cc12 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009718:	2300      	movs	r3, #0

}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b088      	sub	sp, #32
 8009726:	af04      	add	r7, sp, #16
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	4611      	mov	r1, r2
 800972e:	461a      	mov	r2, r3
 8009730:	460b      	mov	r3, r1
 8009732:	80fb      	strh	r3, [r7, #6]
 8009734:	4613      	mov	r3, r2
 8009736:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009746:	7979      	ldrb	r1, [r7, #5]
 8009748:	7e3b      	ldrb	r3, [r7, #24]
 800974a:	9303      	str	r3, [sp, #12]
 800974c:	88fb      	ldrh	r3, [r7, #6]
 800974e:	9302      	str	r3, [sp, #8]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	2301      	movs	r3, #1
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	2302      	movs	r3, #2
 800975a:	2200      	movs	r2, #0
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f003 fa58 	bl	800cc12 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af04      	add	r7, sp, #16
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	4611      	mov	r1, r2
 8009778:	461a      	mov	r2, r3
 800977a:	460b      	mov	r3, r1
 800977c:	80fb      	strh	r3, [r7, #6]
 800977e:	4613      	mov	r3, r2
 8009780:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009782:	7979      	ldrb	r1, [r7, #5]
 8009784:	2300      	movs	r3, #0
 8009786:	9303      	str	r3, [sp, #12]
 8009788:	88fb      	ldrh	r3, [r7, #6]
 800978a:	9302      	str	r3, [sp, #8]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	2301      	movs	r3, #1
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	2302      	movs	r3, #2
 8009796:	2201      	movs	r2, #1
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f003 fa3a 	bl	800cc12 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af04      	add	r7, sp, #16
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	4608      	mov	r0, r1
 80097b2:	4611      	mov	r1, r2
 80097b4:	461a      	mov	r2, r3
 80097b6:	4603      	mov	r3, r0
 80097b8:	70fb      	strb	r3, [r7, #3]
 80097ba:	460b      	mov	r3, r1
 80097bc:	70bb      	strb	r3, [r7, #2]
 80097be:	4613      	mov	r3, r2
 80097c0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80097c2:	7878      	ldrb	r0, [r7, #1]
 80097c4:	78ba      	ldrb	r2, [r7, #2]
 80097c6:	78f9      	ldrb	r1, [r7, #3]
 80097c8:	8b3b      	ldrh	r3, [r7, #24]
 80097ca:	9302      	str	r3, [sp, #8]
 80097cc:	7d3b      	ldrb	r3, [r7, #20]
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	7c3b      	ldrb	r3, [r7, #16]
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	4603      	mov	r3, r0
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f003 f9cd 	bl	800cb76 <USBH_LL_OpenPipe>

  return USBH_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b082      	sub	sp, #8
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	460b      	mov	r3, r1
 80097f0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80097f2:	78fb      	ldrb	r3, [r7, #3]
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f003 f9ec 	bl	800cbd4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b084      	sub	sp, #16
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	460b      	mov	r3, r1
 8009810:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f836 	bl	8009884 <USBH_GetFreePipe>
 8009818:	4603      	mov	r3, r0
 800981a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800981c:	89fb      	ldrh	r3, [r7, #14]
 800981e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009822:	4293      	cmp	r3, r2
 8009824:	d00a      	beq.n	800983c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009826:	78fa      	ldrb	r2, [r7, #3]
 8009828:	89fb      	ldrh	r3, [r7, #14]
 800982a:	f003 030f 	and.w	r3, r3, #15
 800982e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009832:	6879      	ldr	r1, [r7, #4]
 8009834:	33e0      	adds	r3, #224	; 0xe0
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800983c:	89fb      	ldrh	r3, [r7, #14]
 800983e:	b2db      	uxtb	r3, r3
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009854:	78fb      	ldrb	r3, [r7, #3]
 8009856:	2b0a      	cmp	r3, #10
 8009858:	d80d      	bhi.n	8009876 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	33e0      	adds	r3, #224	; 0xe0
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	78fb      	ldrb	r3, [r7, #3]
 8009868:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800986c:	6879      	ldr	r1, [r7, #4]
 800986e:	33e0      	adds	r3, #224	; 0xe0
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	440b      	add	r3, r1
 8009874:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800988c:	2300      	movs	r3, #0
 800988e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]
 8009894:	e00f      	b.n	80098b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009896:	7bfb      	ldrb	r3, [r7, #15]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	33e0      	adds	r3, #224	; 0xe0
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d102      	bne.n	80098b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	e007      	b.n	80098c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	3301      	adds	r3, #1
 80098b4:	73fb      	strb	r3, [r7, #15]
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	2b0a      	cmp	r3, #10
 80098ba:	d9ec      	bls.n	8009896 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80098bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <__NVIC_SetPriority>:
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	6039      	str	r1, [r7, #0]
 80098d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	db0a      	blt.n	80098f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	490c      	ldr	r1, [pc, #48]	; (8009918 <__NVIC_SetPriority+0x4c>)
 80098e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ea:	0112      	lsls	r2, r2, #4
 80098ec:	b2d2      	uxtb	r2, r2
 80098ee:	440b      	add	r3, r1
 80098f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80098f4:	e00a      	b.n	800990c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	4908      	ldr	r1, [pc, #32]	; (800991c <__NVIC_SetPriority+0x50>)
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	f003 030f 	and.w	r3, r3, #15
 8009902:	3b04      	subs	r3, #4
 8009904:	0112      	lsls	r2, r2, #4
 8009906:	b2d2      	uxtb	r2, r2
 8009908:	440b      	add	r3, r1
 800990a:	761a      	strb	r2, [r3, #24]
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	e000e100 	.word	0xe000e100
 800991c:	e000ed00 	.word	0xe000ed00

08009920 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009924:	4b05      	ldr	r3, [pc, #20]	; (800993c <SysTick_Handler+0x1c>)
 8009926:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009928:	f001 fee8 	bl	800b6fc <xTaskGetSchedulerState>
 800992c:	4603      	mov	r3, r0
 800992e:	2b01      	cmp	r3, #1
 8009930:	d001      	beq.n	8009936 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009932:	f002 fcd1 	bl	800c2d8 <xPortSysTickHandler>
  }
}
 8009936:	bf00      	nop
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	e000e010 	.word	0xe000e010

08009940 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009944:	2100      	movs	r1, #0
 8009946:	f06f 0004 	mvn.w	r0, #4
 800994a:	f7ff ffbf 	bl	80098cc <__NVIC_SetPriority>
#endif
}
 800994e:	bf00      	nop
 8009950:	bd80      	pop	{r7, pc}
	...

08009954 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800995a:	f3ef 8305 	mrs	r3, IPSR
 800995e:	603b      	str	r3, [r7, #0]
  return(result);
 8009960:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009966:	f06f 0305 	mvn.w	r3, #5
 800996a:	607b      	str	r3, [r7, #4]
 800996c:	e00c      	b.n	8009988 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800996e:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <osKernelInitialize+0x44>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d105      	bne.n	8009982 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009976:	4b08      	ldr	r3, [pc, #32]	; (8009998 <osKernelInitialize+0x44>)
 8009978:	2201      	movs	r2, #1
 800997a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800997c:	2300      	movs	r3, #0
 800997e:	607b      	str	r3, [r7, #4]
 8009980:	e002      	b.n	8009988 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009986:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009988:	687b      	ldr	r3, [r7, #4]
}
 800998a:	4618      	mov	r0, r3
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	200004bc 	.word	0x200004bc

0800999c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099a2:	f3ef 8305 	mrs	r3, IPSR
 80099a6:	603b      	str	r3, [r7, #0]
  return(result);
 80099a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80099ae:	f06f 0305 	mvn.w	r3, #5
 80099b2:	607b      	str	r3, [r7, #4]
 80099b4:	e010      	b.n	80099d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80099b6:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <osKernelStart+0x48>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d109      	bne.n	80099d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80099be:	f7ff ffbf 	bl	8009940 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80099c2:	4b08      	ldr	r3, [pc, #32]	; (80099e4 <osKernelStart+0x48>)
 80099c4:	2202      	movs	r2, #2
 80099c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80099c8:	f001 fa50 	bl	800ae6c <vTaskStartScheduler>
      stat = osOK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	607b      	str	r3, [r7, #4]
 80099d0:	e002      	b.n	80099d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80099d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099d8:	687b      	ldr	r3, [r7, #4]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	200004bc 	.word	0x200004bc

080099e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08e      	sub	sp, #56	; 0x38
 80099ec:	af04      	add	r7, sp, #16
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80099f4:	2300      	movs	r3, #0
 80099f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099f8:	f3ef 8305 	mrs	r3, IPSR
 80099fc:	617b      	str	r3, [r7, #20]
  return(result);
 80099fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d17e      	bne.n	8009b02 <osThreadNew+0x11a>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d07b      	beq.n	8009b02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009a0a:	2380      	movs	r3, #128	; 0x80
 8009a0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009a0e:	2318      	movs	r3, #24
 8009a10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d045      	beq.n	8009aae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <osThreadNew+0x48>
        name = attr->name;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d008      	beq.n	8009a56 <osThreadNew+0x6e>
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	2b38      	cmp	r3, #56	; 0x38
 8009a48:	d805      	bhi.n	8009a56 <osThreadNew+0x6e>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <osThreadNew+0x72>
        return (NULL);
 8009a56:	2300      	movs	r3, #0
 8009a58:	e054      	b.n	8009b04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	089b      	lsrs	r3, r3, #2
 8009a68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00e      	beq.n	8009a90 <osThreadNew+0xa8>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	2b5b      	cmp	r3, #91	; 0x5b
 8009a78:	d90a      	bls.n	8009a90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d006      	beq.n	8009a90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <osThreadNew+0xa8>
        mem = 1;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	61bb      	str	r3, [r7, #24]
 8009a8e:	e010      	b.n	8009ab2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10c      	bne.n	8009ab2 <osThreadNew+0xca>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d108      	bne.n	8009ab2 <osThreadNew+0xca>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d104      	bne.n	8009ab2 <osThreadNew+0xca>
          mem = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	61bb      	str	r3, [r7, #24]
 8009aac:	e001      	b.n	8009ab2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d110      	bne.n	8009ada <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ac0:	9202      	str	r2, [sp, #8]
 8009ac2:	9301      	str	r3, [sp, #4]
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	6a3a      	ldr	r2, [r7, #32]
 8009acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 fff6 	bl	800aac0 <xTaskCreateStatic>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	613b      	str	r3, [r7, #16]
 8009ad8:	e013      	b.n	8009b02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d110      	bne.n	8009b02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	f107 0310 	add.w	r3, r7, #16
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f001 f841 	bl	800ab7a <xTaskCreate>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d001      	beq.n	8009b02 <osThreadNew+0x11a>
            hTask = NULL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009b02:	693b      	ldr	r3, [r7, #16]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3728      	adds	r7, #40	; 0x28
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b14:	f3ef 8305 	mrs	r3, IPSR
 8009b18:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d003      	beq.n	8009b28 <osDelay+0x1c>
    stat = osErrorISR;
 8009b20:	f06f 0305 	mvn.w	r3, #5
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	e007      	b.n	8009b38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d002      	beq.n	8009b38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f001 f966 	bl	800ae04 <vTaskDelay>
    }
  }

  return (stat);
 8009b38:	68fb      	ldr	r3, [r7, #12]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b08a      	sub	sp, #40	; 0x28
 8009b46:	af02      	add	r7, sp, #8
 8009b48:	60f8      	str	r0, [r7, #12]
 8009b4a:	60b9      	str	r1, [r7, #8]
 8009b4c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b52:	f3ef 8305 	mrs	r3, IPSR
 8009b56:	613b      	str	r3, [r7, #16]
  return(result);
 8009b58:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d15f      	bne.n	8009c1e <osMessageQueueNew+0xdc>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d05c      	beq.n	8009c1e <osMessageQueueNew+0xdc>
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d059      	beq.n	8009c1e <osMessageQueueNew+0xdc>
    mem = -1;
 8009b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d029      	beq.n	8009bca <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d012      	beq.n	8009ba4 <osMessageQueueNew+0x62>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	2b4f      	cmp	r3, #79	; 0x4f
 8009b84:	d90e      	bls.n	8009ba4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	695a      	ldr	r2, [r3, #20]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	68b9      	ldr	r1, [r7, #8]
 8009b96:	fb01 f303 	mul.w	r3, r1, r3
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d302      	bcc.n	8009ba4 <osMessageQueueNew+0x62>
        mem = 1;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	61bb      	str	r3, [r7, #24]
 8009ba2:	e014      	b.n	8009bce <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d110      	bne.n	8009bce <osMessageQueueNew+0x8c>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10c      	bne.n	8009bce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d108      	bne.n	8009bce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d104      	bne.n	8009bce <osMessageQueueNew+0x8c>
          mem = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	61bb      	str	r3, [r7, #24]
 8009bc8:	e001      	b.n	8009bce <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d10b      	bne.n	8009bec <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	691a      	ldr	r2, [r3, #16]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	2100      	movs	r1, #0
 8009bde:	9100      	str	r1, [sp, #0]
 8009be0:	68b9      	ldr	r1, [r7, #8]
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f000 fa2e 	bl	800a044 <xQueueGenericCreateStatic>
 8009be8:	61f8      	str	r0, [r7, #28]
 8009bea:	e008      	b.n	8009bfe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d105      	bne.n	8009bfe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	68b9      	ldr	r1, [r7, #8]
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 fa9c 	bl	800a134 <xQueueGenericCreate>
 8009bfc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00c      	beq.n	8009c1e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	617b      	str	r3, [r7, #20]
 8009c10:	e001      	b.n	8009c16 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009c12:	2300      	movs	r3, #0
 8009c14:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009c16:	6979      	ldr	r1, [r7, #20]
 8009c18:	69f8      	ldr	r0, [r7, #28]
 8009c1a:	f000 fef3 	bl	800aa04 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009c1e:	69fb      	ldr	r3, [r7, #28]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3720      	adds	r7, #32
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	603b      	str	r3, [r7, #0]
 8009c34:	4613      	mov	r3, r2
 8009c36:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c40:	f3ef 8305 	mrs	r3, IPSR
 8009c44:	617b      	str	r3, [r7, #20]
  return(result);
 8009c46:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d028      	beq.n	8009c9e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d005      	beq.n	8009c5e <osMessageQueuePut+0x36>
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <osMessageQueuePut+0x36>
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009c5e:	f06f 0303 	mvn.w	r3, #3
 8009c62:	61fb      	str	r3, [r7, #28]
 8009c64:	e038      	b.n	8009cd8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009c66:	2300      	movs	r3, #0
 8009c68:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009c6a:	f107 0210 	add.w	r2, r7, #16
 8009c6e:	2300      	movs	r3, #0
 8009c70:	68b9      	ldr	r1, [r7, #8]
 8009c72:	69b8      	ldr	r0, [r7, #24]
 8009c74:	f000 fbba 	bl	800a3ec <xQueueGenericSendFromISR>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d003      	beq.n	8009c86 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009c7e:	f06f 0302 	mvn.w	r3, #2
 8009c82:	61fb      	str	r3, [r7, #28]
 8009c84:	e028      	b.n	8009cd8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d025      	beq.n	8009cd8 <osMessageQueuePut+0xb0>
 8009c8c:	4b15      	ldr	r3, [pc, #84]	; (8009ce4 <osMessageQueuePut+0xbc>)
 8009c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	e01c      	b.n	8009cd8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <osMessageQueuePut+0x82>
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d103      	bne.n	8009cb2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009caa:	f06f 0303 	mvn.w	r3, #3
 8009cae:	61fb      	str	r3, [r7, #28]
 8009cb0:	e012      	b.n	8009cd8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	68b9      	ldr	r1, [r7, #8]
 8009cb8:	69b8      	ldr	r0, [r7, #24]
 8009cba:	f000 fa99 	bl	800a1f0 <xQueueGenericSend>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d009      	beq.n	8009cd8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009cca:	f06f 0301 	mvn.w	r3, #1
 8009cce:	61fb      	str	r3, [r7, #28]
 8009cd0:	e002      	b.n	8009cd8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009cd2:	f06f 0302 	mvn.w	r3, #2
 8009cd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009cd8:	69fb      	ldr	r3, [r7, #28]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3720      	adds	r7, #32
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	e000ed04 	.word	0xe000ed04

08009ce8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
 8009cf4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cfe:	f3ef 8305 	mrs	r3, IPSR
 8009d02:	617b      	str	r3, [r7, #20]
  return(result);
 8009d04:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d028      	beq.n	8009d5c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d005      	beq.n	8009d1c <osMessageQueueGet+0x34>
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <osMessageQueueGet+0x34>
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d003      	beq.n	8009d24 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009d1c:	f06f 0303 	mvn.w	r3, #3
 8009d20:	61fb      	str	r3, [r7, #28]
 8009d22:	e037      	b.n	8009d94 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009d24:	2300      	movs	r3, #0
 8009d26:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009d28:	f107 0310 	add.w	r3, r7, #16
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	68b9      	ldr	r1, [r7, #8]
 8009d30:	69b8      	ldr	r0, [r7, #24]
 8009d32:	f000 fcd7 	bl	800a6e4 <xQueueReceiveFromISR>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d003      	beq.n	8009d44 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009d3c:	f06f 0302 	mvn.w	r3, #2
 8009d40:	61fb      	str	r3, [r7, #28]
 8009d42:	e027      	b.n	8009d94 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d024      	beq.n	8009d94 <osMessageQueueGet+0xac>
 8009d4a:	4b15      	ldr	r3, [pc, #84]	; (8009da0 <osMessageQueueGet+0xb8>)
 8009d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d50:	601a      	str	r2, [r3, #0]
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	e01b      	b.n	8009d94 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <osMessageQueueGet+0x80>
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d103      	bne.n	8009d70 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009d68:	f06f 0303 	mvn.w	r3, #3
 8009d6c:	61fb      	str	r3, [r7, #28]
 8009d6e:	e011      	b.n	8009d94 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	68b9      	ldr	r1, [r7, #8]
 8009d74:	69b8      	ldr	r0, [r7, #24]
 8009d76:	f000 fbd5 	bl	800a524 <xQueueReceive>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d009      	beq.n	8009d94 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009d86:	f06f 0301 	mvn.w	r3, #1
 8009d8a:	61fb      	str	r3, [r7, #28]
 8009d8c:	e002      	b.n	8009d94 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009d8e:	f06f 0302 	mvn.w	r3, #2
 8009d92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009d94:	69fb      	ldr	r3, [r7, #28]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	e000ed04 	.word	0xe000ed04

08009da4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4a07      	ldr	r2, [pc, #28]	; (8009dd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009db4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	4a06      	ldr	r2, [pc, #24]	; (8009dd4 <vApplicationGetIdleTaskMemory+0x30>)
 8009dba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2280      	movs	r2, #128	; 0x80
 8009dc0:	601a      	str	r2, [r3, #0]
}
 8009dc2:	bf00      	nop
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	200004c0 	.word	0x200004c0
 8009dd4:	2000051c 	.word	0x2000051c

08009dd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	4a07      	ldr	r2, [pc, #28]	; (8009e04 <vApplicationGetTimerTaskMemory+0x2c>)
 8009de8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	4a06      	ldr	r2, [pc, #24]	; (8009e08 <vApplicationGetTimerTaskMemory+0x30>)
 8009dee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009df6:	601a      	str	r2, [r3, #0]
}
 8009df8:	bf00      	nop
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	2000071c 	.word	0x2000071c
 8009e08:	20000778 	.word	0x20000778

08009e0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f103 0208 	add.w	r2, r3, #8
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f103 0208 	add.w	r2, r3, #8
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f103 0208 	add.w	r2, r3, #8
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e5a:	bf00      	nop
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	689a      	ldr	r2, [r3, #8]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	601a      	str	r2, [r3, #0]
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b085      	sub	sp, #20
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ec4:	d103      	bne.n	8009ece <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	e00c      	b.n	8009ee8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e002      	b.n	8009edc <vListInsert+0x2e>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d2f6      	bcs.n	8009ed6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	601a      	str	r2, [r3, #0]
}
 8009f14:	bf00      	nop
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6892      	ldr	r2, [r2, #8]
 8009f36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	6852      	ldr	r2, [r2, #4]
 8009f40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d103      	bne.n	8009f54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	689a      	ldr	r2, [r3, #8]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	1e5a      	subs	r2, r3, #1
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10a      	bne.n	8009f9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f9a:	bf00      	nop
 8009f9c:	e7fe      	b.n	8009f9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f9e:	f002 f909 	bl	800c1b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	68f9      	ldr	r1, [r7, #12]
 8009fac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fae:	fb01 f303 	mul.w	r3, r1, r3
 8009fb2:	441a      	add	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	68f9      	ldr	r1, [r7, #12]
 8009fd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fd4:	fb01 f303 	mul.w	r3, r1, r3
 8009fd8:	441a      	add	r2, r3
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	22ff      	movs	r2, #255	; 0xff
 8009fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	22ff      	movs	r2, #255	; 0xff
 8009fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d114      	bne.n	800a01e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d01a      	beq.n	800a032 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3310      	adds	r3, #16
 800a000:	4618      	mov	r0, r3
 800a002:	f001 f9bd 	bl	800b380 <xTaskRemoveFromEventList>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d012      	beq.n	800a032 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a00c:	4b0c      	ldr	r3, [pc, #48]	; (800a040 <xQueueGenericReset+0xcc>)
 800a00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	e009      	b.n	800a032 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3310      	adds	r3, #16
 800a022:	4618      	mov	r0, r3
 800a024:	f7ff fef2 	bl	8009e0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3324      	adds	r3, #36	; 0x24
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff feed 	bl	8009e0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a032:	f002 f8ef 	bl	800c214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a036:	2301      	movs	r3, #1
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	e000ed04 	.word	0xe000ed04

0800a044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08e      	sub	sp, #56	; 0x38
 800a048:	af02      	add	r7, sp, #8
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <xQueueGenericCreateStatic+0x52>
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <xQueueGenericCreateStatic+0x56>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <xQueueGenericCreateStatic+0x58>
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	623b      	str	r3, [r7, #32]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d102      	bne.n	800a0c2 <xQueueGenericCreateStatic+0x7e>
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d101      	bne.n	800a0c6 <xQueueGenericCreateStatic+0x82>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e000      	b.n	800a0c8 <xQueueGenericCreateStatic+0x84>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10a      	bne.n	800a0e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	61fb      	str	r3, [r7, #28]
}
 800a0de:	bf00      	nop
 800a0e0:	e7fe      	b.n	800a0e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0e2:	2350      	movs	r3, #80	; 0x50
 800a0e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2b50      	cmp	r3, #80	; 0x50
 800a0ea:	d00a      	beq.n	800a102 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	61bb      	str	r3, [r7, #24]
}
 800a0fe:	bf00      	nop
 800a100:	e7fe      	b.n	800a100 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a102:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00d      	beq.n	800a12a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a116:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	4613      	mov	r3, r2
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	68b9      	ldr	r1, [r7, #8]
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 f83f 	bl	800a1a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3730      	adds	r7, #48	; 0x30
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a134:	b580      	push	{r7, lr}
 800a136:	b08a      	sub	sp, #40	; 0x28
 800a138:	af02      	add	r7, sp, #8
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	4613      	mov	r3, r2
 800a140:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	613b      	str	r3, [r7, #16]
}
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	fb02 f303 	mul.w	r3, r2, r3
 800a166:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	3350      	adds	r3, #80	; 0x50
 800a16c:	4618      	mov	r0, r3
 800a16e:	f002 f943 	bl	800c3f8 <pvPortMalloc>
 800a172:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d011      	beq.n	800a19e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	3350      	adds	r3, #80	; 0x50
 800a182:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a18c:	79fa      	ldrb	r2, [r7, #7]
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	4613      	mov	r3, r2
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	68b9      	ldr	r1, [r7, #8]
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f000 f805 	bl	800a1a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a19e:	69bb      	ldr	r3, [r7, #24]
	}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3720      	adds	r7, #32
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d103      	bne.n	800a1c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	601a      	str	r2, [r3, #0]
 800a1c2:	e002      	b.n	800a1ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	69b8      	ldr	r0, [r7, #24]
 800a1da:	f7ff fecb 	bl	8009f74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	78fa      	ldrb	r2, [r7, #3]
 800a1e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
	...

0800a1f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08e      	sub	sp, #56	; 0x38
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1fe:	2300      	movs	r3, #0
 800a200:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <xQueueGenericSend+0x32>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d103      	bne.n	800a230 <xQueueGenericSend+0x40>
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <xQueueGenericSend+0x44>
 800a230:	2301      	movs	r3, #1
 800a232:	e000      	b.n	800a236 <xQueueGenericSend+0x46>
 800a234:	2300      	movs	r3, #0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10a      	bne.n	800a250 <xQueueGenericSend+0x60>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a24c:	bf00      	nop
 800a24e:	e7fe      	b.n	800a24e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2b02      	cmp	r3, #2
 800a254:	d103      	bne.n	800a25e <xQueueGenericSend+0x6e>
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d101      	bne.n	800a262 <xQueueGenericSend+0x72>
 800a25e:	2301      	movs	r3, #1
 800a260:	e000      	b.n	800a264 <xQueueGenericSend+0x74>
 800a262:	2300      	movs	r3, #0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10a      	bne.n	800a27e <xQueueGenericSend+0x8e>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	623b      	str	r3, [r7, #32]
}
 800a27a:	bf00      	nop
 800a27c:	e7fe      	b.n	800a27c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a27e:	f001 fa3d 	bl	800b6fc <xTaskGetSchedulerState>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <xQueueGenericSend+0x9e>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <xQueueGenericSend+0xa2>
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <xQueueGenericSend+0xa4>
 800a292:	2300      	movs	r3, #0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <xQueueGenericSend+0xbe>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	61fb      	str	r3, [r7, #28]
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2ae:	f001 ff81 	bl	800c1b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d302      	bcc.n	800a2c4 <xQueueGenericSend+0xd4>
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d129      	bne.n	800a318 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ca:	f000 fa8b 	bl	800a7e4 <prvCopyDataToQueue>
 800a2ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d010      	beq.n	800a2fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	3324      	adds	r3, #36	; 0x24
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f001 f84f 	bl	800b380 <xTaskRemoveFromEventList>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d013      	beq.n	800a310 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a2e8:	4b3f      	ldr	r3, [pc, #252]	; (800a3e8 <xQueueGenericSend+0x1f8>)
 800a2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	e00a      	b.n	800a310 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d007      	beq.n	800a310 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a300:	4b39      	ldr	r3, [pc, #228]	; (800a3e8 <xQueueGenericSend+0x1f8>)
 800a302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a310:	f001 ff80 	bl	800c214 <vPortExitCritical>
				return pdPASS;
 800a314:	2301      	movs	r3, #1
 800a316:	e063      	b.n	800a3e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d103      	bne.n	800a326 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a31e:	f001 ff79 	bl	800c214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a322:	2300      	movs	r3, #0
 800a324:	e05c      	b.n	800a3e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d106      	bne.n	800a33a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a32c:	f107 0314 	add.w	r3, r7, #20
 800a330:	4618      	mov	r0, r3
 800a332:	f001 f889 	bl	800b448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a336:	2301      	movs	r3, #1
 800a338:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a33a:	f001 ff6b 	bl	800c214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a33e:	f000 fdfb 	bl	800af38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a342:	f001 ff37 	bl	800c1b4 <vPortEnterCritical>
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a34c:	b25b      	sxtb	r3, r3
 800a34e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a352:	d103      	bne.n	800a35c <xQueueGenericSend+0x16c>
 800a354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a362:	b25b      	sxtb	r3, r3
 800a364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a368:	d103      	bne.n	800a372 <xQueueGenericSend+0x182>
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a372:	f001 ff4f 	bl	800c214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a376:	1d3a      	adds	r2, r7, #4
 800a378:	f107 0314 	add.w	r3, r7, #20
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 f878 	bl	800b474 <xTaskCheckForTimeOut>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d124      	bne.n	800a3d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a38a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a38c:	f000 fb22 	bl	800a9d4 <prvIsQueueFull>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d018      	beq.n	800a3c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	3310      	adds	r3, #16
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	4611      	mov	r1, r2
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 ff9e 	bl	800b2e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a3a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3a6:	f000 faad 	bl	800a904 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a3aa:	f000 fdd3 	bl	800af54 <xTaskResumeAll>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f47f af7c 	bne.w	800a2ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a3b6:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <xQueueGenericSend+0x1f8>)
 800a3b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	e772      	b.n	800a2ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a3c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ca:	f000 fa9b 	bl	800a904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3ce:	f000 fdc1 	bl	800af54 <xTaskResumeAll>
 800a3d2:	e76c      	b.n	800a2ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a3d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3d6:	f000 fa95 	bl	800a904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3da:	f000 fdbb 	bl	800af54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3738      	adds	r7, #56	; 0x38
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	e000ed04 	.word	0xe000ed04

0800a3ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b090      	sub	sp, #64	; 0x40
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10a      	bne.n	800a41a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a416:	bf00      	nop
 800a418:	e7fe      	b.n	800a418 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d103      	bne.n	800a428 <xQueueGenericSendFromISR+0x3c>
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a424:	2b00      	cmp	r3, #0
 800a426:	d101      	bne.n	800a42c <xQueueGenericSendFromISR+0x40>
 800a428:	2301      	movs	r3, #1
 800a42a:	e000      	b.n	800a42e <xQueueGenericSendFromISR+0x42>
 800a42c:	2300      	movs	r3, #0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a444:	bf00      	nop
 800a446:	e7fe      	b.n	800a446 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d103      	bne.n	800a456 <xQueueGenericSendFromISR+0x6a>
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a452:	2b01      	cmp	r3, #1
 800a454:	d101      	bne.n	800a45a <xQueueGenericSendFromISR+0x6e>
 800a456:	2301      	movs	r3, #1
 800a458:	e000      	b.n	800a45c <xQueueGenericSendFromISR+0x70>
 800a45a:	2300      	movs	r3, #0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	623b      	str	r3, [r7, #32]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a476:	f001 ff7f 	bl	800c378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a47a:	f3ef 8211 	mrs	r2, BASEPRI
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	61fa      	str	r2, [r7, #28]
 800a490:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a492:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a494:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d302      	bcc.n	800a4a8 <xQueueGenericSendFromISR+0xbc>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d12f      	bne.n	800a508 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4be:	f000 f991 	bl	800a7e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4ca:	d112      	bne.n	800a4f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d016      	beq.n	800a502 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	3324      	adds	r3, #36	; 0x24
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 ff51 	bl	800b380 <xTaskRemoveFromEventList>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00e      	beq.n	800a502 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00b      	beq.n	800a502 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	e007      	b.n	800a502 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	b25a      	sxtb	r2, r3
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a502:	2301      	movs	r3, #1
 800a504:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a506:	e001      	b.n	800a50c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a508:	2300      	movs	r3, #0
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a516:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3740      	adds	r7, #64	; 0x40
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
	...

0800a524 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b08c      	sub	sp, #48	; 0x30
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a530:	2300      	movs	r3, #0
 800a532:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10a      	bne.n	800a554 <xQueueReceive+0x30>
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	623b      	str	r3, [r7, #32]
}
 800a550:	bf00      	nop
 800a552:	e7fe      	b.n	800a552 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d103      	bne.n	800a562 <xQueueReceive+0x3e>
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d101      	bne.n	800a566 <xQueueReceive+0x42>
 800a562:	2301      	movs	r3, #1
 800a564:	e000      	b.n	800a568 <xQueueReceive+0x44>
 800a566:	2300      	movs	r3, #0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <xQueueReceive+0x5e>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	61fb      	str	r3, [r7, #28]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a582:	f001 f8bb 	bl	800b6fc <xTaskGetSchedulerState>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d102      	bne.n	800a592 <xQueueReceive+0x6e>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <xQueueReceive+0x72>
 800a592:	2301      	movs	r3, #1
 800a594:	e000      	b.n	800a598 <xQueueReceive+0x74>
 800a596:	2300      	movs	r3, #0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10a      	bne.n	800a5b2 <xQueueReceive+0x8e>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	61bb      	str	r3, [r7, #24]
}
 800a5ae:	bf00      	nop
 800a5b0:	e7fe      	b.n	800a5b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5b2:	f001 fdff 	bl	800c1b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d01f      	beq.n	800a602 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5c2:	68b9      	ldr	r1, [r7, #8]
 800a5c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5c6:	f000 f977 	bl	800a8b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	1e5a      	subs	r2, r3, #1
 800a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00f      	beq.n	800a5fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5dc:	3310      	adds	r3, #16
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 fece 	bl	800b380 <xTaskRemoveFromEventList>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d007      	beq.n	800a5fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5ea:	4b3d      	ldr	r3, [pc, #244]	; (800a6e0 <xQueueReceive+0x1bc>)
 800a5ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5fa:	f001 fe0b 	bl	800c214 <vPortExitCritical>
				return pdPASS;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e069      	b.n	800a6d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d103      	bne.n	800a610 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a608:	f001 fe04 	bl	800c214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a60c:	2300      	movs	r3, #0
 800a60e:	e062      	b.n	800a6d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a612:	2b00      	cmp	r3, #0
 800a614:	d106      	bne.n	800a624 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a616:	f107 0310 	add.w	r3, r7, #16
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 ff14 	bl	800b448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a620:	2301      	movs	r3, #1
 800a622:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a624:	f001 fdf6 	bl	800c214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a628:	f000 fc86 	bl	800af38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a62c:	f001 fdc2 	bl	800c1b4 <vPortEnterCritical>
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a636:	b25b      	sxtb	r3, r3
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a63c:	d103      	bne.n	800a646 <xQueueReceive+0x122>
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a64c:	b25b      	sxtb	r3, r3
 800a64e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a652:	d103      	bne.n	800a65c <xQueueReceive+0x138>
 800a654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a65c:	f001 fdda 	bl	800c214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a660:	1d3a      	adds	r2, r7, #4
 800a662:	f107 0310 	add.w	r3, r7, #16
 800a666:	4611      	mov	r1, r2
 800a668:	4618      	mov	r0, r3
 800a66a:	f000 ff03 	bl	800b474 <xTaskCheckForTimeOut>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d123      	bne.n	800a6bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a676:	f000 f997 	bl	800a9a8 <prvIsQueueEmpty>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d017      	beq.n	800a6b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a682:	3324      	adds	r3, #36	; 0x24
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	4611      	mov	r1, r2
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 fe29 	bl	800b2e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a690:	f000 f938 	bl	800a904 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a694:	f000 fc5e 	bl	800af54 <xTaskResumeAll>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d189      	bne.n	800a5b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a69e:	4b10      	ldr	r3, [pc, #64]	; (800a6e0 <xQueueReceive+0x1bc>)
 800a6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6a4:	601a      	str	r2, [r3, #0]
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	e780      	b.n	800a5b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a6b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6b2:	f000 f927 	bl	800a904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6b6:	f000 fc4d 	bl	800af54 <xTaskResumeAll>
 800a6ba:	e77a      	b.n	800a5b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a6bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6be:	f000 f921 	bl	800a904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6c2:	f000 fc47 	bl	800af54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6c8:	f000 f96e 	bl	800a9a8 <prvIsQueueEmpty>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f43f af6f 	beq.w	800a5b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3730      	adds	r7, #48	; 0x30
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	e000ed04 	.word	0xe000ed04

0800a6e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b08e      	sub	sp, #56	; 0x38
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10a      	bne.n	800a710 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	623b      	str	r3, [r7, #32]
}
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d103      	bne.n	800a71e <xQueueReceiveFromISR+0x3a>
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <xQueueReceiveFromISR+0x3e>
 800a71e:	2301      	movs	r3, #1
 800a720:	e000      	b.n	800a724 <xQueueReceiveFromISR+0x40>
 800a722:	2300      	movs	r3, #0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10a      	bne.n	800a73e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	61fb      	str	r3, [r7, #28]
}
 800a73a:	bf00      	nop
 800a73c:	e7fe      	b.n	800a73c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a73e:	f001 fe1b 	bl	800c378 <vPortValidateInterruptPriority>
	__asm volatile
 800a742:	f3ef 8211 	mrs	r2, BASEPRI
 800a746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	61ba      	str	r2, [r7, #24]
 800a758:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a75a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a75c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	2b00      	cmp	r3, #0
 800a768:	d02f      	beq.n	800a7ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a774:	68b9      	ldr	r1, [r7, #8]
 800a776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a778:	f000 f89e 	bl	800a8b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77e:	1e5a      	subs	r2, r3, #1
 800a780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a782:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a784:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a78c:	d112      	bne.n	800a7b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d016      	beq.n	800a7c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a798:	3310      	adds	r3, #16
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fdf0 	bl	800b380 <xTaskRemoveFromEventList>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00e      	beq.n	800a7c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00b      	beq.n	800a7c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	601a      	str	r2, [r3, #0]
 800a7b2:	e007      	b.n	800a7c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	b25a      	sxtb	r2, r3
 800a7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a7c8:	e001      	b.n	800a7ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	f383 8811 	msr	BASEPRI, r3
}
 800a7d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3738      	adds	r7, #56	; 0x38
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10d      	bne.n	800a81e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d14d      	bne.n	800a8a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 ff92 	bl	800b738 <xTaskPriorityDisinherit>
 800a814:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	609a      	str	r2, [r3, #8]
 800a81c:	e043      	b.n	800a8a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d119      	bne.n	800a858 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6858      	ldr	r0, [r3, #4]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82c:	461a      	mov	r2, r3
 800a82e:	68b9      	ldr	r1, [r7, #8]
 800a830:	f002 fb08 	bl	800ce44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	685a      	ldr	r2, [r3, #4]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83c:	441a      	add	r2, r3
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d32b      	bcc.n	800a8a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	605a      	str	r2, [r3, #4]
 800a856:	e026      	b.n	800a8a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	68d8      	ldr	r0, [r3, #12]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a860:	461a      	mov	r2, r3
 800a862:	68b9      	ldr	r1, [r7, #8]
 800a864:	f002 faee 	bl	800ce44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	68da      	ldr	r2, [r3, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a870:	425b      	negs	r3, r3
 800a872:	441a      	add	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	68da      	ldr	r2, [r3, #12]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	429a      	cmp	r2, r3
 800a882:	d207      	bcs.n	800a894 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	689a      	ldr	r2, [r3, #8]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88c:	425b      	negs	r3, r3
 800a88e:	441a      	add	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b02      	cmp	r3, #2
 800a898:	d105      	bne.n	800a8a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	1c5a      	adds	r2, r3, #1
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a8ae:	697b      	ldr	r3, [r7, #20]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3718      	adds	r7, #24
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d018      	beq.n	800a8fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	68da      	ldr	r2, [r3, #12]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	441a      	add	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68da      	ldr	r2, [r3, #12]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d303      	bcc.n	800a8ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	68d9      	ldr	r1, [r3, #12]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	6838      	ldr	r0, [r7, #0]
 800a8f8:	f002 faa4 	bl	800ce44 <memcpy>
	}
}
 800a8fc:	bf00      	nop
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a90c:	f001 fc52 	bl	800c1b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a916:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a918:	e011      	b.n	800a93e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d012      	beq.n	800a948 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3324      	adds	r3, #36	; 0x24
 800a926:	4618      	mov	r0, r3
 800a928:	f000 fd2a 	bl	800b380 <xTaskRemoveFromEventList>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a932:	f000 fe01 	bl	800b538 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a936:	7bfb      	ldrb	r3, [r7, #15]
 800a938:	3b01      	subs	r3, #1
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a93e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a942:	2b00      	cmp	r3, #0
 800a944:	dce9      	bgt.n	800a91a <prvUnlockQueue+0x16>
 800a946:	e000      	b.n	800a94a <prvUnlockQueue+0x46>
					break;
 800a948:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	22ff      	movs	r2, #255	; 0xff
 800a94e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a952:	f001 fc5f 	bl	800c214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a956:	f001 fc2d 	bl	800c1b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a960:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a962:	e011      	b.n	800a988 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d012      	beq.n	800a992 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	3310      	adds	r3, #16
 800a970:	4618      	mov	r0, r3
 800a972:	f000 fd05 	bl	800b380 <xTaskRemoveFromEventList>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d001      	beq.n	800a980 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a97c:	f000 fddc 	bl	800b538 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	3b01      	subs	r3, #1
 800a984:	b2db      	uxtb	r3, r3
 800a986:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dce9      	bgt.n	800a964 <prvUnlockQueue+0x60>
 800a990:	e000      	b.n	800a994 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a992:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	22ff      	movs	r2, #255	; 0xff
 800a998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a99c:	f001 fc3a 	bl	800c214 <vPortExitCritical>
}
 800a9a0:	bf00      	nop
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9b0:	f001 fc00 	bl	800c1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d102      	bne.n	800a9c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	e001      	b.n	800a9c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9c6:	f001 fc25 	bl	800c214 <vPortExitCritical>

	return xReturn;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9dc:	f001 fbea 	bl	800c1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d102      	bne.n	800a9f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	e001      	b.n	800a9f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9f6:	f001 fc0d 	bl	800c214 <vPortExitCritical>

	return xReturn;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa0e:	2300      	movs	r3, #0
 800aa10:	60fb      	str	r3, [r7, #12]
 800aa12:	e014      	b.n	800aa3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa14:	4a0f      	ldr	r2, [pc, #60]	; (800aa54 <vQueueAddToRegistry+0x50>)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10b      	bne.n	800aa38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa20:	490c      	ldr	r1, [pc, #48]	; (800aa54 <vQueueAddToRegistry+0x50>)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa2a:	4a0a      	ldr	r2, [pc, #40]	; (800aa54 <vQueueAddToRegistry+0x50>)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	4413      	add	r3, r2
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa36:	e006      	b.n	800aa46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2b07      	cmp	r3, #7
 800aa42:	d9e7      	bls.n	800aa14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	20004f84 	.word	0x20004f84

0800aa58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa68:	f001 fba4 	bl	800c1b4 <vPortEnterCritical>
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa72:	b25b      	sxtb	r3, r3
 800aa74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa78:	d103      	bne.n	800aa82 <vQueueWaitForMessageRestricted+0x2a>
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa88:	b25b      	sxtb	r3, r3
 800aa8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa8e:	d103      	bne.n	800aa98 <vQueueWaitForMessageRestricted+0x40>
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa98:	f001 fbbc 	bl	800c214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d106      	bne.n	800aab2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	3324      	adds	r3, #36	; 0x24
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	68b9      	ldr	r1, [r7, #8]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 fc3b 	bl	800b328 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aab2:	6978      	ldr	r0, [r7, #20]
 800aab4:	f7ff ff26 	bl	800a904 <prvUnlockQueue>
	}
 800aab8:	bf00      	nop
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b08e      	sub	sp, #56	; 0x38
 800aac4:	af04      	add	r7, sp, #16
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10a      	bne.n	800aaea <xTaskCreateStatic+0x2a>
	__asm volatile
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	623b      	str	r3, [r7, #32]
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10a      	bne.n	800ab06 <xTaskCreateStatic+0x46>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	61fb      	str	r3, [r7, #28]
}
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab06:	235c      	movs	r3, #92	; 0x5c
 800ab08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	2b5c      	cmp	r3, #92	; 0x5c
 800ab0e:	d00a      	beq.n	800ab26 <xTaskCreateStatic+0x66>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	61bb      	str	r3, [r7, #24]
}
 800ab22:	bf00      	nop
 800ab24:	e7fe      	b.n	800ab24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d01e      	beq.n	800ab6c <xTaskCreateStatic+0xac>
 800ab2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d01b      	beq.n	800ab6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	2202      	movs	r2, #2
 800ab42:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab46:	2300      	movs	r3, #0
 800ab48:	9303      	str	r3, [sp, #12]
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	9302      	str	r3, [sp, #8]
 800ab4e:	f107 0314 	add.w	r3, r7, #20
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	68b9      	ldr	r1, [r7, #8]
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 f850 	bl	800ac04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab66:	f000 f8dd 	bl	800ad24 <prvAddNewTaskToReadyList>
 800ab6a:	e001      	b.n	800ab70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab70:	697b      	ldr	r3, [r7, #20]
	}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3728      	adds	r7, #40	; 0x28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b08c      	sub	sp, #48	; 0x30
 800ab7e:	af04      	add	r7, sp, #16
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	60b9      	str	r1, [r7, #8]
 800ab84:	603b      	str	r3, [r7, #0]
 800ab86:	4613      	mov	r3, r2
 800ab88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab8a:	88fb      	ldrh	r3, [r7, #6]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f001 fc32 	bl	800c3f8 <pvPortMalloc>
 800ab94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00e      	beq.n	800abba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab9c:	205c      	movs	r0, #92	; 0x5c
 800ab9e:	f001 fc2b 	bl	800c3f8 <pvPortMalloc>
 800aba2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	631a      	str	r2, [r3, #48]	; 0x30
 800abb0:	e005      	b.n	800abbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abb2:	6978      	ldr	r0, [r7, #20]
 800abb4:	f001 fcec 	bl	800c590 <vPortFree>
 800abb8:	e001      	b.n	800abbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abba:	2300      	movs	r3, #0
 800abbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d017      	beq.n	800abf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abcc:	88fa      	ldrh	r2, [r7, #6]
 800abce:	2300      	movs	r3, #0
 800abd0:	9303      	str	r3, [sp, #12]
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	9302      	str	r3, [sp, #8]
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	68b9      	ldr	r1, [r7, #8]
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 f80e 	bl	800ac04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abe8:	69f8      	ldr	r0, [r7, #28]
 800abea:	f000 f89b 	bl	800ad24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abee:	2301      	movs	r3, #1
 800abf0:	61bb      	str	r3, [r7, #24]
 800abf2:	e002      	b.n	800abfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abfa:	69bb      	ldr	r3, [r7, #24]
	}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3720      	adds	r7, #32
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
 800ac10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	21a5      	movs	r1, #165	; 0xa5
 800ac1e:	f002 f91f 	bl	800ce60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	f023 0307 	bic.w	r3, r3, #7
 800ac3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	f003 0307 	and.w	r3, r3, #7
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00a      	beq.n	800ac5c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ac46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	617b      	str	r3, [r7, #20]
}
 800ac58:	bf00      	nop
 800ac5a:	e7fe      	b.n	800ac5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d01f      	beq.n	800aca2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac62:	2300      	movs	r3, #0
 800ac64:	61fb      	str	r3, [r7, #28]
 800ac66:	e012      	b.n	800ac8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	7819      	ldrb	r1, [r3, #0]
 800ac70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	4413      	add	r3, r2
 800ac76:	3334      	adds	r3, #52	; 0x34
 800ac78:	460a      	mov	r2, r1
 800ac7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	4413      	add	r3, r2
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d006      	beq.n	800ac96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	61fb      	str	r3, [r7, #28]
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	2b0f      	cmp	r3, #15
 800ac92:	d9e9      	bls.n	800ac68 <prvInitialiseNewTask+0x64>
 800ac94:	e000      	b.n	800ac98 <prvInitialiseNewTask+0x94>
			{
				break;
 800ac96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aca0:	e003      	b.n	800acaa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	2b37      	cmp	r3, #55	; 0x37
 800acae:	d901      	bls.n	800acb4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acb0:	2337      	movs	r3, #55	; 0x37
 800acb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	2200      	movs	r2, #0
 800acc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc8:	3304      	adds	r3, #4
 800acca:	4618      	mov	r0, r3
 800accc:	f7ff f8be 	bl	8009e4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd2:	3318      	adds	r3, #24
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7ff f8b9 	bl	8009e4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ace6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf2:	2200      	movs	r2, #0
 800acf4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	68f9      	ldr	r1, [r7, #12]
 800ad02:	69b8      	ldr	r0, [r7, #24]
 800ad04:	f001 f928 	bl	800bf58 <pxPortInitialiseStack>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad1a:	bf00      	nop
 800ad1c:	3720      	adds	r7, #32
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad2c:	f001 fa42 	bl	800c1b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad30:	4b2d      	ldr	r3, [pc, #180]	; (800ade8 <prvAddNewTaskToReadyList+0xc4>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	3301      	adds	r3, #1
 800ad36:	4a2c      	ldr	r2, [pc, #176]	; (800ade8 <prvAddNewTaskToReadyList+0xc4>)
 800ad38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad3a:	4b2c      	ldr	r3, [pc, #176]	; (800adec <prvAddNewTaskToReadyList+0xc8>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d109      	bne.n	800ad56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad42:	4a2a      	ldr	r2, [pc, #168]	; (800adec <prvAddNewTaskToReadyList+0xc8>)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad48:	4b27      	ldr	r3, [pc, #156]	; (800ade8 <prvAddNewTaskToReadyList+0xc4>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d110      	bne.n	800ad72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad50:	f000 fc16 	bl	800b580 <prvInitialiseTaskLists>
 800ad54:	e00d      	b.n	800ad72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad56:	4b26      	ldr	r3, [pc, #152]	; (800adf0 <prvAddNewTaskToReadyList+0xcc>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d109      	bne.n	800ad72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad5e:	4b23      	ldr	r3, [pc, #140]	; (800adec <prvAddNewTaskToReadyList+0xc8>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d802      	bhi.n	800ad72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad6c:	4a1f      	ldr	r2, [pc, #124]	; (800adec <prvAddNewTaskToReadyList+0xc8>)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad72:	4b20      	ldr	r3, [pc, #128]	; (800adf4 <prvAddNewTaskToReadyList+0xd0>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	3301      	adds	r3, #1
 800ad78:	4a1e      	ldr	r2, [pc, #120]	; (800adf4 <prvAddNewTaskToReadyList+0xd0>)
 800ad7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad7c:	4b1d      	ldr	r3, [pc, #116]	; (800adf4 <prvAddNewTaskToReadyList+0xd0>)
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad88:	4b1b      	ldr	r3, [pc, #108]	; (800adf8 <prvAddNewTaskToReadyList+0xd4>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d903      	bls.n	800ad98 <prvAddNewTaskToReadyList+0x74>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad94:	4a18      	ldr	r2, [pc, #96]	; (800adf8 <prvAddNewTaskToReadyList+0xd4>)
 800ad96:	6013      	str	r3, [r2, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	4413      	add	r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	4a15      	ldr	r2, [pc, #84]	; (800adfc <prvAddNewTaskToReadyList+0xd8>)
 800ada6:	441a      	add	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	3304      	adds	r3, #4
 800adac:	4619      	mov	r1, r3
 800adae:	4610      	mov	r0, r2
 800adb0:	f7ff f859 	bl	8009e66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800adb4:	f001 fa2e 	bl	800c214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800adb8:	4b0d      	ldr	r3, [pc, #52]	; (800adf0 <prvAddNewTaskToReadyList+0xcc>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00e      	beq.n	800adde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adc0:	4b0a      	ldr	r3, [pc, #40]	; (800adec <prvAddNewTaskToReadyList+0xc8>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adca:	429a      	cmp	r2, r3
 800adcc:	d207      	bcs.n	800adde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adce:	4b0c      	ldr	r3, [pc, #48]	; (800ae00 <prvAddNewTaskToReadyList+0xdc>)
 800add0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adde:	bf00      	nop
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	2000104c 	.word	0x2000104c
 800adec:	20000b78 	.word	0x20000b78
 800adf0:	20001058 	.word	0x20001058
 800adf4:	20001068 	.word	0x20001068
 800adf8:	20001054 	.word	0x20001054
 800adfc:	20000b7c 	.word	0x20000b7c
 800ae00:	e000ed04 	.word	0xe000ed04

0800ae04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d017      	beq.n	800ae46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae16:	4b13      	ldr	r3, [pc, #76]	; (800ae64 <vTaskDelay+0x60>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00a      	beq.n	800ae34 <vTaskDelay+0x30>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	60bb      	str	r3, [r7, #8]
}
 800ae30:	bf00      	nop
 800ae32:	e7fe      	b.n	800ae32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae34:	f000 f880 	bl	800af38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae38:	2100      	movs	r1, #0
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fcea 	bl	800b814 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae40:	f000 f888 	bl	800af54 <xTaskResumeAll>
 800ae44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d107      	bne.n	800ae5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae4c:	4b06      	ldr	r3, [pc, #24]	; (800ae68 <vTaskDelay+0x64>)
 800ae4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae5c:	bf00      	nop
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	20001074 	.word	0x20001074
 800ae68:	e000ed04 	.word	0xe000ed04

0800ae6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08a      	sub	sp, #40	; 0x28
 800ae70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae76:	2300      	movs	r3, #0
 800ae78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae7a:	463a      	mov	r2, r7
 800ae7c:	1d39      	adds	r1, r7, #4
 800ae7e:	f107 0308 	add.w	r3, r7, #8
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fe ff8e 	bl	8009da4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	9202      	str	r2, [sp, #8]
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	2300      	movs	r3, #0
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	2300      	movs	r3, #0
 800ae98:	460a      	mov	r2, r1
 800ae9a:	4921      	ldr	r1, [pc, #132]	; (800af20 <vTaskStartScheduler+0xb4>)
 800ae9c:	4821      	ldr	r0, [pc, #132]	; (800af24 <vTaskStartScheduler+0xb8>)
 800ae9e:	f7ff fe0f 	bl	800aac0 <xTaskCreateStatic>
 800aea2:	4603      	mov	r3, r0
 800aea4:	4a20      	ldr	r2, [pc, #128]	; (800af28 <vTaskStartScheduler+0xbc>)
 800aea6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aea8:	4b1f      	ldr	r3, [pc, #124]	; (800af28 <vTaskStartScheduler+0xbc>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	e001      	b.n	800aeba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d102      	bne.n	800aec6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aec0:	f000 fcfc 	bl	800b8bc <xTimerCreateTimerTask>
 800aec4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d116      	bne.n	800aefa <vTaskStartScheduler+0x8e>
	__asm volatile
 800aecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed0:	f383 8811 	msr	BASEPRI, r3
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	613b      	str	r3, [r7, #16]
}
 800aede:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aee0:	4b12      	ldr	r3, [pc, #72]	; (800af2c <vTaskStartScheduler+0xc0>)
 800aee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aee6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aee8:	4b11      	ldr	r3, [pc, #68]	; (800af30 <vTaskStartScheduler+0xc4>)
 800aeea:	2201      	movs	r2, #1
 800aeec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aeee:	4b11      	ldr	r3, [pc, #68]	; (800af34 <vTaskStartScheduler+0xc8>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aef4:	f001 f8bc 	bl	800c070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aef8:	e00e      	b.n	800af18 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af00:	d10a      	bne.n	800af18 <vTaskStartScheduler+0xac>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	60fb      	str	r3, [r7, #12]
}
 800af14:	bf00      	nop
 800af16:	e7fe      	b.n	800af16 <vTaskStartScheduler+0xaa>
}
 800af18:	bf00      	nop
 800af1a:	3718      	adds	r7, #24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	0800d054 	.word	0x0800d054
 800af24:	0800b551 	.word	0x0800b551
 800af28:	20001070 	.word	0x20001070
 800af2c:	2000106c 	.word	0x2000106c
 800af30:	20001058 	.word	0x20001058
 800af34:	20001050 	.word	0x20001050

0800af38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af38:	b480      	push	{r7}
 800af3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af3c:	4b04      	ldr	r3, [pc, #16]	; (800af50 <vTaskSuspendAll+0x18>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3301      	adds	r3, #1
 800af42:	4a03      	ldr	r2, [pc, #12]	; (800af50 <vTaskSuspendAll+0x18>)
 800af44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af46:	bf00      	nop
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	20001074 	.word	0x20001074

0800af54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af5e:	2300      	movs	r3, #0
 800af60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af62:	4b42      	ldr	r3, [pc, #264]	; (800b06c <xTaskResumeAll+0x118>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <xTaskResumeAll+0x2c>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	603b      	str	r3, [r7, #0]
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af80:	f001 f918 	bl	800c1b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af84:	4b39      	ldr	r3, [pc, #228]	; (800b06c <xTaskResumeAll+0x118>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3b01      	subs	r3, #1
 800af8a:	4a38      	ldr	r2, [pc, #224]	; (800b06c <xTaskResumeAll+0x118>)
 800af8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af8e:	4b37      	ldr	r3, [pc, #220]	; (800b06c <xTaskResumeAll+0x118>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d162      	bne.n	800b05c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af96:	4b36      	ldr	r3, [pc, #216]	; (800b070 <xTaskResumeAll+0x11c>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d05e      	beq.n	800b05c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af9e:	e02f      	b.n	800b000 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afa0:	4b34      	ldr	r3, [pc, #208]	; (800b074 <xTaskResumeAll+0x120>)
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	3318      	adds	r3, #24
 800afac:	4618      	mov	r0, r3
 800afae:	f7fe ffb7 	bl	8009f20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe ffb2 	bl	8009f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc0:	4b2d      	ldr	r3, [pc, #180]	; (800b078 <xTaskResumeAll+0x124>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d903      	bls.n	800afd0 <xTaskResumeAll+0x7c>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afcc:	4a2a      	ldr	r2, [pc, #168]	; (800b078 <xTaskResumeAll+0x124>)
 800afce:	6013      	str	r3, [r2, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd4:	4613      	mov	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4a27      	ldr	r2, [pc, #156]	; (800b07c <xTaskResumeAll+0x128>)
 800afde:	441a      	add	r2, r3
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3304      	adds	r3, #4
 800afe4:	4619      	mov	r1, r3
 800afe6:	4610      	mov	r0, r2
 800afe8:	f7fe ff3d 	bl	8009e66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff0:	4b23      	ldr	r3, [pc, #140]	; (800b080 <xTaskResumeAll+0x12c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d302      	bcc.n	800b000 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800affa:	4b22      	ldr	r3, [pc, #136]	; (800b084 <xTaskResumeAll+0x130>)
 800affc:	2201      	movs	r2, #1
 800affe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b000:	4b1c      	ldr	r3, [pc, #112]	; (800b074 <xTaskResumeAll+0x120>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1cb      	bne.n	800afa0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b00e:	f000 fb55 	bl	800b6bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b012:	4b1d      	ldr	r3, [pc, #116]	; (800b088 <xTaskResumeAll+0x134>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d010      	beq.n	800b040 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b01e:	f000 f847 	bl	800b0b0 <xTaskIncrementTick>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b028:	4b16      	ldr	r3, [pc, #88]	; (800b084 <xTaskResumeAll+0x130>)
 800b02a:	2201      	movs	r2, #1
 800b02c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	3b01      	subs	r3, #1
 800b032:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1f1      	bne.n	800b01e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b03a:	4b13      	ldr	r3, [pc, #76]	; (800b088 <xTaskResumeAll+0x134>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b040:	4b10      	ldr	r3, [pc, #64]	; (800b084 <xTaskResumeAll+0x130>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d009      	beq.n	800b05c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b048:	2301      	movs	r3, #1
 800b04a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b04c:	4b0f      	ldr	r3, [pc, #60]	; (800b08c <xTaskResumeAll+0x138>)
 800b04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b05c:	f001 f8da 	bl	800c214 <vPortExitCritical>

	return xAlreadyYielded;
 800b060:	68bb      	ldr	r3, [r7, #8]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20001074 	.word	0x20001074
 800b070:	2000104c 	.word	0x2000104c
 800b074:	2000100c 	.word	0x2000100c
 800b078:	20001054 	.word	0x20001054
 800b07c:	20000b7c 	.word	0x20000b7c
 800b080:	20000b78 	.word	0x20000b78
 800b084:	20001060 	.word	0x20001060
 800b088:	2000105c 	.word	0x2000105c
 800b08c:	e000ed04 	.word	0xe000ed04

0800b090 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b096:	4b05      	ldr	r3, [pc, #20]	; (800b0ac <xTaskGetTickCount+0x1c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b09c:	687b      	ldr	r3, [r7, #4]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	20001050 	.word	0x20001050

0800b0b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0ba:	4b4f      	ldr	r3, [pc, #316]	; (800b1f8 <xTaskIncrementTick+0x148>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f040 808f 	bne.w	800b1e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0c4:	4b4d      	ldr	r3, [pc, #308]	; (800b1fc <xTaskIncrementTick+0x14c>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0cc:	4a4b      	ldr	r2, [pc, #300]	; (800b1fc <xTaskIncrementTick+0x14c>)
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d120      	bne.n	800b11a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0d8:	4b49      	ldr	r3, [pc, #292]	; (800b200 <xTaskIncrementTick+0x150>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	603b      	str	r3, [r7, #0]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <xTaskIncrementTick+0x46>
 800b0f8:	4b41      	ldr	r3, [pc, #260]	; (800b200 <xTaskIncrementTick+0x150>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	60fb      	str	r3, [r7, #12]
 800b0fe:	4b41      	ldr	r3, [pc, #260]	; (800b204 <xTaskIncrementTick+0x154>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a3f      	ldr	r2, [pc, #252]	; (800b200 <xTaskIncrementTick+0x150>)
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	4a3f      	ldr	r2, [pc, #252]	; (800b204 <xTaskIncrementTick+0x154>)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	4b3e      	ldr	r3, [pc, #248]	; (800b208 <xTaskIncrementTick+0x158>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3301      	adds	r3, #1
 800b112:	4a3d      	ldr	r2, [pc, #244]	; (800b208 <xTaskIncrementTick+0x158>)
 800b114:	6013      	str	r3, [r2, #0]
 800b116:	f000 fad1 	bl	800b6bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b11a:	4b3c      	ldr	r3, [pc, #240]	; (800b20c <xTaskIncrementTick+0x15c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	429a      	cmp	r2, r3
 800b122:	d349      	bcc.n	800b1b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b124:	4b36      	ldr	r3, [pc, #216]	; (800b200 <xTaskIncrementTick+0x150>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d104      	bne.n	800b138 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b12e:	4b37      	ldr	r3, [pc, #220]	; (800b20c <xTaskIncrementTick+0x15c>)
 800b130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b134:	601a      	str	r2, [r3, #0]
					break;
 800b136:	e03f      	b.n	800b1b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b138:	4b31      	ldr	r3, [pc, #196]	; (800b200 <xTaskIncrementTick+0x150>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b148:	693a      	ldr	r2, [r7, #16]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d203      	bcs.n	800b158 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b150:	4a2e      	ldr	r2, [pc, #184]	; (800b20c <xTaskIncrementTick+0x15c>)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b156:	e02f      	b.n	800b1b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	3304      	adds	r3, #4
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fe fedf 	bl	8009f20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b166:	2b00      	cmp	r3, #0
 800b168:	d004      	beq.n	800b174 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	3318      	adds	r3, #24
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fe fed6 	bl	8009f20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b178:	4b25      	ldr	r3, [pc, #148]	; (800b210 <xTaskIncrementTick+0x160>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d903      	bls.n	800b188 <xTaskIncrementTick+0xd8>
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	4a22      	ldr	r2, [pc, #136]	; (800b210 <xTaskIncrementTick+0x160>)
 800b186:	6013      	str	r3, [r2, #0]
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4a1f      	ldr	r2, [pc, #124]	; (800b214 <xTaskIncrementTick+0x164>)
 800b196:	441a      	add	r2, r3
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	3304      	adds	r3, #4
 800b19c:	4619      	mov	r1, r3
 800b19e:	4610      	mov	r0, r2
 800b1a0:	f7fe fe61 	bl	8009e66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a8:	4b1b      	ldr	r3, [pc, #108]	; (800b218 <xTaskIncrementTick+0x168>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d3b8      	bcc.n	800b124 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1b6:	e7b5      	b.n	800b124 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1b8:	4b17      	ldr	r3, [pc, #92]	; (800b218 <xTaskIncrementTick+0x168>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1be:	4915      	ldr	r1, [pc, #84]	; (800b214 <xTaskIncrementTick+0x164>)
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	440b      	add	r3, r1
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d901      	bls.n	800b1d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1d4:	4b11      	ldr	r3, [pc, #68]	; (800b21c <xTaskIncrementTick+0x16c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d007      	beq.n	800b1ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	617b      	str	r3, [r7, #20]
 800b1e0:	e004      	b.n	800b1ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1e2:	4b0f      	ldr	r3, [pc, #60]	; (800b220 <xTaskIncrementTick+0x170>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	4a0d      	ldr	r2, [pc, #52]	; (800b220 <xTaskIncrementTick+0x170>)
 800b1ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1ec:	697b      	ldr	r3, [r7, #20]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20001074 	.word	0x20001074
 800b1fc:	20001050 	.word	0x20001050
 800b200:	20001004 	.word	0x20001004
 800b204:	20001008 	.word	0x20001008
 800b208:	20001064 	.word	0x20001064
 800b20c:	2000106c 	.word	0x2000106c
 800b210:	20001054 	.word	0x20001054
 800b214:	20000b7c 	.word	0x20000b7c
 800b218:	20000b78 	.word	0x20000b78
 800b21c:	20001060 	.word	0x20001060
 800b220:	2000105c 	.word	0x2000105c

0800b224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b22a:	4b28      	ldr	r3, [pc, #160]	; (800b2cc <vTaskSwitchContext+0xa8>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b232:	4b27      	ldr	r3, [pc, #156]	; (800b2d0 <vTaskSwitchContext+0xac>)
 800b234:	2201      	movs	r2, #1
 800b236:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b238:	e041      	b.n	800b2be <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b23a:	4b25      	ldr	r3, [pc, #148]	; (800b2d0 <vTaskSwitchContext+0xac>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b240:	4b24      	ldr	r3, [pc, #144]	; (800b2d4 <vTaskSwitchContext+0xb0>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	60fb      	str	r3, [r7, #12]
 800b246:	e010      	b.n	800b26a <vTaskSwitchContext+0x46>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10a      	bne.n	800b264 <vTaskSwitchContext+0x40>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	607b      	str	r3, [r7, #4]
}
 800b260:	bf00      	nop
 800b262:	e7fe      	b.n	800b262 <vTaskSwitchContext+0x3e>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	3b01      	subs	r3, #1
 800b268:	60fb      	str	r3, [r7, #12]
 800b26a:	491b      	ldr	r1, [pc, #108]	; (800b2d8 <vTaskSwitchContext+0xb4>)
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	4613      	mov	r3, r2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	440b      	add	r3, r1
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d0e4      	beq.n	800b248 <vTaskSwitchContext+0x24>
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	4613      	mov	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	4413      	add	r3, r2
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4a13      	ldr	r2, [pc, #76]	; (800b2d8 <vTaskSwitchContext+0xb4>)
 800b28a:	4413      	add	r3, r2
 800b28c:	60bb      	str	r3, [r7, #8]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	605a      	str	r2, [r3, #4]
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	3308      	adds	r3, #8
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d104      	bne.n	800b2ae <vTaskSwitchContext+0x8a>
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	685a      	ldr	r2, [r3, #4]
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	605a      	str	r2, [r3, #4]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	4a09      	ldr	r2, [pc, #36]	; (800b2dc <vTaskSwitchContext+0xb8>)
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	4a06      	ldr	r2, [pc, #24]	; (800b2d4 <vTaskSwitchContext+0xb0>)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6013      	str	r3, [r2, #0]
}
 800b2be:	bf00      	nop
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	20001074 	.word	0x20001074
 800b2d0:	20001060 	.word	0x20001060
 800b2d4:	20001054 	.word	0x20001054
 800b2d8:	20000b7c 	.word	0x20000b7c
 800b2dc:	20000b78 	.word	0x20000b78

0800b2e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10a      	bne.n	800b306 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	60fb      	str	r3, [r7, #12]
}
 800b302:	bf00      	nop
 800b304:	e7fe      	b.n	800b304 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b306:	4b07      	ldr	r3, [pc, #28]	; (800b324 <vTaskPlaceOnEventList+0x44>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3318      	adds	r3, #24
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7fe fdcd 	bl	8009eae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b314:	2101      	movs	r1, #1
 800b316:	6838      	ldr	r0, [r7, #0]
 800b318:	f000 fa7c 	bl	800b814 <prvAddCurrentTaskToDelayedList>
}
 800b31c:	bf00      	nop
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	20000b78 	.word	0x20000b78

0800b328 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10a      	bne.n	800b350 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	617b      	str	r3, [r7, #20]
}
 800b34c:	bf00      	nop
 800b34e:	e7fe      	b.n	800b34e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b350:	4b0a      	ldr	r3, [pc, #40]	; (800b37c <vTaskPlaceOnEventListRestricted+0x54>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	3318      	adds	r3, #24
 800b356:	4619      	mov	r1, r3
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f7fe fd84 	bl	8009e66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b368:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b36a:	6879      	ldr	r1, [r7, #4]
 800b36c:	68b8      	ldr	r0, [r7, #8]
 800b36e:	f000 fa51 	bl	800b814 <prvAddCurrentTaskToDelayedList>
	}
 800b372:	bf00      	nop
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20000b78 	.word	0x20000b78

0800b380 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10a      	bne.n	800b3ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	60fb      	str	r3, [r7, #12]
}
 800b3a8:	bf00      	nop
 800b3aa:	e7fe      	b.n	800b3aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	3318      	adds	r3, #24
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fe fdb5 	bl	8009f20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3b6:	4b1e      	ldr	r3, [pc, #120]	; (800b430 <xTaskRemoveFromEventList+0xb0>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d11d      	bne.n	800b3fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fe fdac 	bl	8009f20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3cc:	4b19      	ldr	r3, [pc, #100]	; (800b434 <xTaskRemoveFromEventList+0xb4>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d903      	bls.n	800b3dc <xTaskRemoveFromEventList+0x5c>
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d8:	4a16      	ldr	r2, [pc, #88]	; (800b434 <xTaskRemoveFromEventList+0xb4>)
 800b3da:	6013      	str	r3, [r2, #0]
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4a13      	ldr	r2, [pc, #76]	; (800b438 <xTaskRemoveFromEventList+0xb8>)
 800b3ea:	441a      	add	r2, r3
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	f7fe fd37 	bl	8009e66 <vListInsertEnd>
 800b3f8:	e005      	b.n	800b406 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	3318      	adds	r3, #24
 800b3fe:	4619      	mov	r1, r3
 800b400:	480e      	ldr	r0, [pc, #56]	; (800b43c <xTaskRemoveFromEventList+0xbc>)
 800b402:	f7fe fd30 	bl	8009e66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40a:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <xTaskRemoveFromEventList+0xc0>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b410:	429a      	cmp	r2, r3
 800b412:	d905      	bls.n	800b420 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b414:	2301      	movs	r3, #1
 800b416:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b418:	4b0a      	ldr	r3, [pc, #40]	; (800b444 <xTaskRemoveFromEventList+0xc4>)
 800b41a:	2201      	movs	r2, #1
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	e001      	b.n	800b424 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b420:	2300      	movs	r3, #0
 800b422:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b424:	697b      	ldr	r3, [r7, #20]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3718      	adds	r7, #24
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	20001074 	.word	0x20001074
 800b434:	20001054 	.word	0x20001054
 800b438:	20000b7c 	.word	0x20000b7c
 800b43c:	2000100c 	.word	0x2000100c
 800b440:	20000b78 	.word	0x20000b78
 800b444:	20001060 	.word	0x20001060

0800b448 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b450:	4b06      	ldr	r3, [pc, #24]	; (800b46c <vTaskInternalSetTimeOutState+0x24>)
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b458:	4b05      	ldr	r3, [pc, #20]	; (800b470 <vTaskInternalSetTimeOutState+0x28>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	605a      	str	r2, [r3, #4]
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	20001064 	.word	0x20001064
 800b470:	20001050 	.word	0x20001050

0800b474 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10a      	bne.n	800b49a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	613b      	str	r3, [r7, #16]
}
 800b496:	bf00      	nop
 800b498:	e7fe      	b.n	800b498 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10a      	bne.n	800b4b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	60fb      	str	r3, [r7, #12]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b4b6:	f000 fe7d 	bl	800c1b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4ba:	4b1d      	ldr	r3, [pc, #116]	; (800b530 <xTaskCheckForTimeOut+0xbc>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	69ba      	ldr	r2, [r7, #24]
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4d2:	d102      	bne.n	800b4da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	61fb      	str	r3, [r7, #28]
 800b4d8:	e023      	b.n	800b522 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	4b15      	ldr	r3, [pc, #84]	; (800b534 <xTaskCheckForTimeOut+0xc0>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d007      	beq.n	800b4f6 <xTaskCheckForTimeOut+0x82>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d302      	bcc.n	800b4f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	61fb      	str	r3, [r7, #28]
 800b4f4:	e015      	b.n	800b522 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d20b      	bcs.n	800b518 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	1ad2      	subs	r2, r2, r3
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff ff9b 	bl	800b448 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b512:	2300      	movs	r3, #0
 800b514:	61fb      	str	r3, [r7, #28]
 800b516:	e004      	b.n	800b522 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	2200      	movs	r2, #0
 800b51c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b51e:	2301      	movs	r3, #1
 800b520:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b522:	f000 fe77 	bl	800c214 <vPortExitCritical>

	return xReturn;
 800b526:	69fb      	ldr	r3, [r7, #28]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3720      	adds	r7, #32
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	20001050 	.word	0x20001050
 800b534:	20001064 	.word	0x20001064

0800b538 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b538:	b480      	push	{r7}
 800b53a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b53c:	4b03      	ldr	r3, [pc, #12]	; (800b54c <vTaskMissedYield+0x14>)
 800b53e:	2201      	movs	r2, #1
 800b540:	601a      	str	r2, [r3, #0]
}
 800b542:	bf00      	nop
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	20001060 	.word	0x20001060

0800b550 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b558:	f000 f852 	bl	800b600 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b55c:	4b06      	ldr	r3, [pc, #24]	; (800b578 <prvIdleTask+0x28>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d9f9      	bls.n	800b558 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b564:	4b05      	ldr	r3, [pc, #20]	; (800b57c <prvIdleTask+0x2c>)
 800b566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b56a:	601a      	str	r2, [r3, #0]
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b574:	e7f0      	b.n	800b558 <prvIdleTask+0x8>
 800b576:	bf00      	nop
 800b578:	20000b7c 	.word	0x20000b7c
 800b57c:	e000ed04 	.word	0xe000ed04

0800b580 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b586:	2300      	movs	r3, #0
 800b588:	607b      	str	r3, [r7, #4]
 800b58a:	e00c      	b.n	800b5a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	4613      	mov	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	4413      	add	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4a12      	ldr	r2, [pc, #72]	; (800b5e0 <prvInitialiseTaskLists+0x60>)
 800b598:	4413      	add	r3, r2
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fe fc36 	bl	8009e0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	607b      	str	r3, [r7, #4]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b37      	cmp	r3, #55	; 0x37
 800b5aa:	d9ef      	bls.n	800b58c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5ac:	480d      	ldr	r0, [pc, #52]	; (800b5e4 <prvInitialiseTaskLists+0x64>)
 800b5ae:	f7fe fc2d 	bl	8009e0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5b2:	480d      	ldr	r0, [pc, #52]	; (800b5e8 <prvInitialiseTaskLists+0x68>)
 800b5b4:	f7fe fc2a 	bl	8009e0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5b8:	480c      	ldr	r0, [pc, #48]	; (800b5ec <prvInitialiseTaskLists+0x6c>)
 800b5ba:	f7fe fc27 	bl	8009e0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b5be:	480c      	ldr	r0, [pc, #48]	; (800b5f0 <prvInitialiseTaskLists+0x70>)
 800b5c0:	f7fe fc24 	bl	8009e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5c4:	480b      	ldr	r0, [pc, #44]	; (800b5f4 <prvInitialiseTaskLists+0x74>)
 800b5c6:	f7fe fc21 	bl	8009e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5ca:	4b0b      	ldr	r3, [pc, #44]	; (800b5f8 <prvInitialiseTaskLists+0x78>)
 800b5cc:	4a05      	ldr	r2, [pc, #20]	; (800b5e4 <prvInitialiseTaskLists+0x64>)
 800b5ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5d0:	4b0a      	ldr	r3, [pc, #40]	; (800b5fc <prvInitialiseTaskLists+0x7c>)
 800b5d2:	4a05      	ldr	r2, [pc, #20]	; (800b5e8 <prvInitialiseTaskLists+0x68>)
 800b5d4:	601a      	str	r2, [r3, #0]
}
 800b5d6:	bf00      	nop
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	20000b7c 	.word	0x20000b7c
 800b5e4:	20000fdc 	.word	0x20000fdc
 800b5e8:	20000ff0 	.word	0x20000ff0
 800b5ec:	2000100c 	.word	0x2000100c
 800b5f0:	20001020 	.word	0x20001020
 800b5f4:	20001038 	.word	0x20001038
 800b5f8:	20001004 	.word	0x20001004
 800b5fc:	20001008 	.word	0x20001008

0800b600 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b606:	e019      	b.n	800b63c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b608:	f000 fdd4 	bl	800c1b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b60c:	4b10      	ldr	r3, [pc, #64]	; (800b650 <prvCheckTasksWaitingTermination+0x50>)
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	3304      	adds	r3, #4
 800b618:	4618      	mov	r0, r3
 800b61a:	f7fe fc81 	bl	8009f20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b61e:	4b0d      	ldr	r3, [pc, #52]	; (800b654 <prvCheckTasksWaitingTermination+0x54>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3b01      	subs	r3, #1
 800b624:	4a0b      	ldr	r2, [pc, #44]	; (800b654 <prvCheckTasksWaitingTermination+0x54>)
 800b626:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b628:	4b0b      	ldr	r3, [pc, #44]	; (800b658 <prvCheckTasksWaitingTermination+0x58>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	3b01      	subs	r3, #1
 800b62e:	4a0a      	ldr	r2, [pc, #40]	; (800b658 <prvCheckTasksWaitingTermination+0x58>)
 800b630:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b632:	f000 fdef 	bl	800c214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f810 	bl	800b65c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b63c:	4b06      	ldr	r3, [pc, #24]	; (800b658 <prvCheckTasksWaitingTermination+0x58>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d1e1      	bne.n	800b608 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	20001020 	.word	0x20001020
 800b654:	2000104c 	.word	0x2000104c
 800b658:	20001034 	.word	0x20001034

0800b65c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d108      	bne.n	800b680 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b672:	4618      	mov	r0, r3
 800b674:	f000 ff8c 	bl	800c590 <vPortFree>
				vPortFree( pxTCB );
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 ff89 	bl	800c590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b67e:	e018      	b.n	800b6b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b686:	2b01      	cmp	r3, #1
 800b688:	d103      	bne.n	800b692 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 ff80 	bl	800c590 <vPortFree>
	}
 800b690:	e00f      	b.n	800b6b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d00a      	beq.n	800b6b2 <prvDeleteTCB+0x56>
	__asm volatile
 800b69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a0:	f383 8811 	msr	BASEPRI, r3
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	60fb      	str	r3, [r7, #12]
}
 800b6ae:	bf00      	nop
 800b6b0:	e7fe      	b.n	800b6b0 <prvDeleteTCB+0x54>
	}
 800b6b2:	bf00      	nop
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
	...

0800b6bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6c2:	4b0c      	ldr	r3, [pc, #48]	; (800b6f4 <prvResetNextTaskUnblockTime+0x38>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d104      	bne.n	800b6d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6cc:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b6ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b6d4:	e008      	b.n	800b6e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6d6:	4b07      	ldr	r3, [pc, #28]	; (800b6f4 <prvResetNextTaskUnblockTime+0x38>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	4a04      	ldr	r2, [pc, #16]	; (800b6f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b6e6:	6013      	str	r3, [r2, #0]
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr
 800b6f4:	20001004 	.word	0x20001004
 800b6f8:	2000106c 	.word	0x2000106c

0800b6fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b702:	4b0b      	ldr	r3, [pc, #44]	; (800b730 <xTaskGetSchedulerState+0x34>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d102      	bne.n	800b710 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b70a:	2301      	movs	r3, #1
 800b70c:	607b      	str	r3, [r7, #4]
 800b70e:	e008      	b.n	800b722 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b710:	4b08      	ldr	r3, [pc, #32]	; (800b734 <xTaskGetSchedulerState+0x38>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d102      	bne.n	800b71e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b718:	2302      	movs	r3, #2
 800b71a:	607b      	str	r3, [r7, #4]
 800b71c:	e001      	b.n	800b722 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b71e:	2300      	movs	r3, #0
 800b720:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b722:	687b      	ldr	r3, [r7, #4]
	}
 800b724:	4618      	mov	r0, r3
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr
 800b730:	20001058 	.word	0x20001058
 800b734:	20001074 	.word	0x20001074

0800b738 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b744:	2300      	movs	r3, #0
 800b746:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d056      	beq.n	800b7fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b74e:	4b2e      	ldr	r3, [pc, #184]	; (800b808 <xTaskPriorityDisinherit+0xd0>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	429a      	cmp	r2, r3
 800b756:	d00a      	beq.n	800b76e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	60fb      	str	r3, [r7, #12]
}
 800b76a:	bf00      	nop
 800b76c:	e7fe      	b.n	800b76c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10a      	bne.n	800b78c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	60bb      	str	r3, [r7, #8]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b790:	1e5a      	subs	r2, r3, #1
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d02c      	beq.n	800b7fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d128      	bne.n	800b7fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fe fbb6 	bl	8009f20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7cc:	4b0f      	ldr	r3, [pc, #60]	; (800b80c <xTaskPriorityDisinherit+0xd4>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d903      	bls.n	800b7dc <xTaskPriorityDisinherit+0xa4>
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d8:	4a0c      	ldr	r2, [pc, #48]	; (800b80c <xTaskPriorityDisinherit+0xd4>)
 800b7da:	6013      	str	r3, [r2, #0]
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4413      	add	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4a09      	ldr	r2, [pc, #36]	; (800b810 <xTaskPriorityDisinherit+0xd8>)
 800b7ea:	441a      	add	r2, r3
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	3304      	adds	r3, #4
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	4610      	mov	r0, r2
 800b7f4:	f7fe fb37 	bl	8009e66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7fc:	697b      	ldr	r3, [r7, #20]
	}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	20000b78 	.word	0x20000b78
 800b80c:	20001054 	.word	0x20001054
 800b810:	20000b7c 	.word	0x20000b7c

0800b814 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b81e:	4b21      	ldr	r3, [pc, #132]	; (800b8a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b824:	4b20      	ldr	r3, [pc, #128]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3304      	adds	r3, #4
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fe fb78 	bl	8009f20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b836:	d10a      	bne.n	800b84e <prvAddCurrentTaskToDelayedList+0x3a>
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d007      	beq.n	800b84e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b83e:	4b1a      	ldr	r3, [pc, #104]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3304      	adds	r3, #4
 800b844:	4619      	mov	r1, r3
 800b846:	4819      	ldr	r0, [pc, #100]	; (800b8ac <prvAddCurrentTaskToDelayedList+0x98>)
 800b848:	f7fe fb0d 	bl	8009e66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b84c:	e026      	b.n	800b89c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4413      	add	r3, r2
 800b854:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b856:	4b14      	ldr	r3, [pc, #80]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	429a      	cmp	r2, r3
 800b864:	d209      	bcs.n	800b87a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b866:	4b12      	ldr	r3, [pc, #72]	; (800b8b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3304      	adds	r3, #4
 800b870:	4619      	mov	r1, r3
 800b872:	4610      	mov	r0, r2
 800b874:	f7fe fb1b 	bl	8009eae <vListInsert>
}
 800b878:	e010      	b.n	800b89c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b87a:	4b0e      	ldr	r3, [pc, #56]	; (800b8b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	4b0a      	ldr	r3, [pc, #40]	; (800b8a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3304      	adds	r3, #4
 800b884:	4619      	mov	r1, r3
 800b886:	4610      	mov	r0, r2
 800b888:	f7fe fb11 	bl	8009eae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b88c:	4b0a      	ldr	r3, [pc, #40]	; (800b8b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	429a      	cmp	r2, r3
 800b894:	d202      	bcs.n	800b89c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b896:	4a08      	ldr	r2, [pc, #32]	; (800b8b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	6013      	str	r3, [r2, #0]
}
 800b89c:	bf00      	nop
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20001050 	.word	0x20001050
 800b8a8:	20000b78 	.word	0x20000b78
 800b8ac:	20001038 	.word	0x20001038
 800b8b0:	20001008 	.word	0x20001008
 800b8b4:	20001004 	.word	0x20001004
 800b8b8:	2000106c 	.word	0x2000106c

0800b8bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08a      	sub	sp, #40	; 0x28
 800b8c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8c6:	f000 fb07 	bl	800bed8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8ca:	4b1c      	ldr	r3, [pc, #112]	; (800b93c <xTimerCreateTimerTask+0x80>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d021      	beq.n	800b916 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b8da:	1d3a      	adds	r2, r7, #4
 800b8dc:	f107 0108 	add.w	r1, r7, #8
 800b8e0:	f107 030c 	add.w	r3, r7, #12
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fe fa77 	bl	8009dd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b8ea:	6879      	ldr	r1, [r7, #4]
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	9202      	str	r2, [sp, #8]
 800b8f2:	9301      	str	r3, [sp, #4]
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	460a      	mov	r2, r1
 800b8fc:	4910      	ldr	r1, [pc, #64]	; (800b940 <xTimerCreateTimerTask+0x84>)
 800b8fe:	4811      	ldr	r0, [pc, #68]	; (800b944 <xTimerCreateTimerTask+0x88>)
 800b900:	f7ff f8de 	bl	800aac0 <xTaskCreateStatic>
 800b904:	4603      	mov	r3, r0
 800b906:	4a10      	ldr	r2, [pc, #64]	; (800b948 <xTimerCreateTimerTask+0x8c>)
 800b908:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b90a:	4b0f      	ldr	r3, [pc, #60]	; (800b948 <xTimerCreateTimerTask+0x8c>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d001      	beq.n	800b916 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b912:	2301      	movs	r3, #1
 800b914:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d10a      	bne.n	800b932 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	613b      	str	r3, [r7, #16]
}
 800b92e:	bf00      	nop
 800b930:	e7fe      	b.n	800b930 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b932:	697b      	ldr	r3, [r7, #20]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3718      	adds	r7, #24
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	200010a8 	.word	0x200010a8
 800b940:	0800d05c 	.word	0x0800d05c
 800b944:	0800ba81 	.word	0x0800ba81
 800b948:	200010ac 	.word	0x200010ac

0800b94c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08a      	sub	sp, #40	; 0x28
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b95a:	2300      	movs	r3, #0
 800b95c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10a      	bne.n	800b97a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	623b      	str	r3, [r7, #32]
}
 800b976:	bf00      	nop
 800b978:	e7fe      	b.n	800b978 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b97a:	4b1a      	ldr	r3, [pc, #104]	; (800b9e4 <xTimerGenericCommand+0x98>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d02a      	beq.n	800b9d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	2b05      	cmp	r3, #5
 800b992:	dc18      	bgt.n	800b9c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b994:	f7ff feb2 	bl	800b6fc <xTaskGetSchedulerState>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d109      	bne.n	800b9b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b99e:	4b11      	ldr	r3, [pc, #68]	; (800b9e4 <xTimerGenericCommand+0x98>)
 800b9a0:	6818      	ldr	r0, [r3, #0]
 800b9a2:	f107 0110 	add.w	r1, r7, #16
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9aa:	f7fe fc21 	bl	800a1f0 <xQueueGenericSend>
 800b9ae:	6278      	str	r0, [r7, #36]	; 0x24
 800b9b0:	e012      	b.n	800b9d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b9b2:	4b0c      	ldr	r3, [pc, #48]	; (800b9e4 <xTimerGenericCommand+0x98>)
 800b9b4:	6818      	ldr	r0, [r3, #0]
 800b9b6:	f107 0110 	add.w	r1, r7, #16
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f7fe fc17 	bl	800a1f0 <xQueueGenericSend>
 800b9c2:	6278      	str	r0, [r7, #36]	; 0x24
 800b9c4:	e008      	b.n	800b9d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b9c6:	4b07      	ldr	r3, [pc, #28]	; (800b9e4 <xTimerGenericCommand+0x98>)
 800b9c8:	6818      	ldr	r0, [r3, #0]
 800b9ca:	f107 0110 	add.w	r1, r7, #16
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	f7fe fd0b 	bl	800a3ec <xQueueGenericSendFromISR>
 800b9d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3728      	adds	r7, #40	; 0x28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	200010a8 	.word	0x200010a8

0800b9e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b088      	sub	sp, #32
 800b9ec:	af02      	add	r7, sp, #8
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9f2:	4b22      	ldr	r3, [pc, #136]	; (800ba7c <prvProcessExpiredTimer+0x94>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	3304      	adds	r3, #4
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7fe fa8d 	bl	8009f20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba0c:	f003 0304 	and.w	r3, r3, #4
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d022      	beq.n	800ba5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	699a      	ldr	r2, [r3, #24]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	18d1      	adds	r1, r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	6978      	ldr	r0, [r7, #20]
 800ba22:	f000 f8d1 	bl	800bbc8 <prvInsertTimerInActiveList>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d01f      	beq.n	800ba6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	2300      	movs	r3, #0
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	2100      	movs	r1, #0
 800ba36:	6978      	ldr	r0, [r7, #20]
 800ba38:	f7ff ff88 	bl	800b94c <xTimerGenericCommand>
 800ba3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d113      	bne.n	800ba6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ba44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba48:	f383 8811 	msr	BASEPRI, r3
 800ba4c:	f3bf 8f6f 	isb	sy
 800ba50:	f3bf 8f4f 	dsb	sy
 800ba54:	60fb      	str	r3, [r7, #12]
}
 800ba56:	bf00      	nop
 800ba58:	e7fe      	b.n	800ba58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba60:	f023 0301 	bic.w	r3, r3, #1
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	6a1b      	ldr	r3, [r3, #32]
 800ba70:	6978      	ldr	r0, [r7, #20]
 800ba72:	4798      	blx	r3
}
 800ba74:	bf00      	nop
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	200010a0 	.word	0x200010a0

0800ba80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba88:	f107 0308 	add.w	r3, r7, #8
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f000 f857 	bl	800bb40 <prvGetNextExpireTime>
 800ba92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	4619      	mov	r1, r3
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f000 f803 	bl	800baa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba9e:	f000 f8d5 	bl	800bc4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800baa2:	e7f1      	b.n	800ba88 <prvTimerTask+0x8>

0800baa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800baae:	f7ff fa43 	bl	800af38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bab2:	f107 0308 	add.w	r3, r7, #8
 800bab6:	4618      	mov	r0, r3
 800bab8:	f000 f866 	bl	800bb88 <prvSampleTimeNow>
 800babc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d130      	bne.n	800bb26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10a      	bne.n	800bae0 <prvProcessTimerOrBlockTask+0x3c>
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d806      	bhi.n	800bae0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bad2:	f7ff fa3f 	bl	800af54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bad6:	68f9      	ldr	r1, [r7, #12]
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7ff ff85 	bl	800b9e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bade:	e024      	b.n	800bb2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d008      	beq.n	800baf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bae6:	4b13      	ldr	r3, [pc, #76]	; (800bb34 <prvProcessTimerOrBlockTask+0x90>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d101      	bne.n	800baf4 <prvProcessTimerOrBlockTask+0x50>
 800baf0:	2301      	movs	r3, #1
 800baf2:	e000      	b.n	800baf6 <prvProcessTimerOrBlockTask+0x52>
 800baf4:	2300      	movs	r3, #0
 800baf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800baf8:	4b0f      	ldr	r3, [pc, #60]	; (800bb38 <prvProcessTimerOrBlockTask+0x94>)
 800bafa:	6818      	ldr	r0, [r3, #0]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	4619      	mov	r1, r3
 800bb06:	f7fe ffa7 	bl	800aa58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb0a:	f7ff fa23 	bl	800af54 <xTaskResumeAll>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10a      	bne.n	800bb2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb14:	4b09      	ldr	r3, [pc, #36]	; (800bb3c <prvProcessTimerOrBlockTask+0x98>)
 800bb16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb1a:	601a      	str	r2, [r3, #0]
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	f3bf 8f6f 	isb	sy
}
 800bb24:	e001      	b.n	800bb2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb26:	f7ff fa15 	bl	800af54 <xTaskResumeAll>
}
 800bb2a:	bf00      	nop
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	200010a4 	.word	0x200010a4
 800bb38:	200010a8 	.word	0x200010a8
 800bb3c:	e000ed04 	.word	0xe000ed04

0800bb40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb48:	4b0e      	ldr	r3, [pc, #56]	; (800bb84 <prvGetNextExpireTime+0x44>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <prvGetNextExpireTime+0x16>
 800bb52:	2201      	movs	r2, #1
 800bb54:	e000      	b.n	800bb58 <prvGetNextExpireTime+0x18>
 800bb56:	2200      	movs	r2, #0
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d105      	bne.n	800bb70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb64:	4b07      	ldr	r3, [pc, #28]	; (800bb84 <prvGetNextExpireTime+0x44>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	60fb      	str	r3, [r7, #12]
 800bb6e:	e001      	b.n	800bb74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb70:	2300      	movs	r3, #0
 800bb72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb74:	68fb      	ldr	r3, [r7, #12]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3714      	adds	r7, #20
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	200010a0 	.word	0x200010a0

0800bb88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb90:	f7ff fa7e 	bl	800b090 <xTaskGetTickCount>
 800bb94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb96:	4b0b      	ldr	r3, [pc, #44]	; (800bbc4 <prvSampleTimeNow+0x3c>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d205      	bcs.n	800bbac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bba0:	f000 f936 	bl	800be10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	601a      	str	r2, [r3, #0]
 800bbaa:	e002      	b.n	800bbb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bbb2:	4a04      	ldr	r2, [pc, #16]	; (800bbc4 <prvSampleTimeNow+0x3c>)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	200010b0 	.word	0x200010b0

0800bbc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
 800bbd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	68ba      	ldr	r2, [r7, #8]
 800bbde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d812      	bhi.n	800bc14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	1ad2      	subs	r2, r2, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d302      	bcc.n	800bc02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	617b      	str	r3, [r7, #20]
 800bc00:	e01b      	b.n	800bc3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc02:	4b10      	ldr	r3, [pc, #64]	; (800bc44 <prvInsertTimerInActiveList+0x7c>)
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	3304      	adds	r3, #4
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	f7fe f94e 	bl	8009eae <vListInsert>
 800bc12:	e012      	b.n	800bc3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d206      	bcs.n	800bc2a <prvInsertTimerInActiveList+0x62>
 800bc1c:	68ba      	ldr	r2, [r7, #8]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d302      	bcc.n	800bc2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc24:	2301      	movs	r3, #1
 800bc26:	617b      	str	r3, [r7, #20]
 800bc28:	e007      	b.n	800bc3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc2a:	4b07      	ldr	r3, [pc, #28]	; (800bc48 <prvInsertTimerInActiveList+0x80>)
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3304      	adds	r3, #4
 800bc32:	4619      	mov	r1, r3
 800bc34:	4610      	mov	r0, r2
 800bc36:	f7fe f93a 	bl	8009eae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc3a:	697b      	ldr	r3, [r7, #20]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3718      	adds	r7, #24
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	200010a4 	.word	0x200010a4
 800bc48:	200010a0 	.word	0x200010a0

0800bc4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b08e      	sub	sp, #56	; 0x38
 800bc50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc52:	e0ca      	b.n	800bdea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	da18      	bge.n	800bc8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc5a:	1d3b      	adds	r3, r7, #4
 800bc5c:	3304      	adds	r3, #4
 800bc5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10a      	bne.n	800bc7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6a:	f383 8811 	msr	BASEPRI, r3
 800bc6e:	f3bf 8f6f 	isb	sy
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	61fb      	str	r3, [r7, #28]
}
 800bc78:	bf00      	nop
 800bc7a:	e7fe      	b.n	800bc7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc82:	6850      	ldr	r0, [r2, #4]
 800bc84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc86:	6892      	ldr	r2, [r2, #8]
 800bc88:	4611      	mov	r1, r2
 800bc8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f2c0 80aa 	blt.w	800bde8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9a:	695b      	ldr	r3, [r3, #20]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d004      	beq.n	800bcaa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	3304      	adds	r3, #4
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7fe f93b 	bl	8009f20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcaa:	463b      	mov	r3, r7
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7ff ff6b 	bl	800bb88 <prvSampleTimeNow>
 800bcb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b09      	cmp	r3, #9
 800bcb8:	f200 8097 	bhi.w	800bdea <prvProcessReceivedCommands+0x19e>
 800bcbc:	a201      	add	r2, pc, #4	; (adr r2, 800bcc4 <prvProcessReceivedCommands+0x78>)
 800bcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc2:	bf00      	nop
 800bcc4:	0800bced 	.word	0x0800bced
 800bcc8:	0800bced 	.word	0x0800bced
 800bccc:	0800bced 	.word	0x0800bced
 800bcd0:	0800bd61 	.word	0x0800bd61
 800bcd4:	0800bd75 	.word	0x0800bd75
 800bcd8:	0800bdbf 	.word	0x0800bdbf
 800bcdc:	0800bced 	.word	0x0800bced
 800bce0:	0800bced 	.word	0x0800bced
 800bce4:	0800bd61 	.word	0x0800bd61
 800bce8:	0800bd75 	.word	0x0800bd75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcf2:	f043 0301 	orr.w	r3, r3, #1
 800bcf6:	b2da      	uxtb	r2, r3
 800bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	18d1      	adds	r1, r2, r3
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd0c:	f7ff ff5c 	bl	800bbc8 <prvInsertTimerInActiveList>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d069      	beq.n	800bdea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	6a1b      	ldr	r3, [r3, #32]
 800bd1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd24:	f003 0304 	and.w	r3, r3, #4
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d05e      	beq.n	800bdea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	441a      	add	r2, r3
 800bd34:	2300      	movs	r3, #0
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	2300      	movs	r3, #0
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd3e:	f7ff fe05 	bl	800b94c <xTimerGenericCommand>
 800bd42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd44:	6a3b      	ldr	r3, [r7, #32]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d14f      	bne.n	800bdea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	61bb      	str	r3, [r7, #24]
}
 800bd5c:	bf00      	nop
 800bd5e:	e7fe      	b.n	800bd5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd66:	f023 0301 	bic.w	r3, r3, #1
 800bd6a:	b2da      	uxtb	r2, r3
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd72:	e03a      	b.n	800bdea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd7a:	f043 0301 	orr.w	r3, r3, #1
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	617b      	str	r3, [r7, #20]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdac:	699a      	ldr	r2, [r3, #24]
 800bdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb0:	18d1      	adds	r1, r2, r3
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdb8:	f7ff ff06 	bl	800bbc8 <prvInsertTimerInActiveList>
					break;
 800bdbc:	e015      	b.n	800bdea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdc4:	f003 0302 	and.w	r3, r3, #2
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d103      	bne.n	800bdd4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bdcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdce:	f000 fbdf 	bl	800c590 <vPortFree>
 800bdd2:	e00a      	b.n	800bdea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdda:	f023 0301 	bic.w	r3, r3, #1
 800bdde:	b2da      	uxtb	r2, r3
 800bde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bde6:	e000      	b.n	800bdea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bde8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bdea:	4b08      	ldr	r3, [pc, #32]	; (800be0c <prvProcessReceivedCommands+0x1c0>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	1d39      	adds	r1, r7, #4
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fe fb96 	bl	800a524 <xQueueReceive>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f47f af2a 	bne.w	800bc54 <prvProcessReceivedCommands+0x8>
	}
}
 800be00:	bf00      	nop
 800be02:	bf00      	nop
 800be04:	3730      	adds	r7, #48	; 0x30
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	200010a8 	.word	0x200010a8

0800be10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b088      	sub	sp, #32
 800be14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be16:	e048      	b.n	800beaa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be18:	4b2d      	ldr	r3, [pc, #180]	; (800bed0 <prvSwitchTimerLists+0xc0>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be22:	4b2b      	ldr	r3, [pc, #172]	; (800bed0 <prvSwitchTimerLists+0xc0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	3304      	adds	r3, #4
 800be30:	4618      	mov	r0, r3
 800be32:	f7fe f875 	bl	8009f20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be44:	f003 0304 	and.w	r3, r3, #4
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d02e      	beq.n	800beaa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	4413      	add	r3, r2
 800be54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d90e      	bls.n	800be7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be6a:	4b19      	ldr	r3, [pc, #100]	; (800bed0 <prvSwitchTimerLists+0xc0>)
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	3304      	adds	r3, #4
 800be72:	4619      	mov	r1, r3
 800be74:	4610      	mov	r0, r2
 800be76:	f7fe f81a 	bl	8009eae <vListInsert>
 800be7a:	e016      	b.n	800beaa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be7c:	2300      	movs	r3, #0
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	2300      	movs	r3, #0
 800be82:	693a      	ldr	r2, [r7, #16]
 800be84:	2100      	movs	r1, #0
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f7ff fd60 	bl	800b94c <xTimerGenericCommand>
 800be8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10a      	bne.n	800beaa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	603b      	str	r3, [r7, #0]
}
 800bea6:	bf00      	nop
 800bea8:	e7fe      	b.n	800bea8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800beaa:	4b09      	ldr	r3, [pc, #36]	; (800bed0 <prvSwitchTimerLists+0xc0>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1b1      	bne.n	800be18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800beb4:	4b06      	ldr	r3, [pc, #24]	; (800bed0 <prvSwitchTimerLists+0xc0>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800beba:	4b06      	ldr	r3, [pc, #24]	; (800bed4 <prvSwitchTimerLists+0xc4>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a04      	ldr	r2, [pc, #16]	; (800bed0 <prvSwitchTimerLists+0xc0>)
 800bec0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bec2:	4a04      	ldr	r2, [pc, #16]	; (800bed4 <prvSwitchTimerLists+0xc4>)
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	6013      	str	r3, [r2, #0]
}
 800bec8:	bf00      	nop
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	200010a0 	.word	0x200010a0
 800bed4:	200010a4 	.word	0x200010a4

0800bed8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bede:	f000 f969 	bl	800c1b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bee2:	4b15      	ldr	r3, [pc, #84]	; (800bf38 <prvCheckForValidListAndQueue+0x60>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d120      	bne.n	800bf2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800beea:	4814      	ldr	r0, [pc, #80]	; (800bf3c <prvCheckForValidListAndQueue+0x64>)
 800beec:	f7fd ff8e 	bl	8009e0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bef0:	4813      	ldr	r0, [pc, #76]	; (800bf40 <prvCheckForValidListAndQueue+0x68>)
 800bef2:	f7fd ff8b 	bl	8009e0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bef6:	4b13      	ldr	r3, [pc, #76]	; (800bf44 <prvCheckForValidListAndQueue+0x6c>)
 800bef8:	4a10      	ldr	r2, [pc, #64]	; (800bf3c <prvCheckForValidListAndQueue+0x64>)
 800befa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800befc:	4b12      	ldr	r3, [pc, #72]	; (800bf48 <prvCheckForValidListAndQueue+0x70>)
 800befe:	4a10      	ldr	r2, [pc, #64]	; (800bf40 <prvCheckForValidListAndQueue+0x68>)
 800bf00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf02:	2300      	movs	r3, #0
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	4b11      	ldr	r3, [pc, #68]	; (800bf4c <prvCheckForValidListAndQueue+0x74>)
 800bf08:	4a11      	ldr	r2, [pc, #68]	; (800bf50 <prvCheckForValidListAndQueue+0x78>)
 800bf0a:	2110      	movs	r1, #16
 800bf0c:	200a      	movs	r0, #10
 800bf0e:	f7fe f899 	bl	800a044 <xQueueGenericCreateStatic>
 800bf12:	4603      	mov	r3, r0
 800bf14:	4a08      	ldr	r2, [pc, #32]	; (800bf38 <prvCheckForValidListAndQueue+0x60>)
 800bf16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf18:	4b07      	ldr	r3, [pc, #28]	; (800bf38 <prvCheckForValidListAndQueue+0x60>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d005      	beq.n	800bf2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf20:	4b05      	ldr	r3, [pc, #20]	; (800bf38 <prvCheckForValidListAndQueue+0x60>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	490b      	ldr	r1, [pc, #44]	; (800bf54 <prvCheckForValidListAndQueue+0x7c>)
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fe fd6c 	bl	800aa04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf2c:	f000 f972 	bl	800c214 <vPortExitCritical>
}
 800bf30:	bf00      	nop
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	200010a8 	.word	0x200010a8
 800bf3c:	20001078 	.word	0x20001078
 800bf40:	2000108c 	.word	0x2000108c
 800bf44:	200010a0 	.word	0x200010a0
 800bf48:	200010a4 	.word	0x200010a4
 800bf4c:	20001154 	.word	0x20001154
 800bf50:	200010b4 	.word	0x200010b4
 800bf54:	0800d064 	.word	0x0800d064

0800bf58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	3b04      	subs	r3, #4
 800bf68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	3b04      	subs	r3, #4
 800bf76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f023 0201 	bic.w	r2, r3, #1
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	3b04      	subs	r3, #4
 800bf86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf88:	4a0c      	ldr	r2, [pc, #48]	; (800bfbc <pxPortInitialiseStack+0x64>)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3b14      	subs	r3, #20
 800bf92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3b04      	subs	r3, #4
 800bf9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f06f 0202 	mvn.w	r2, #2
 800bfa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3b20      	subs	r3, #32
 800bfac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bfae:	68fb      	ldr	r3, [r7, #12]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3714      	adds	r7, #20
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr
 800bfbc:	0800bfc1 	.word	0x0800bfc1

0800bfc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bfca:	4b12      	ldr	r3, [pc, #72]	; (800c014 <prvTaskExitError+0x54>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfd2:	d00a      	beq.n	800bfea <prvTaskExitError+0x2a>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	60fb      	str	r3, [r7, #12]
}
 800bfe6:	bf00      	nop
 800bfe8:	e7fe      	b.n	800bfe8 <prvTaskExitError+0x28>
	__asm volatile
 800bfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	60bb      	str	r3, [r7, #8]
}
 800bffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bffe:	bf00      	nop
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d0fc      	beq.n	800c000 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c006:	bf00      	nop
 800c008:	bf00      	nop
 800c00a:	3714      	adds	r7, #20
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr
 800c014:	2000002c 	.word	0x2000002c
	...

0800c020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c020:	4b07      	ldr	r3, [pc, #28]	; (800c040 <pxCurrentTCBConst2>)
 800c022:	6819      	ldr	r1, [r3, #0]
 800c024:	6808      	ldr	r0, [r1, #0]
 800c026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02a:	f380 8809 	msr	PSP, r0
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	f04f 0000 	mov.w	r0, #0
 800c036:	f380 8811 	msr	BASEPRI, r0
 800c03a:	4770      	bx	lr
 800c03c:	f3af 8000 	nop.w

0800c040 <pxCurrentTCBConst2>:
 800c040:	20000b78 	.word	0x20000b78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c044:	bf00      	nop
 800c046:	bf00      	nop

0800c048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c048:	4808      	ldr	r0, [pc, #32]	; (800c06c <prvPortStartFirstTask+0x24>)
 800c04a:	6800      	ldr	r0, [r0, #0]
 800c04c:	6800      	ldr	r0, [r0, #0]
 800c04e:	f380 8808 	msr	MSP, r0
 800c052:	f04f 0000 	mov.w	r0, #0
 800c056:	f380 8814 	msr	CONTROL, r0
 800c05a:	b662      	cpsie	i
 800c05c:	b661      	cpsie	f
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	df00      	svc	0
 800c068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c06a:	bf00      	nop
 800c06c:	e000ed08 	.word	0xe000ed08

0800c070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b086      	sub	sp, #24
 800c074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c076:	4b46      	ldr	r3, [pc, #280]	; (800c190 <xPortStartScheduler+0x120>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a46      	ldr	r2, [pc, #280]	; (800c194 <xPortStartScheduler+0x124>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d10a      	bne.n	800c096 <xPortStartScheduler+0x26>
	__asm volatile
 800c080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	613b      	str	r3, [r7, #16]
}
 800c092:	bf00      	nop
 800c094:	e7fe      	b.n	800c094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c096:	4b3e      	ldr	r3, [pc, #248]	; (800c190 <xPortStartScheduler+0x120>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a3f      	ldr	r2, [pc, #252]	; (800c198 <xPortStartScheduler+0x128>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d10a      	bne.n	800c0b6 <xPortStartScheduler+0x46>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	f383 8811 	msr	BASEPRI, r3
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	f3bf 8f4f 	dsb	sy
 800c0b0:	60fb      	str	r3, [r7, #12]
}
 800c0b2:	bf00      	nop
 800c0b4:	e7fe      	b.n	800c0b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c0b6:	4b39      	ldr	r3, [pc, #228]	; (800c19c <xPortStartScheduler+0x12c>)
 800c0b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	22ff      	movs	r2, #255	; 0xff
 800c0c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0d0:	78fb      	ldrb	r3, [r7, #3]
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	4b31      	ldr	r3, [pc, #196]	; (800c1a0 <xPortStartScheduler+0x130>)
 800c0dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0de:	4b31      	ldr	r3, [pc, #196]	; (800c1a4 <xPortStartScheduler+0x134>)
 800c0e0:	2207      	movs	r2, #7
 800c0e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0e4:	e009      	b.n	800c0fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c0e6:	4b2f      	ldr	r3, [pc, #188]	; (800c1a4 <xPortStartScheduler+0x134>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	4a2d      	ldr	r2, [pc, #180]	; (800c1a4 <xPortStartScheduler+0x134>)
 800c0ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0f0:	78fb      	ldrb	r3, [r7, #3]
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	005b      	lsls	r3, r3, #1
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0fa:	78fb      	ldrb	r3, [r7, #3]
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c102:	2b80      	cmp	r3, #128	; 0x80
 800c104:	d0ef      	beq.n	800c0e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c106:	4b27      	ldr	r3, [pc, #156]	; (800c1a4 <xPortStartScheduler+0x134>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f1c3 0307 	rsb	r3, r3, #7
 800c10e:	2b04      	cmp	r3, #4
 800c110:	d00a      	beq.n	800c128 <xPortStartScheduler+0xb8>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	60bb      	str	r3, [r7, #8]
}
 800c124:	bf00      	nop
 800c126:	e7fe      	b.n	800c126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c128:	4b1e      	ldr	r3, [pc, #120]	; (800c1a4 <xPortStartScheduler+0x134>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	021b      	lsls	r3, r3, #8
 800c12e:	4a1d      	ldr	r2, [pc, #116]	; (800c1a4 <xPortStartScheduler+0x134>)
 800c130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c132:	4b1c      	ldr	r3, [pc, #112]	; (800c1a4 <xPortStartScheduler+0x134>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c13a:	4a1a      	ldr	r2, [pc, #104]	; (800c1a4 <xPortStartScheduler+0x134>)
 800c13c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	b2da      	uxtb	r2, r3
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c146:	4b18      	ldr	r3, [pc, #96]	; (800c1a8 <xPortStartScheduler+0x138>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a17      	ldr	r2, [pc, #92]	; (800c1a8 <xPortStartScheduler+0x138>)
 800c14c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c152:	4b15      	ldr	r3, [pc, #84]	; (800c1a8 <xPortStartScheduler+0x138>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a14      	ldr	r2, [pc, #80]	; (800c1a8 <xPortStartScheduler+0x138>)
 800c158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c15c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c15e:	f000 f8dd 	bl	800c31c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c162:	4b12      	ldr	r3, [pc, #72]	; (800c1ac <xPortStartScheduler+0x13c>)
 800c164:	2200      	movs	r2, #0
 800c166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c168:	f000 f8fc 	bl	800c364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c16c:	4b10      	ldr	r3, [pc, #64]	; (800c1b0 <xPortStartScheduler+0x140>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a0f      	ldr	r2, [pc, #60]	; (800c1b0 <xPortStartScheduler+0x140>)
 800c172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c178:	f7ff ff66 	bl	800c048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c17c:	f7ff f852 	bl	800b224 <vTaskSwitchContext>
	prvTaskExitError();
 800c180:	f7ff ff1e 	bl	800bfc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3718      	adds	r7, #24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	e000ed00 	.word	0xe000ed00
 800c194:	410fc271 	.word	0x410fc271
 800c198:	410fc270 	.word	0x410fc270
 800c19c:	e000e400 	.word	0xe000e400
 800c1a0:	200011a4 	.word	0x200011a4
 800c1a4:	200011a8 	.word	0x200011a8
 800c1a8:	e000ed20 	.word	0xe000ed20
 800c1ac:	2000002c 	.word	0x2000002c
 800c1b0:	e000ef34 	.word	0xe000ef34

0800c1b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
	__asm volatile
 800c1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	607b      	str	r3, [r7, #4]
}
 800c1cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c1ce:	4b0f      	ldr	r3, [pc, #60]	; (800c20c <vPortEnterCritical+0x58>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	4a0d      	ldr	r2, [pc, #52]	; (800c20c <vPortEnterCritical+0x58>)
 800c1d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c1d8:	4b0c      	ldr	r3, [pc, #48]	; (800c20c <vPortEnterCritical+0x58>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d10f      	bne.n	800c200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c1e0:	4b0b      	ldr	r3, [pc, #44]	; (800c210 <vPortEnterCritical+0x5c>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00a      	beq.n	800c200 <vPortEnterCritical+0x4c>
	__asm volatile
 800c1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ee:	f383 8811 	msr	BASEPRI, r3
 800c1f2:	f3bf 8f6f 	isb	sy
 800c1f6:	f3bf 8f4f 	dsb	sy
 800c1fa:	603b      	str	r3, [r7, #0]
}
 800c1fc:	bf00      	nop
 800c1fe:	e7fe      	b.n	800c1fe <vPortEnterCritical+0x4a>
	}
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	2000002c 	.word	0x2000002c
 800c210:	e000ed04 	.word	0xe000ed04

0800c214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c21a:	4b12      	ldr	r3, [pc, #72]	; (800c264 <vPortExitCritical+0x50>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d10a      	bne.n	800c238 <vPortExitCritical+0x24>
	__asm volatile
 800c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c226:	f383 8811 	msr	BASEPRI, r3
 800c22a:	f3bf 8f6f 	isb	sy
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	607b      	str	r3, [r7, #4]
}
 800c234:	bf00      	nop
 800c236:	e7fe      	b.n	800c236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c238:	4b0a      	ldr	r3, [pc, #40]	; (800c264 <vPortExitCritical+0x50>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	3b01      	subs	r3, #1
 800c23e:	4a09      	ldr	r2, [pc, #36]	; (800c264 <vPortExitCritical+0x50>)
 800c240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c242:	4b08      	ldr	r3, [pc, #32]	; (800c264 <vPortExitCritical+0x50>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d105      	bne.n	800c256 <vPortExitCritical+0x42>
 800c24a:	2300      	movs	r3, #0
 800c24c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	f383 8811 	msr	BASEPRI, r3
}
 800c254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c256:	bf00      	nop
 800c258:	370c      	adds	r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	2000002c 	.word	0x2000002c
	...

0800c270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c270:	f3ef 8009 	mrs	r0, PSP
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	4b15      	ldr	r3, [pc, #84]	; (800c2d0 <pxCurrentTCBConst>)
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	f01e 0f10 	tst.w	lr, #16
 800c280:	bf08      	it	eq
 800c282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28a:	6010      	str	r0, [r2, #0]
 800c28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c290:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c294:	f380 8811 	msr	BASEPRI, r0
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	f3bf 8f6f 	isb	sy
 800c2a0:	f7fe ffc0 	bl	800b224 <vTaskSwitchContext>
 800c2a4:	f04f 0000 	mov.w	r0, #0
 800c2a8:	f380 8811 	msr	BASEPRI, r0
 800c2ac:	bc09      	pop	{r0, r3}
 800c2ae:	6819      	ldr	r1, [r3, #0]
 800c2b0:	6808      	ldr	r0, [r1, #0]
 800c2b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b6:	f01e 0f10 	tst.w	lr, #16
 800c2ba:	bf08      	it	eq
 800c2bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c2c0:	f380 8809 	msr	PSP, r0
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	f3af 8000 	nop.w

0800c2d0 <pxCurrentTCBConst>:
 800c2d0:	20000b78 	.word	0x20000b78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c2d4:	bf00      	nop
 800c2d6:	bf00      	nop

0800c2d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	607b      	str	r3, [r7, #4]
}
 800c2f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c2f2:	f7fe fedd 	bl	800b0b0 <xTaskIncrementTick>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d003      	beq.n	800c304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c2fc:	4b06      	ldr	r3, [pc, #24]	; (800c318 <xPortSysTickHandler+0x40>)
 800c2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c302:	601a      	str	r2, [r3, #0]
 800c304:	2300      	movs	r3, #0
 800c306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	f383 8811 	msr	BASEPRI, r3
}
 800c30e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c310:	bf00      	nop
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	e000ed04 	.word	0xe000ed04

0800c31c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c31c:	b480      	push	{r7}
 800c31e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c320:	4b0b      	ldr	r3, [pc, #44]	; (800c350 <vPortSetupTimerInterrupt+0x34>)
 800c322:	2200      	movs	r2, #0
 800c324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c326:	4b0b      	ldr	r3, [pc, #44]	; (800c354 <vPortSetupTimerInterrupt+0x38>)
 800c328:	2200      	movs	r2, #0
 800c32a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c32c:	4b0a      	ldr	r3, [pc, #40]	; (800c358 <vPortSetupTimerInterrupt+0x3c>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a0a      	ldr	r2, [pc, #40]	; (800c35c <vPortSetupTimerInterrupt+0x40>)
 800c332:	fba2 2303 	umull	r2, r3, r2, r3
 800c336:	099b      	lsrs	r3, r3, #6
 800c338:	4a09      	ldr	r2, [pc, #36]	; (800c360 <vPortSetupTimerInterrupt+0x44>)
 800c33a:	3b01      	subs	r3, #1
 800c33c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c33e:	4b04      	ldr	r3, [pc, #16]	; (800c350 <vPortSetupTimerInterrupt+0x34>)
 800c340:	2207      	movs	r2, #7
 800c342:	601a      	str	r2, [r3, #0]
}
 800c344:	bf00      	nop
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	e000e010 	.word	0xe000e010
 800c354:	e000e018 	.word	0xe000e018
 800c358:	20000000 	.word	0x20000000
 800c35c:	10624dd3 	.word	0x10624dd3
 800c360:	e000e014 	.word	0xe000e014

0800c364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c374 <vPortEnableVFP+0x10>
 800c368:	6801      	ldr	r1, [r0, #0]
 800c36a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c36e:	6001      	str	r1, [r0, #0]
 800c370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c372:	bf00      	nop
 800c374:	e000ed88 	.word	0xe000ed88

0800c378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c37e:	f3ef 8305 	mrs	r3, IPSR
 800c382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2b0f      	cmp	r3, #15
 800c388:	d914      	bls.n	800c3b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c38a:	4a17      	ldr	r2, [pc, #92]	; (800c3e8 <vPortValidateInterruptPriority+0x70>)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	4413      	add	r3, r2
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c394:	4b15      	ldr	r3, [pc, #84]	; (800c3ec <vPortValidateInterruptPriority+0x74>)
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	7afa      	ldrb	r2, [r7, #11]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d20a      	bcs.n	800c3b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a2:	f383 8811 	msr	BASEPRI, r3
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	607b      	str	r3, [r7, #4]
}
 800c3b0:	bf00      	nop
 800c3b2:	e7fe      	b.n	800c3b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c3b4:	4b0e      	ldr	r3, [pc, #56]	; (800c3f0 <vPortValidateInterruptPriority+0x78>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	; (800c3f4 <vPortValidateInterruptPriority+0x7c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d90a      	bls.n	800c3da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	603b      	str	r3, [r7, #0]
}
 800c3d6:	bf00      	nop
 800c3d8:	e7fe      	b.n	800c3d8 <vPortValidateInterruptPriority+0x60>
	}
 800c3da:	bf00      	nop
 800c3dc:	3714      	adds	r7, #20
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	e000e3f0 	.word	0xe000e3f0
 800c3ec:	200011a4 	.word	0x200011a4
 800c3f0:	e000ed0c 	.word	0xe000ed0c
 800c3f4:	200011a8 	.word	0x200011a8

0800c3f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08a      	sub	sp, #40	; 0x28
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c400:	2300      	movs	r3, #0
 800c402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c404:	f7fe fd98 	bl	800af38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c408:	4b5b      	ldr	r3, [pc, #364]	; (800c578 <pvPortMalloc+0x180>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d101      	bne.n	800c414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c410:	f000 f920 	bl	800c654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c414:	4b59      	ldr	r3, [pc, #356]	; (800c57c <pvPortMalloc+0x184>)
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4013      	ands	r3, r2
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f040 8093 	bne.w	800c548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d01d      	beq.n	800c464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c428:	2208      	movs	r2, #8
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4413      	add	r3, r2
 800c42e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f003 0307 	and.w	r3, r3, #7
 800c436:	2b00      	cmp	r3, #0
 800c438:	d014      	beq.n	800c464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f023 0307 	bic.w	r3, r3, #7
 800c440:	3308      	adds	r3, #8
 800c442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f003 0307 	and.w	r3, r3, #7
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00a      	beq.n	800c464 <pvPortMalloc+0x6c>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	617b      	str	r3, [r7, #20]
}
 800c460:	bf00      	nop
 800c462:	e7fe      	b.n	800c462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d06e      	beq.n	800c548 <pvPortMalloc+0x150>
 800c46a:	4b45      	ldr	r3, [pc, #276]	; (800c580 <pvPortMalloc+0x188>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	429a      	cmp	r2, r3
 800c472:	d869      	bhi.n	800c548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c474:	4b43      	ldr	r3, [pc, #268]	; (800c584 <pvPortMalloc+0x18c>)
 800c476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c478:	4b42      	ldr	r3, [pc, #264]	; (800c584 <pvPortMalloc+0x18c>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c47e:	e004      	b.n	800c48a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	429a      	cmp	r2, r3
 800c492:	d903      	bls.n	800c49c <pvPortMalloc+0xa4>
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1f1      	bne.n	800c480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c49c:	4b36      	ldr	r3, [pc, #216]	; (800c578 <pvPortMalloc+0x180>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d050      	beq.n	800c548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4a6:	6a3b      	ldr	r3, [r7, #32]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2208      	movs	r2, #8
 800c4ac:	4413      	add	r3, r2
 800c4ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	6a3b      	ldr	r3, [r7, #32]
 800c4b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ba:	685a      	ldr	r2, [r3, #4]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	1ad2      	subs	r2, r2, r3
 800c4c0:	2308      	movs	r3, #8
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d91f      	bls.n	800c508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	f003 0307 	and.w	r3, r3, #7
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d00a      	beq.n	800c4f0 <pvPortMalloc+0xf8>
	__asm volatile
 800c4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4de:	f383 8811 	msr	BASEPRI, r3
 800c4e2:	f3bf 8f6f 	isb	sy
 800c4e6:	f3bf 8f4f 	dsb	sy
 800c4ea:	613b      	str	r3, [r7, #16]
}
 800c4ec:	bf00      	nop
 800c4ee:	e7fe      	b.n	800c4ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f2:	685a      	ldr	r2, [r3, #4]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	1ad2      	subs	r2, r2, r3
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c502:	69b8      	ldr	r0, [r7, #24]
 800c504:	f000 f908 	bl	800c718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c508:	4b1d      	ldr	r3, [pc, #116]	; (800c580 <pvPortMalloc+0x188>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	4a1b      	ldr	r2, [pc, #108]	; (800c580 <pvPortMalloc+0x188>)
 800c514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c516:	4b1a      	ldr	r3, [pc, #104]	; (800c580 <pvPortMalloc+0x188>)
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	4b1b      	ldr	r3, [pc, #108]	; (800c588 <pvPortMalloc+0x190>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d203      	bcs.n	800c52a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c522:	4b17      	ldr	r3, [pc, #92]	; (800c580 <pvPortMalloc+0x188>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a18      	ldr	r2, [pc, #96]	; (800c588 <pvPortMalloc+0x190>)
 800c528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	685a      	ldr	r2, [r3, #4]
 800c52e:	4b13      	ldr	r3, [pc, #76]	; (800c57c <pvPortMalloc+0x184>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	431a      	orrs	r2, r3
 800c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	2200      	movs	r2, #0
 800c53c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c53e:	4b13      	ldr	r3, [pc, #76]	; (800c58c <pvPortMalloc+0x194>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	3301      	adds	r3, #1
 800c544:	4a11      	ldr	r2, [pc, #68]	; (800c58c <pvPortMalloc+0x194>)
 800c546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c548:	f7fe fd04 	bl	800af54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	f003 0307 	and.w	r3, r3, #7
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00a      	beq.n	800c56c <pvPortMalloc+0x174>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	60fb      	str	r3, [r7, #12]
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <pvPortMalloc+0x172>
	return pvReturn;
 800c56c:	69fb      	ldr	r3, [r7, #28]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3728      	adds	r7, #40	; 0x28
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20004db4 	.word	0x20004db4
 800c57c:	20004dc8 	.word	0x20004dc8
 800c580:	20004db8 	.word	0x20004db8
 800c584:	20004dac 	.word	0x20004dac
 800c588:	20004dbc 	.word	0x20004dbc
 800c58c:	20004dc0 	.word	0x20004dc0

0800c590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b086      	sub	sp, #24
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d04d      	beq.n	800c63e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5a2:	2308      	movs	r3, #8
 800c5a4:	425b      	negs	r3, r3
 800c5a6:	697a      	ldr	r2, [r7, #20]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	685a      	ldr	r2, [r3, #4]
 800c5b4:	4b24      	ldr	r3, [pc, #144]	; (800c648 <vPortFree+0xb8>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10a      	bne.n	800c5d4 <vPortFree+0x44>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	60fb      	str	r3, [r7, #12]
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00a      	beq.n	800c5f2 <vPortFree+0x62>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	60bb      	str	r3, [r7, #8]
}
 800c5ee:	bf00      	nop
 800c5f0:	e7fe      	b.n	800c5f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	685a      	ldr	r2, [r3, #4]
 800c5f6:	4b14      	ldr	r3, [pc, #80]	; (800c648 <vPortFree+0xb8>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d01e      	beq.n	800c63e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d11a      	bne.n	800c63e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	685a      	ldr	r2, [r3, #4]
 800c60c:	4b0e      	ldr	r3, [pc, #56]	; (800c648 <vPortFree+0xb8>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	43db      	mvns	r3, r3
 800c612:	401a      	ands	r2, r3
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c618:	f7fe fc8e 	bl	800af38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	685a      	ldr	r2, [r3, #4]
 800c620:	4b0a      	ldr	r3, [pc, #40]	; (800c64c <vPortFree+0xbc>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4413      	add	r3, r2
 800c626:	4a09      	ldr	r2, [pc, #36]	; (800c64c <vPortFree+0xbc>)
 800c628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c62a:	6938      	ldr	r0, [r7, #16]
 800c62c:	f000 f874 	bl	800c718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c630:	4b07      	ldr	r3, [pc, #28]	; (800c650 <vPortFree+0xc0>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	3301      	adds	r3, #1
 800c636:	4a06      	ldr	r2, [pc, #24]	; (800c650 <vPortFree+0xc0>)
 800c638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c63a:	f7fe fc8b 	bl	800af54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c63e:	bf00      	nop
 800c640:	3718      	adds	r7, #24
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	20004dc8 	.word	0x20004dc8
 800c64c:	20004db8 	.word	0x20004db8
 800c650:	20004dc4 	.word	0x20004dc4

0800c654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c65a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c65e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c660:	4b27      	ldr	r3, [pc, #156]	; (800c700 <prvHeapInit+0xac>)
 800c662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f003 0307 	and.w	r3, r3, #7
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00c      	beq.n	800c688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	3307      	adds	r3, #7
 800c672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f023 0307 	bic.w	r3, r3, #7
 800c67a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	4a1f      	ldr	r2, [pc, #124]	; (800c700 <prvHeapInit+0xac>)
 800c684:	4413      	add	r3, r2
 800c686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c68c:	4a1d      	ldr	r2, [pc, #116]	; (800c704 <prvHeapInit+0xb0>)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c692:	4b1c      	ldr	r3, [pc, #112]	; (800c704 <prvHeapInit+0xb0>)
 800c694:	2200      	movs	r2, #0
 800c696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	4413      	add	r3, r2
 800c69e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c6a0:	2208      	movs	r2, #8
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	1a9b      	subs	r3, r3, r2
 800c6a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f023 0307 	bic.w	r3, r3, #7
 800c6ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	4a15      	ldr	r2, [pc, #84]	; (800c708 <prvHeapInit+0xb4>)
 800c6b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6b6:	4b14      	ldr	r3, [pc, #80]	; (800c708 <prvHeapInit+0xb4>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6be:	4b12      	ldr	r3, [pc, #72]	; (800c708 <prvHeapInit+0xb4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	1ad2      	subs	r2, r2, r3
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6d4:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <prvHeapInit+0xb4>)
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	4a0a      	ldr	r2, [pc, #40]	; (800c70c <prvHeapInit+0xb8>)
 800c6e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	4a09      	ldr	r2, [pc, #36]	; (800c710 <prvHeapInit+0xbc>)
 800c6ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6ec:	4b09      	ldr	r3, [pc, #36]	; (800c714 <prvHeapInit+0xc0>)
 800c6ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c6f2:	601a      	str	r2, [r3, #0]
}
 800c6f4:	bf00      	nop
 800c6f6:	3714      	adds	r7, #20
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr
 800c700:	200011ac 	.word	0x200011ac
 800c704:	20004dac 	.word	0x20004dac
 800c708:	20004db4 	.word	0x20004db4
 800c70c:	20004dbc 	.word	0x20004dbc
 800c710:	20004db8 	.word	0x20004db8
 800c714:	20004dc8 	.word	0x20004dc8

0800c718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c720:	4b28      	ldr	r3, [pc, #160]	; (800c7c4 <prvInsertBlockIntoFreeList+0xac>)
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	e002      	b.n	800c72c <prvInsertBlockIntoFreeList+0x14>
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	60fb      	str	r3, [r7, #12]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	429a      	cmp	r2, r3
 800c734:	d8f7      	bhi.n	800c726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	4413      	add	r3, r2
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	429a      	cmp	r2, r3
 800c746:	d108      	bne.n	800c75a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	441a      	add	r2, r3
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	441a      	add	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d118      	bne.n	800c7a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	4b15      	ldr	r3, [pc, #84]	; (800c7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	429a      	cmp	r2, r3
 800c778:	d00d      	beq.n	800c796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	441a      	add	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	601a      	str	r2, [r3, #0]
 800c794:	e008      	b.n	800c7a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c796:	4b0c      	ldr	r3, [pc, #48]	; (800c7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	601a      	str	r2, [r3, #0]
 800c79e:	e003      	b.n	800c7a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d002      	beq.n	800c7b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7b6:	bf00      	nop
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	20004dac 	.word	0x20004dac
 800c7c8:	20004db4 	.word	0x20004db4

0800c7cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	490e      	ldr	r1, [pc, #56]	; (800c80c <MX_USB_HOST_Init+0x40>)
 800c7d4:	480e      	ldr	r0, [pc, #56]	; (800c810 <MX_USB_HOST_Init+0x44>)
 800c7d6:	f7fb faf1 	bl	8007dbc <USBH_Init>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c7e0:	f7f4 f982 	bl	8000ae8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c7e4:	490b      	ldr	r1, [pc, #44]	; (800c814 <MX_USB_HOST_Init+0x48>)
 800c7e6:	480a      	ldr	r0, [pc, #40]	; (800c810 <MX_USB_HOST_Init+0x44>)
 800c7e8:	f7fb fb98 	bl	8007f1c <USBH_RegisterClass>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d001      	beq.n	800c7f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c7f2:	f7f4 f979 	bl	8000ae8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c7f6:	4806      	ldr	r0, [pc, #24]	; (800c810 <MX_USB_HOST_Init+0x44>)
 800c7f8:	f7fb fc1c 	bl	8008034 <USBH_Start>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c802:	f7f4 f971 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c806:	bf00      	nop
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	0800c819 	.word	0x0800c819
 800c810:	20004fc4 	.word	0x20004fc4
 800c814:	2000000c 	.word	0x2000000c

0800c818 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c824:	78fb      	ldrb	r3, [r7, #3]
 800c826:	3b01      	subs	r3, #1
 800c828:	2b04      	cmp	r3, #4
 800c82a:	d819      	bhi.n	800c860 <USBH_UserProcess+0x48>
 800c82c:	a201      	add	r2, pc, #4	; (adr r2, 800c834 <USBH_UserProcess+0x1c>)
 800c82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c832:	bf00      	nop
 800c834:	0800c861 	.word	0x0800c861
 800c838:	0800c851 	.word	0x0800c851
 800c83c:	0800c861 	.word	0x0800c861
 800c840:	0800c859 	.word	0x0800c859
 800c844:	0800c849 	.word	0x0800c849
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c848:	4b09      	ldr	r3, [pc, #36]	; (800c870 <USBH_UserProcess+0x58>)
 800c84a:	2203      	movs	r2, #3
 800c84c:	701a      	strb	r2, [r3, #0]
  break;
 800c84e:	e008      	b.n	800c862 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c850:	4b07      	ldr	r3, [pc, #28]	; (800c870 <USBH_UserProcess+0x58>)
 800c852:	2202      	movs	r2, #2
 800c854:	701a      	strb	r2, [r3, #0]
  break;
 800c856:	e004      	b.n	800c862 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c858:	4b05      	ldr	r3, [pc, #20]	; (800c870 <USBH_UserProcess+0x58>)
 800c85a:	2201      	movs	r2, #1
 800c85c:	701a      	strb	r2, [r3, #0]
  break;
 800c85e:	e000      	b.n	800c862 <USBH_UserProcess+0x4a>

  default:
  break;
 800c860:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c862:	bf00      	nop
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	20004dcc 	.word	0x20004dcc

0800c874 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08a      	sub	sp, #40	; 0x28
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c87c:	f107 0314 	add.w	r3, r7, #20
 800c880:	2200      	movs	r2, #0
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	605a      	str	r2, [r3, #4]
 800c886:	609a      	str	r2, [r3, #8]
 800c888:	60da      	str	r2, [r3, #12]
 800c88a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c894:	d147      	bne.n	800c926 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c896:	2300      	movs	r3, #0
 800c898:	613b      	str	r3, [r7, #16]
 800c89a:	4b25      	ldr	r3, [pc, #148]	; (800c930 <HAL_HCD_MspInit+0xbc>)
 800c89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c89e:	4a24      	ldr	r2, [pc, #144]	; (800c930 <HAL_HCD_MspInit+0xbc>)
 800c8a0:	f043 0301 	orr.w	r3, r3, #1
 800c8a4:	6313      	str	r3, [r2, #48]	; 0x30
 800c8a6:	4b22      	ldr	r3, [pc, #136]	; (800c930 <HAL_HCD_MspInit+0xbc>)
 800c8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	613b      	str	r3, [r7, #16]
 800c8b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c8b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c8c0:	f107 0314 	add.w	r3, r7, #20
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	481b      	ldr	r0, [pc, #108]	; (800c934 <HAL_HCD_MspInit+0xc0>)
 800c8c8:	f7f4 ffca 	bl	8001860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c8cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c8d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8d2:	2302      	movs	r3, #2
 800c8d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c8de:	230a      	movs	r3, #10
 800c8e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8e2:	f107 0314 	add.w	r3, r7, #20
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	4812      	ldr	r0, [pc, #72]	; (800c934 <HAL_HCD_MspInit+0xc0>)
 800c8ea:	f7f4 ffb9 	bl	8001860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c8ee:	4b10      	ldr	r3, [pc, #64]	; (800c930 <HAL_HCD_MspInit+0xbc>)
 800c8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f2:	4a0f      	ldr	r2, [pc, #60]	; (800c930 <HAL_HCD_MspInit+0xbc>)
 800c8f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8f8:	6353      	str	r3, [r2, #52]	; 0x34
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	60fb      	str	r3, [r7, #12]
 800c8fe:	4b0c      	ldr	r3, [pc, #48]	; (800c930 <HAL_HCD_MspInit+0xbc>)
 800c900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c902:	4a0b      	ldr	r2, [pc, #44]	; (800c930 <HAL_HCD_MspInit+0xbc>)
 800c904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c908:	6453      	str	r3, [r2, #68]	; 0x44
 800c90a:	4b09      	ldr	r3, [pc, #36]	; (800c930 <HAL_HCD_MspInit+0xbc>)
 800c90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c90e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c916:	2200      	movs	r2, #0
 800c918:	2105      	movs	r1, #5
 800c91a:	2043      	movs	r0, #67	; 0x43
 800c91c:	f7f4 fee4 	bl	80016e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c920:	2043      	movs	r0, #67	; 0x43
 800c922:	f7f4 fefd 	bl	8001720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c926:	bf00      	nop
 800c928:	3728      	adds	r7, #40	; 0x28
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	40023800 	.word	0x40023800
 800c934:	40020000 	.word	0x40020000

0800c938 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c946:	4618      	mov	r0, r3
 800c948:	f7fc f821 	bl	800898e <USBH_LL_IncTimer>
}
 800c94c:	bf00      	nop
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c962:	4618      	mov	r0, r3
 800c964:	f7fc f865 	bl	8008a32 <USBH_LL_Connect>
}
 800c968:	bf00      	nop
 800c96a:	3708      	adds	r7, #8
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c97e:	4618      	mov	r0, r3
 800c980:	f7fc f87a 	bl	8008a78 <USBH_LL_Disconnect>
}
 800c984:	bf00      	nop
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	460b      	mov	r3, r1
 800c996:	70fb      	strb	r3, [r7, #3]
 800c998:	4613      	mov	r3, r2
 800c99a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fc f8b1 	bl	8008b0a <USBH_LL_NotifyURBChange>
#endif
}
 800c9a8:	bf00      	nop
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fc f80f 	bl	80089e2 <USBH_LL_PortEnabled>
}
 800c9c4:	bf00      	nop
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fc f81b 	bl	8008a16 <USBH_LL_PortDisabled>
}
 800c9e0:	bf00      	nop
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d12a      	bne.n	800ca50 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c9fa:	4a18      	ldr	r2, [pc, #96]	; (800ca5c <USBH_LL_Init+0x74>)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a15      	ldr	r2, [pc, #84]	; (800ca5c <USBH_LL_Init+0x74>)
 800ca06:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ca0a:	4b14      	ldr	r3, [pc, #80]	; (800ca5c <USBH_LL_Init+0x74>)
 800ca0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ca10:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ca12:	4b12      	ldr	r3, [pc, #72]	; (800ca5c <USBH_LL_Init+0x74>)
 800ca14:	2208      	movs	r2, #8
 800ca16:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ca18:	4b10      	ldr	r3, [pc, #64]	; (800ca5c <USBH_LL_Init+0x74>)
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ca1e:	4b0f      	ldr	r3, [pc, #60]	; (800ca5c <USBH_LL_Init+0x74>)
 800ca20:	2200      	movs	r2, #0
 800ca22:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ca24:	4b0d      	ldr	r3, [pc, #52]	; (800ca5c <USBH_LL_Init+0x74>)
 800ca26:	2202      	movs	r2, #2
 800ca28:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ca2a:	4b0c      	ldr	r3, [pc, #48]	; (800ca5c <USBH_LL_Init+0x74>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ca30:	480a      	ldr	r0, [pc, #40]	; (800ca5c <USBH_LL_Init+0x74>)
 800ca32:	f7f5 f8ca 	bl	8001bca <HAL_HCD_Init>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ca3c:	f7f4 f854 	bl	8000ae8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ca40:	4806      	ldr	r0, [pc, #24]	; (800ca5c <USBH_LL_Init+0x74>)
 800ca42:	f7f5 fca7 	bl	8002394 <HAL_HCD_GetCurrentFrame>
 800ca46:	4603      	mov	r3, r0
 800ca48:	4619      	mov	r1, r3
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7fb ff90 	bl	8008970 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	200053a8 	.word	0x200053a8

0800ca60 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7f5 fc16 	bl	80022a8 <HAL_HCD_Start>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f000 f95c 	bl	800cd40 <USBH_Get_USB_Status>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b084      	sub	sp, #16
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800caac:	4618      	mov	r0, r3
 800caae:	f7f5 fc1e 	bl	80022ee <HAL_HCD_Stop>
 800cab2:	4603      	mov	r3, r0
 800cab4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cab6:	7bfb      	ldrb	r3, [r7, #15]
 800cab8:	4618      	mov	r0, r3
 800caba:	f000 f941 	bl	800cd40 <USBH_Get_USB_Status>
 800cabe:	4603      	mov	r3, r0
 800cac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cac2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cad4:	2301      	movs	r3, #1
 800cad6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cade:	4618      	mov	r0, r3
 800cae0:	f7f5 fc66 	bl	80023b0 <HAL_HCD_GetCurrentSpeed>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d00c      	beq.n	800cb04 <USBH_LL_GetSpeed+0x38>
 800caea:	2b02      	cmp	r3, #2
 800caec:	d80d      	bhi.n	800cb0a <USBH_LL_GetSpeed+0x3e>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d002      	beq.n	800caf8 <USBH_LL_GetSpeed+0x2c>
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d003      	beq.n	800cafe <USBH_LL_GetSpeed+0x32>
 800caf6:	e008      	b.n	800cb0a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800caf8:	2300      	movs	r3, #0
 800cafa:	73fb      	strb	r3, [r7, #15]
    break;
 800cafc:	e008      	b.n	800cb10 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cafe:	2301      	movs	r3, #1
 800cb00:	73fb      	strb	r3, [r7, #15]
    break;
 800cb02:	e005      	b.n	800cb10 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cb04:	2302      	movs	r3, #2
 800cb06:	73fb      	strb	r3, [r7, #15]
    break;
 800cb08:	e002      	b.n	800cb10 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb0e:	bf00      	nop
  }
  return  speed;
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b084      	sub	sp, #16
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7f5 fbf9 	bl	8002328 <HAL_HCD_ResetPort>
 800cb36:	4603      	mov	r3, r0
 800cb38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 f8ff 	bl	800cd40 <USBH_Get_USB_Status>
 800cb42:	4603      	mov	r3, r0
 800cb44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb62:	78fa      	ldrb	r2, [r7, #3]
 800cb64:	4611      	mov	r1, r2
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7f5 fc00 	bl	800236c <HAL_HCD_HC_GetXferCount>
 800cb6c:	4603      	mov	r3, r0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cb76:	b590      	push	{r4, r7, lr}
 800cb78:	b089      	sub	sp, #36	; 0x24
 800cb7a:	af04      	add	r7, sp, #16
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	4608      	mov	r0, r1
 800cb80:	4611      	mov	r1, r2
 800cb82:	461a      	mov	r2, r3
 800cb84:	4603      	mov	r3, r0
 800cb86:	70fb      	strb	r3, [r7, #3]
 800cb88:	460b      	mov	r3, r1
 800cb8a:	70bb      	strb	r3, [r7, #2]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cb9e:	787c      	ldrb	r4, [r7, #1]
 800cba0:	78ba      	ldrb	r2, [r7, #2]
 800cba2:	78f9      	ldrb	r1, [r7, #3]
 800cba4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cba6:	9302      	str	r3, [sp, #8]
 800cba8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cbac:	9301      	str	r3, [sp, #4]
 800cbae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	4623      	mov	r3, r4
 800cbb6:	f7f5 f86a 	bl	8001c8e <HAL_HCD_HC_Init>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cbbe:	7bfb      	ldrb	r3, [r7, #15]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 f8bd 	bl	800cd40 <USBH_Get_USB_Status>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbca:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3714      	adds	r7, #20
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd90      	pop	{r4, r7, pc}

0800cbd4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	460b      	mov	r3, r1
 800cbde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbee:	78fa      	ldrb	r2, [r7, #3]
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7f5 f8da 	bl	8001dac <HAL_HCD_HC_Halt>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 f89e 	bl	800cd40 <USBH_Get_USB_Status>
 800cc04:	4603      	mov	r3, r0
 800cc06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc08:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cc12:	b590      	push	{r4, r7, lr}
 800cc14:	b089      	sub	sp, #36	; 0x24
 800cc16:	af04      	add	r7, sp, #16
 800cc18:	6078      	str	r0, [r7, #4]
 800cc1a:	4608      	mov	r0, r1
 800cc1c:	4611      	mov	r1, r2
 800cc1e:	461a      	mov	r2, r3
 800cc20:	4603      	mov	r3, r0
 800cc22:	70fb      	strb	r3, [r7, #3]
 800cc24:	460b      	mov	r3, r1
 800cc26:	70bb      	strb	r3, [r7, #2]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc30:	2300      	movs	r3, #0
 800cc32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cc3a:	787c      	ldrb	r4, [r7, #1]
 800cc3c:	78ba      	ldrb	r2, [r7, #2]
 800cc3e:	78f9      	ldrb	r1, [r7, #3]
 800cc40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cc44:	9303      	str	r3, [sp, #12]
 800cc46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cc48:	9302      	str	r3, [sp, #8]
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	4623      	mov	r3, r4
 800cc56:	f7f5 f8cd 	bl	8001df4 <HAL_HCD_HC_SubmitRequest>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f000 f86d 	bl	800cd40 <USBH_Get_USB_Status>
 800cc66:	4603      	mov	r3, r0
 800cc68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3714      	adds	r7, #20
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd90      	pop	{r4, r7, pc}

0800cc74 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc86:	78fa      	ldrb	r2, [r7, #3]
 800cc88:	4611      	mov	r1, r2
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7f5 fb5a 	bl	8002344 <HAL_HCD_HC_GetURBState>
 800cc90:	4603      	mov	r3, r0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b082      	sub	sp, #8
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	460b      	mov	r3, r1
 800cca4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d103      	bne.n	800ccb8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ccb0:	78fb      	ldrb	r3, [r7, #3]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 f870 	bl	800cd98 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ccb8:	20c8      	movs	r0, #200	; 0xc8
 800ccba:	f7f4 fc39 	bl	8001530 <HAL_Delay>
  return USBH_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70fb      	strb	r3, [r7, #3]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ccde:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cce0:	78fb      	ldrb	r3, [r7, #3]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	212c      	movs	r1, #44	; 0x2c
 800cce6:	fb01 f303 	mul.w	r3, r1, r3
 800ccea:	4413      	add	r3, r2
 800ccec:	333b      	adds	r3, #59	; 0x3b
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d009      	beq.n	800cd08 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ccf4:	78fb      	ldrb	r3, [r7, #3]
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	212c      	movs	r1, #44	; 0x2c
 800ccfa:	fb01 f303 	mul.w	r3, r1, r3
 800ccfe:	4413      	add	r3, r2
 800cd00:	3354      	adds	r3, #84	; 0x54
 800cd02:	78ba      	ldrb	r2, [r7, #2]
 800cd04:	701a      	strb	r2, [r3, #0]
 800cd06:	e008      	b.n	800cd1a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cd08:	78fb      	ldrb	r3, [r7, #3]
 800cd0a:	68fa      	ldr	r2, [r7, #12]
 800cd0c:	212c      	movs	r1, #44	; 0x2c
 800cd0e:	fb01 f303 	mul.w	r3, r1, r3
 800cd12:	4413      	add	r3, r2
 800cd14:	3355      	adds	r3, #85	; 0x55
 800cd16:	78ba      	ldrb	r2, [r7, #2]
 800cd18:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7f4 fbfd 	bl	8001530 <HAL_Delay>
}
 800cd36:	bf00      	nop
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
	...

0800cd40 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	4603      	mov	r3, r0
 800cd48:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cd4e:	79fb      	ldrb	r3, [r7, #7]
 800cd50:	2b03      	cmp	r3, #3
 800cd52:	d817      	bhi.n	800cd84 <USBH_Get_USB_Status+0x44>
 800cd54:	a201      	add	r2, pc, #4	; (adr r2, 800cd5c <USBH_Get_USB_Status+0x1c>)
 800cd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd5a:	bf00      	nop
 800cd5c:	0800cd6d 	.word	0x0800cd6d
 800cd60:	0800cd73 	.word	0x0800cd73
 800cd64:	0800cd79 	.word	0x0800cd79
 800cd68:	0800cd7f 	.word	0x0800cd7f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd70:	e00b      	b.n	800cd8a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cd72:	2302      	movs	r3, #2
 800cd74:	73fb      	strb	r3, [r7, #15]
    break;
 800cd76:	e008      	b.n	800cd8a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd7c:	e005      	b.n	800cd8a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cd7e:	2302      	movs	r3, #2
 800cd80:	73fb      	strb	r3, [r7, #15]
    break;
 800cd82:	e002      	b.n	800cd8a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cd84:	2302      	movs	r3, #2
 800cd86:	73fb      	strb	r3, [r7, #15]
    break;
 800cd88:	bf00      	nop
  }
  return usb_status;
 800cd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cda2:	79fb      	ldrb	r3, [r7, #7]
 800cda4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cda6:	79fb      	ldrb	r3, [r7, #7]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d102      	bne.n	800cdb2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cdac:	2301      	movs	r3, #1
 800cdae:	73fb      	strb	r3, [r7, #15]
 800cdb0:	e001      	b.n	800cdb6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cdb6:	7bfb      	ldrb	r3, [r7, #15]
 800cdb8:	461a      	mov	r2, r3
 800cdba:	2101      	movs	r1, #1
 800cdbc:	4803      	ldr	r0, [pc, #12]	; (800cdcc <MX_DriverVbusFS+0x34>)
 800cdbe:	f7f4 feeb 	bl	8001b98 <HAL_GPIO_WritePin>
}
 800cdc2:	bf00      	nop
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	40020800 	.word	0x40020800

0800cdd0 <__errno>:
 800cdd0:	4b01      	ldr	r3, [pc, #4]	; (800cdd8 <__errno+0x8>)
 800cdd2:	6818      	ldr	r0, [r3, #0]
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	20000030 	.word	0x20000030

0800cddc <__libc_init_array>:
 800cddc:	b570      	push	{r4, r5, r6, lr}
 800cdde:	4d0d      	ldr	r5, [pc, #52]	; (800ce14 <__libc_init_array+0x38>)
 800cde0:	4c0d      	ldr	r4, [pc, #52]	; (800ce18 <__libc_init_array+0x3c>)
 800cde2:	1b64      	subs	r4, r4, r5
 800cde4:	10a4      	asrs	r4, r4, #2
 800cde6:	2600      	movs	r6, #0
 800cde8:	42a6      	cmp	r6, r4
 800cdea:	d109      	bne.n	800ce00 <__libc_init_array+0x24>
 800cdec:	4d0b      	ldr	r5, [pc, #44]	; (800ce1c <__libc_init_array+0x40>)
 800cdee:	4c0c      	ldr	r4, [pc, #48]	; (800ce20 <__libc_init_array+0x44>)
 800cdf0:	f000 f906 	bl	800d000 <_init>
 800cdf4:	1b64      	subs	r4, r4, r5
 800cdf6:	10a4      	asrs	r4, r4, #2
 800cdf8:	2600      	movs	r6, #0
 800cdfa:	42a6      	cmp	r6, r4
 800cdfc:	d105      	bne.n	800ce0a <__libc_init_array+0x2e>
 800cdfe:	bd70      	pop	{r4, r5, r6, pc}
 800ce00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce04:	4798      	blx	r3
 800ce06:	3601      	adds	r6, #1
 800ce08:	e7ee      	b.n	800cde8 <__libc_init_array+0xc>
 800ce0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce0e:	4798      	blx	r3
 800ce10:	3601      	adds	r6, #1
 800ce12:	e7f2      	b.n	800cdfa <__libc_init_array+0x1e>
 800ce14:	0800e8b0 	.word	0x0800e8b0
 800ce18:	0800e8b0 	.word	0x0800e8b0
 800ce1c:	0800e8b0 	.word	0x0800e8b0
 800ce20:	0800e8b4 	.word	0x0800e8b4

0800ce24 <malloc>:
 800ce24:	4b02      	ldr	r3, [pc, #8]	; (800ce30 <malloc+0xc>)
 800ce26:	4601      	mov	r1, r0
 800ce28:	6818      	ldr	r0, [r3, #0]
 800ce2a:	f000 b871 	b.w	800cf10 <_malloc_r>
 800ce2e:	bf00      	nop
 800ce30:	20000030 	.word	0x20000030

0800ce34 <free>:
 800ce34:	4b02      	ldr	r3, [pc, #8]	; (800ce40 <free+0xc>)
 800ce36:	4601      	mov	r1, r0
 800ce38:	6818      	ldr	r0, [r3, #0]
 800ce3a:	f000 b819 	b.w	800ce70 <_free_r>
 800ce3e:	bf00      	nop
 800ce40:	20000030 	.word	0x20000030

0800ce44 <memcpy>:
 800ce44:	440a      	add	r2, r1
 800ce46:	4291      	cmp	r1, r2
 800ce48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce4c:	d100      	bne.n	800ce50 <memcpy+0xc>
 800ce4e:	4770      	bx	lr
 800ce50:	b510      	push	{r4, lr}
 800ce52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce5a:	4291      	cmp	r1, r2
 800ce5c:	d1f9      	bne.n	800ce52 <memcpy+0xe>
 800ce5e:	bd10      	pop	{r4, pc}

0800ce60 <memset>:
 800ce60:	4402      	add	r2, r0
 800ce62:	4603      	mov	r3, r0
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d100      	bne.n	800ce6a <memset+0xa>
 800ce68:	4770      	bx	lr
 800ce6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce6e:	e7f9      	b.n	800ce64 <memset+0x4>

0800ce70 <_free_r>:
 800ce70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce72:	2900      	cmp	r1, #0
 800ce74:	d048      	beq.n	800cf08 <_free_r+0x98>
 800ce76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce7a:	9001      	str	r0, [sp, #4]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	f1a1 0404 	sub.w	r4, r1, #4
 800ce82:	bfb8      	it	lt
 800ce84:	18e4      	addlt	r4, r4, r3
 800ce86:	f000 f8ad 	bl	800cfe4 <__malloc_lock>
 800ce8a:	4a20      	ldr	r2, [pc, #128]	; (800cf0c <_free_r+0x9c>)
 800ce8c:	9801      	ldr	r0, [sp, #4]
 800ce8e:	6813      	ldr	r3, [r2, #0]
 800ce90:	4615      	mov	r5, r2
 800ce92:	b933      	cbnz	r3, 800cea2 <_free_r+0x32>
 800ce94:	6063      	str	r3, [r4, #4]
 800ce96:	6014      	str	r4, [r2, #0]
 800ce98:	b003      	add	sp, #12
 800ce9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce9e:	f000 b8a7 	b.w	800cff0 <__malloc_unlock>
 800cea2:	42a3      	cmp	r3, r4
 800cea4:	d90b      	bls.n	800cebe <_free_r+0x4e>
 800cea6:	6821      	ldr	r1, [r4, #0]
 800cea8:	1862      	adds	r2, r4, r1
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	bf04      	itt	eq
 800ceae:	681a      	ldreq	r2, [r3, #0]
 800ceb0:	685b      	ldreq	r3, [r3, #4]
 800ceb2:	6063      	str	r3, [r4, #4]
 800ceb4:	bf04      	itt	eq
 800ceb6:	1852      	addeq	r2, r2, r1
 800ceb8:	6022      	streq	r2, [r4, #0]
 800ceba:	602c      	str	r4, [r5, #0]
 800cebc:	e7ec      	b.n	800ce98 <_free_r+0x28>
 800cebe:	461a      	mov	r2, r3
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	b10b      	cbz	r3, 800cec8 <_free_r+0x58>
 800cec4:	42a3      	cmp	r3, r4
 800cec6:	d9fa      	bls.n	800cebe <_free_r+0x4e>
 800cec8:	6811      	ldr	r1, [r2, #0]
 800ceca:	1855      	adds	r5, r2, r1
 800cecc:	42a5      	cmp	r5, r4
 800cece:	d10b      	bne.n	800cee8 <_free_r+0x78>
 800ced0:	6824      	ldr	r4, [r4, #0]
 800ced2:	4421      	add	r1, r4
 800ced4:	1854      	adds	r4, r2, r1
 800ced6:	42a3      	cmp	r3, r4
 800ced8:	6011      	str	r1, [r2, #0]
 800ceda:	d1dd      	bne.n	800ce98 <_free_r+0x28>
 800cedc:	681c      	ldr	r4, [r3, #0]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	6053      	str	r3, [r2, #4]
 800cee2:	4421      	add	r1, r4
 800cee4:	6011      	str	r1, [r2, #0]
 800cee6:	e7d7      	b.n	800ce98 <_free_r+0x28>
 800cee8:	d902      	bls.n	800cef0 <_free_r+0x80>
 800ceea:	230c      	movs	r3, #12
 800ceec:	6003      	str	r3, [r0, #0]
 800ceee:	e7d3      	b.n	800ce98 <_free_r+0x28>
 800cef0:	6825      	ldr	r5, [r4, #0]
 800cef2:	1961      	adds	r1, r4, r5
 800cef4:	428b      	cmp	r3, r1
 800cef6:	bf04      	itt	eq
 800cef8:	6819      	ldreq	r1, [r3, #0]
 800cefa:	685b      	ldreq	r3, [r3, #4]
 800cefc:	6063      	str	r3, [r4, #4]
 800cefe:	bf04      	itt	eq
 800cf00:	1949      	addeq	r1, r1, r5
 800cf02:	6021      	streq	r1, [r4, #0]
 800cf04:	6054      	str	r4, [r2, #4]
 800cf06:	e7c7      	b.n	800ce98 <_free_r+0x28>
 800cf08:	b003      	add	sp, #12
 800cf0a:	bd30      	pop	{r4, r5, pc}
 800cf0c:	20004dd0 	.word	0x20004dd0

0800cf10 <_malloc_r>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	1ccd      	adds	r5, r1, #3
 800cf14:	f025 0503 	bic.w	r5, r5, #3
 800cf18:	3508      	adds	r5, #8
 800cf1a:	2d0c      	cmp	r5, #12
 800cf1c:	bf38      	it	cc
 800cf1e:	250c      	movcc	r5, #12
 800cf20:	2d00      	cmp	r5, #0
 800cf22:	4606      	mov	r6, r0
 800cf24:	db01      	blt.n	800cf2a <_malloc_r+0x1a>
 800cf26:	42a9      	cmp	r1, r5
 800cf28:	d903      	bls.n	800cf32 <_malloc_r+0x22>
 800cf2a:	230c      	movs	r3, #12
 800cf2c:	6033      	str	r3, [r6, #0]
 800cf2e:	2000      	movs	r0, #0
 800cf30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf32:	f000 f857 	bl	800cfe4 <__malloc_lock>
 800cf36:	4921      	ldr	r1, [pc, #132]	; (800cfbc <_malloc_r+0xac>)
 800cf38:	680a      	ldr	r2, [r1, #0]
 800cf3a:	4614      	mov	r4, r2
 800cf3c:	b99c      	cbnz	r4, 800cf66 <_malloc_r+0x56>
 800cf3e:	4f20      	ldr	r7, [pc, #128]	; (800cfc0 <_malloc_r+0xb0>)
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	b923      	cbnz	r3, 800cf4e <_malloc_r+0x3e>
 800cf44:	4621      	mov	r1, r4
 800cf46:	4630      	mov	r0, r6
 800cf48:	f000 f83c 	bl	800cfc4 <_sbrk_r>
 800cf4c:	6038      	str	r0, [r7, #0]
 800cf4e:	4629      	mov	r1, r5
 800cf50:	4630      	mov	r0, r6
 800cf52:	f000 f837 	bl	800cfc4 <_sbrk_r>
 800cf56:	1c43      	adds	r3, r0, #1
 800cf58:	d123      	bne.n	800cfa2 <_malloc_r+0x92>
 800cf5a:	230c      	movs	r3, #12
 800cf5c:	6033      	str	r3, [r6, #0]
 800cf5e:	4630      	mov	r0, r6
 800cf60:	f000 f846 	bl	800cff0 <__malloc_unlock>
 800cf64:	e7e3      	b.n	800cf2e <_malloc_r+0x1e>
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	1b5b      	subs	r3, r3, r5
 800cf6a:	d417      	bmi.n	800cf9c <_malloc_r+0x8c>
 800cf6c:	2b0b      	cmp	r3, #11
 800cf6e:	d903      	bls.n	800cf78 <_malloc_r+0x68>
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	441c      	add	r4, r3
 800cf74:	6025      	str	r5, [r4, #0]
 800cf76:	e004      	b.n	800cf82 <_malloc_r+0x72>
 800cf78:	6863      	ldr	r3, [r4, #4]
 800cf7a:	42a2      	cmp	r2, r4
 800cf7c:	bf0c      	ite	eq
 800cf7e:	600b      	streq	r3, [r1, #0]
 800cf80:	6053      	strne	r3, [r2, #4]
 800cf82:	4630      	mov	r0, r6
 800cf84:	f000 f834 	bl	800cff0 <__malloc_unlock>
 800cf88:	f104 000b 	add.w	r0, r4, #11
 800cf8c:	1d23      	adds	r3, r4, #4
 800cf8e:	f020 0007 	bic.w	r0, r0, #7
 800cf92:	1ac2      	subs	r2, r0, r3
 800cf94:	d0cc      	beq.n	800cf30 <_malloc_r+0x20>
 800cf96:	1a1b      	subs	r3, r3, r0
 800cf98:	50a3      	str	r3, [r4, r2]
 800cf9a:	e7c9      	b.n	800cf30 <_malloc_r+0x20>
 800cf9c:	4622      	mov	r2, r4
 800cf9e:	6864      	ldr	r4, [r4, #4]
 800cfa0:	e7cc      	b.n	800cf3c <_malloc_r+0x2c>
 800cfa2:	1cc4      	adds	r4, r0, #3
 800cfa4:	f024 0403 	bic.w	r4, r4, #3
 800cfa8:	42a0      	cmp	r0, r4
 800cfaa:	d0e3      	beq.n	800cf74 <_malloc_r+0x64>
 800cfac:	1a21      	subs	r1, r4, r0
 800cfae:	4630      	mov	r0, r6
 800cfb0:	f000 f808 	bl	800cfc4 <_sbrk_r>
 800cfb4:	3001      	adds	r0, #1
 800cfb6:	d1dd      	bne.n	800cf74 <_malloc_r+0x64>
 800cfb8:	e7cf      	b.n	800cf5a <_malloc_r+0x4a>
 800cfba:	bf00      	nop
 800cfbc:	20004dd0 	.word	0x20004dd0
 800cfc0:	20004dd4 	.word	0x20004dd4

0800cfc4 <_sbrk_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d06      	ldr	r5, [pc, #24]	; (800cfe0 <_sbrk_r+0x1c>)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	602b      	str	r3, [r5, #0]
 800cfd0:	f7f4 f9fa 	bl	80013c8 <_sbrk>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_sbrk_r+0x1a>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_sbrk_r+0x1a>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	200056ac 	.word	0x200056ac

0800cfe4 <__malloc_lock>:
 800cfe4:	4801      	ldr	r0, [pc, #4]	; (800cfec <__malloc_lock+0x8>)
 800cfe6:	f000 b809 	b.w	800cffc <__retarget_lock_acquire_recursive>
 800cfea:	bf00      	nop
 800cfec:	200056b4 	.word	0x200056b4

0800cff0 <__malloc_unlock>:
 800cff0:	4801      	ldr	r0, [pc, #4]	; (800cff8 <__malloc_unlock+0x8>)
 800cff2:	f000 b804 	b.w	800cffe <__retarget_lock_release_recursive>
 800cff6:	bf00      	nop
 800cff8:	200056b4 	.word	0x200056b4

0800cffc <__retarget_lock_acquire_recursive>:
 800cffc:	4770      	bx	lr

0800cffe <__retarget_lock_release_recursive>:
 800cffe:	4770      	bx	lr

0800d000 <_init>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	bf00      	nop
 800d004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d006:	bc08      	pop	{r3}
 800d008:	469e      	mov	lr, r3
 800d00a:	4770      	bx	lr

0800d00c <_fini>:
 800d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00e:	bf00      	nop
 800d010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d012:	bc08      	pop	{r3}
 800d014:	469e      	mov	lr, r3
 800d016:	4770      	bx	lr
